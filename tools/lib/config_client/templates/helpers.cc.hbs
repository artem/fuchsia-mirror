void Config::RecordInspect(inspect::Node* node) const {
  {{#each fields}}
    {{#if (is_string_vector type_)}}
      auto {{ident}}_array_ = node->CreateStringArray("{{ident}}", this->{{ident}}().size());
      for (size_t i = 0; i < this->{{ident}}().size(); i++) {
        auto ref = std::string_view(this->{{ident}}()[i].data());
        {{ident}}_array_.Set(i, ref);
      }
      node->Record(std::move({{ident}}_array_));
    {{else}}
      {{#if (is_vector type_)}}
        auto {{ident}}_array_ =
          node->Create{{(inspect_type type_)}}Array("{{ident}}", this->{{ident}}().size());
        for (size_t i = 0; i < this->{{ident}}().size(); i++) {
            {{ident}}_array_.Set(i, this->{{ident}}()[i]);
        }
        node->Record(std::move({{ident}}_array_));
      {{else}}
        node->Record{{(inspect_type type_)}}("{{ident}}", this->{{ident}}());
      {{/if}}
    {{/if}}
  {{/each}}
}

std::string Config::ToString() const noexcept {
  std::string str;
  str.reserve(4096); // minimize reallocations

  {{#each fields}}
    {{#if (is_vector type_)}}
      str += "{{ident}}: [";
      for (auto iter = {{ident}}().begin(); iter != {{ident}}().end(); iter++) {
        if (iter != {{ident}}().begin()) str += ", ";
        {{#if (is_string_vector type_)}}
          str += *iter;
        {{else}}
          str += std::to_string(*iter);
        {{/if}}
      }
      str += "]";
    {{else}}
      {{#if (is_bool type_)}}
        if ({{ident}}()) {
          str += "{{ident}}; ";
        }
      {{else}}
        str += "{{ident}}=";
        {{#if (is_string type_)}}
          str += {{ident}}();
        {{else}}
          str += std::to_string({{ident}}());
        {{/if}}
        str += "; ";
      {{/if}}
    {{/if}}

  {{~/each~}}

  str.shrink_to_fit(); // give back excess allocations if above reservation was too much
  return str;
}
