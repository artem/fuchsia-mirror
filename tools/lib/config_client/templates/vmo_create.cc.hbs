// Create the FIDL object.
{{fidl_cpp_namespace}}::Config fidl_config;
{{#each fields}}
fidl_config.{{ident}}(this->{{ident}}());
{{~/each~}}

// Persist the FIDL object.
fit::result persist_result = fidl::Persist(fidl_config);
ZX_ASSERT(persist_result.is_ok());
std::vector fidl_bytes = std::move(persist_result.value());

// Create the checksum.
std::vector<uint8_t> checksum {
{{#each expected_checksum}}
{{(hex_byte this)}}{{#unless @last}},{{/unless}}
{{/each}}
};

// Calculate the VMO size.
uint64_t vmo_content_size = 2 + checksum.size() + fidl_bytes.size();

zx_status_t status;
zx::vmo config_vmo;

status = zx::vmo::create(vmo_content_size, 0, &config_vmo);
ZX_ASSERT_MSG(status == ZX_OK, "Failed to create vmo: %s", zx_status_get_string(status));

// Write the checksum length
uint16_t checksum_length = static_cast<uint16_t>(checksum.size());
status = config_vmo.write(&checksum_length, 0, 2);
ZX_ASSERT_MSG(status == ZX_OK, "Failed to write checksum length: %s", zx_status_get_string(status));

// Write the checksum.
status = config_vmo.write(checksum.data(), 2, checksum.size());
ZX_ASSERT_MSG(status == ZX_OK, "Failed to write checksum: %s", zx_status_get_string(status));

// Write the FIDL data.
size_t header = 2 + checksum_length;
status = config_vmo.write(fidl_bytes.data(), header, fidl_bytes.size());
ZX_ASSERT_MSG(status == ZX_OK, "Could not write FIDL struct to config VMO: %s", zx_status_get_string(status));

// Finished!
return config_vmo;
