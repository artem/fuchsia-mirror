// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#![warn(clippy::all)]
#![allow(unused_parens, unused_mut, unused_imports, nonstandard_style)]

use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        endpoints::{ControlHandle as _, Responder as _},
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

#[cfg(target_os = "fuchsia")]
use fuchsia_zircon as zx;

pub type ReferenceMe = fidl_test_someotherlibrary::ReferenceMe;

pub type AliasOfChannel = fidl::Channel;

pub type Channel = fidl::Channel;

pub type U32 = u32;

pub type VecOfStrings = Vec<String>;

pub type VecOfStringsAtMost5 = Vec<String>;

#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[repr(u32)]
pub enum ObjType {
    None = 0,
    Channel = 4,
}

impl ObjType {
    #[inline]
    pub fn from_primitive(prim: u32) -> Option<Self> {
        match prim {
            0 => Some(Self::None),
            4 => Some(Self::Channel),
            _ => None,
        }
    }

    #[inline]
    pub const fn into_primitive(self) -> u32 {
        self as u32
    }

    #[deprecated = "Strict enums should not use `is_unknown`"]
    #[inline]
    pub fn is_unknown(&self) -> bool {
        false
    }
}

#[derive(Debug, PartialEq)]
pub struct ExampleOfUseOfAliases {
    pub field_of_u32: u32,
    pub field_of_vec_of_strings: Vec<String>,
    pub field_of_vec_of_strings_at_most_nine: Vec<String>,
    pub field_of_vec_of_strings_at_most_5: Vec<String>,
    pub field_of_vec_of_ref_me_at_most_5: Vec<fidl_test_someotherlibrary::ReferenceMe>,
    pub field_of_channel: fidl::Channel,
    pub field_of_client_end: fidl::Channel,
    pub field_of_nullable_client_end: Option<fidl::Channel>,
}

impl fidl::Standalone for ExampleOfUseOfAliases {}

mod internal {
    use super::*;
    unsafe impl fidl::encoding::TypeMarker for ObjType {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            std::mem::align_of::<u32>()
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            std::mem::size_of::<u32>()
        }

        #[inline(always)]
        fn encode_is_copy() -> bool {
            true
        }

        #[inline(always)]
        fn decode_is_copy() -> bool {
            false
        }
    }

    impl fidl::encoding::ValueTypeMarker for ObjType {
        type Borrowed<'a> = Self;
        #[inline(always)]
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            *value
        }
    }

    unsafe impl fidl::encoding::Encode<Self> for ObjType {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<Self>(offset);
            encoder.write_num(self.into_primitive(), offset);
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for ObjType {
        #[inline(always)]
        fn new_empty() -> Self {
            Self::None
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            let prim = decoder.read_num::<u32>(offset);

            *self = Self::from_primitive(prim).ok_or(fidl::Error::InvalidEnumValue)?;
            Ok(())
        }
    }

    unsafe impl fidl::encoding::TypeMarker for ExampleOfUseOfAliases {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            88
        }
    }
    impl fidl::encoding::ResourceTypeMarker for ExampleOfUseOfAliases {
        type Borrowed<'a> = &'a mut Self;
        fn take_or_borrow<'a>(
            value: &'a mut <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<ExampleOfUseOfAliases> for &mut ExampleOfUseOfAliases {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<ExampleOfUseOfAliases>(offset);
            // Delegate to tuple encoding.
            fidl::encoding::Encode::<ExampleOfUseOfAliases>::encode(
                (
                    <u32 as fidl::encoding::ValueTypeMarker>::borrow(&self.field_of_u32),
                    <fidl::encoding::UnboundedVector<fidl::encoding::UnboundedString> as fidl::encoding::ValueTypeMarker>::borrow(&self.field_of_vec_of_strings),
                    <fidl::encoding::Vector<fidl::encoding::UnboundedString, 9> as fidl::encoding::ValueTypeMarker>::borrow(&self.field_of_vec_of_strings_at_most_nine),
                    <fidl::encoding::Vector<fidl::encoding::UnboundedString, 5> as fidl::encoding::ValueTypeMarker>::borrow(&self.field_of_vec_of_strings_at_most_5),
                    <fidl::encoding::Vector<fidl_test_someotherlibrary::ReferenceMe, 5> as fidl::encoding::ValueTypeMarker>::borrow(&self.field_of_vec_of_ref_me_at_most_5),
                    <fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648> as fidl::encoding::ResourceTypeMarker>::take_or_borrow(&mut self.field_of_channel),
                    <fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648> as fidl::encoding::ResourceTypeMarker>::take_or_borrow(&mut self.field_of_client_end),
                    <fidl::encoding::Optional<fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648>> as fidl::encoding::ResourceTypeMarker>::take_or_borrow(&mut self.field_of_nullable_client_end),
                ),
                encoder, offset, _depth
            )
        }
    }
    unsafe impl<
            T0: fidl::encoding::Encode<u32>,
            T1: fidl::encoding::Encode<
                fidl::encoding::UnboundedVector<fidl::encoding::UnboundedString>,
            >,
            T2: fidl::encoding::Encode<fidl::encoding::Vector<fidl::encoding::UnboundedString, 9>>,
            T3: fidl::encoding::Encode<fidl::encoding::Vector<fidl::encoding::UnboundedString, 5>>,
            T4: fidl::encoding::Encode<
                fidl::encoding::Vector<fidl_test_someotherlibrary::ReferenceMe, 5>,
            >,
            T5: fidl::encoding::Encode<
                fidl::encoding::HandleType<
                    fidl::Channel,
                    { fidl::ObjectType::CHANNEL.into_raw() },
                    2147483648,
                >,
            >,
            T6: fidl::encoding::Encode<
                fidl::encoding::HandleType<
                    fidl::Channel,
                    { fidl::ObjectType::CHANNEL.into_raw() },
                    2147483648,
                >,
            >,
            T7: fidl::encoding::Encode<
                fidl::encoding::Optional<
                    fidl::encoding::HandleType<
                        fidl::Channel,
                        { fidl::ObjectType::CHANNEL.into_raw() },
                        2147483648,
                    >,
                >,
            >,
        > fidl::encoding::Encode<ExampleOfUseOfAliases> for (T0, T1, T2, T3, T4, T5, T6, T7)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<ExampleOfUseOfAliases>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            unsafe {
                let ptr = encoder.buf.as_mut_ptr().add(offset).offset(0);
                (ptr as *mut u64).write_unaligned(0);
            }
            unsafe {
                let ptr = encoder.buf.as_mut_ptr().add(offset).offset(80);
                (ptr as *mut u64).write_unaligned(0);
            }
            // Write the fields.
            self.0.encode(encoder, offset + 0, depth)?;
            self.1.encode(encoder, offset + 8, depth)?;
            self.2.encode(encoder, offset + 24, depth)?;
            self.3.encode(encoder, offset + 40, depth)?;
            self.4.encode(encoder, offset + 56, depth)?;
            self.5.encode(encoder, offset + 72, depth)?;
            self.6.encode(encoder, offset + 76, depth)?;
            self.7.encode(encoder, offset + 80, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for ExampleOfUseOfAliases {
        #[inline(always)]
        fn new_empty() -> Self {
            Self {
                field_of_u32: fidl::new_empty!(u32),
                field_of_vec_of_strings: fidl::new_empty!(
                    fidl::encoding::UnboundedVector<fidl::encoding::UnboundedString>
                ),
                field_of_vec_of_strings_at_most_nine: fidl::new_empty!(fidl::encoding::Vector<fidl::encoding::UnboundedString, 9>),
                field_of_vec_of_strings_at_most_5: fidl::new_empty!(fidl::encoding::Vector<fidl::encoding::UnboundedString, 5>),
                field_of_vec_of_ref_me_at_most_5: fidl::new_empty!(fidl::encoding::Vector<fidl_test_someotherlibrary::ReferenceMe, 5>),
                field_of_channel: fidl::new_empty!(fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648>),
                field_of_client_end: fidl::new_empty!(fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648>),
                field_of_nullable_client_end: fidl::new_empty!(
                    fidl::encoding::Optional<
                        fidl::encoding::HandleType<
                            fidl::Channel,
                            { fidl::ObjectType::CHANNEL.into_raw() },
                            2147483648,
                        >,
                    >
                ),
            }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            // Verify that padding bytes are zero.
            let ptr = unsafe { decoder.buf.as_ptr().add(offset).offset(0) };
            let padval = unsafe { (ptr as *const u64).read_unaligned() };
            let mask = 0xffffffff00000000u64;
            let maskedval = padval & mask;
            if maskedval != 0 {
                return Err(fidl::Error::NonZeroPadding {
                    padding_start: offset + 0 + ((mask as u64).trailing_zeros() / 8) as usize,
                });
            }
            let ptr = unsafe { decoder.buf.as_ptr().add(offset).offset(80) };
            let padval = unsafe { (ptr as *const u64).read_unaligned() };
            let mask = 0xffffffff00000000u64;
            let maskedval = padval & mask;
            if maskedval != 0 {
                return Err(fidl::Error::NonZeroPadding {
                    padding_start: offset + 80 + ((mask as u64).trailing_zeros() / 8) as usize,
                });
            }
            fidl::decode!(u32, &mut self.field_of_u32, decoder, offset + 0, _depth)?;
            fidl::decode!(
                fidl::encoding::UnboundedVector<fidl::encoding::UnboundedString>,
                &mut self.field_of_vec_of_strings,
                decoder,
                offset + 8,
                _depth
            )?;
            fidl::decode!(fidl::encoding::Vector<fidl::encoding::UnboundedString, 9>, &mut self.field_of_vec_of_strings_at_most_nine, decoder, offset + 24, _depth)?;
            fidl::decode!(fidl::encoding::Vector<fidl::encoding::UnboundedString, 5>, &mut self.field_of_vec_of_strings_at_most_5, decoder, offset + 40, _depth)?;
            fidl::decode!(fidl::encoding::Vector<fidl_test_someotherlibrary::ReferenceMe, 5>, &mut self.field_of_vec_of_ref_me_at_most_5, decoder, offset + 56, _depth)?;
            fidl::decode!(fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648>, &mut self.field_of_channel, decoder, offset + 72, _depth)?;
            fidl::decode!(fidl::encoding::HandleType<fidl::Channel, { fidl::ObjectType::CHANNEL.into_raw() }, 2147483648>, &mut self.field_of_client_end, decoder, offset + 76, _depth)?;
            fidl::decode!(
                fidl::encoding::Optional<
                    fidl::encoding::HandleType<
                        fidl::Channel,
                        { fidl::ObjectType::CHANNEL.into_raw() },
                        2147483648,
                    >,
                >,
                &mut self.field_of_nullable_client_end,
                decoder,
                offset + 80,
                _depth
            )?;
            Ok(())
        }
    }
}
