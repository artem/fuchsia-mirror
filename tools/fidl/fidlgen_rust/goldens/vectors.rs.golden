// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = disallow_reserved
// fidl_experiment = output_index_json

#![warn(clippy::all)]
#![allow(unused_parens, unused_mut, unused_imports, nonstandard_style)]

use {
    bitflags::bitflags,
    fidl::{
        client::QueryResponseFut,
        endpoints::{ControlHandle as _, Responder as _},
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

#[cfg(target_os = "fuchsia")]
use fuchsia_zircon as zx;

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct ExampleUseOfVectors {
    pub vector_of_uint8: Vec<u8>,
    pub vector_of_vector_of_bool: Vec<Vec<bool>>,
}

impl fidl::Persistable for ExampleUseOfVectors {}

mod internal {
    use super::*;

    unsafe impl fidl::encoding::TypeMarker for ExampleUseOfVectors {
        type Owned = Self;

        #[inline(always)]
        fn inline_align(_context: fidl::encoding::Context) -> usize {
            8
        }

        #[inline(always)]
        fn inline_size(_context: fidl::encoding::Context) -> usize {
            32
        }
    }
    impl fidl::encoding::ValueTypeMarker for ExampleUseOfVectors {
        type Borrowed<'a> = &'a Self;
        fn borrow<'a>(
            value: &'a <Self as fidl::encoding::TypeMarker>::Owned,
        ) -> Self::Borrowed<'a> {
            value
        }
    }

    unsafe impl fidl::encoding::Encode<ExampleUseOfVectors> for &ExampleUseOfVectors {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<ExampleUseOfVectors>(offset);
            // Delegate to tuple encoding.
            fidl::encoding::Encode::<ExampleUseOfVectors>::encode(
                (
                    <fidl::encoding::UnboundedVector<u8> as fidl::encoding::ValueTypeMarker>::borrow(&self.vector_of_uint8),
                    <fidl::encoding::UnboundedVector<fidl::encoding::UnboundedVector<bool>> as fidl::encoding::ValueTypeMarker>::borrow(&self.vector_of_vector_of_bool),
                ),
                encoder, offset, _depth
            )
        }
    }
    unsafe impl<
            T0: fidl::encoding::Encode<fidl::encoding::UnboundedVector<u8>>,
            T1: fidl::encoding::Encode<
                fidl::encoding::UnboundedVector<fidl::encoding::UnboundedVector<bool>>,
            >,
        > fidl::encoding::Encode<ExampleUseOfVectors> for (T0, T1)
    {
        #[inline]
        unsafe fn encode(
            self,
            encoder: &mut fidl::encoding::Encoder<'_>,
            offset: usize,
            depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            encoder.debug_check_bounds::<ExampleUseOfVectors>(offset);
            // Zero out padding regions. There's no need to apply masks
            // because the unmasked parts will be overwritten by fields.
            // Write the fields.
            self.0.encode(encoder, offset + 0, depth)?;
            self.1.encode(encoder, offset + 16, depth)?;
            Ok(())
        }
    }

    impl fidl::encoding::Decode<Self> for ExampleUseOfVectors {
        #[inline(always)]
        fn new_empty() -> Self {
            Self {
                vector_of_uint8: fidl::new_empty!(fidl::encoding::UnboundedVector<u8>),
                vector_of_vector_of_bool: fidl::new_empty!(
                    fidl::encoding::UnboundedVector<fidl::encoding::UnboundedVector<bool>>
                ),
            }
        }

        #[inline]
        unsafe fn decode(
            &mut self,
            decoder: &mut fidl::encoding::Decoder<'_>,
            offset: usize,
            _depth: fidl::encoding::Depth,
        ) -> fidl::Result<()> {
            decoder.debug_check_bounds::<Self>(offset);
            // Verify that padding bytes are zero.
            fidl::decode!(
                fidl::encoding::UnboundedVector<u8>,
                &mut self.vector_of_uint8,
                decoder,
                offset + 0,
                _depth
            )?;
            fidl::decode!(
                fidl::encoding::UnboundedVector<fidl::encoding::UnboundedVector<bool>>,
                &mut self.vector_of_vector_of_bool,
                decoder,
                offset + 16,
                _depth
            )?;
            Ok(())
        }
    }
}
