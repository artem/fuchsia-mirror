// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.protocollayouts.imported/cpp/natural_ostream.h>
#include <fidl/test.protocollayouts/cpp/natural_types.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <>
struct fidl::ostream::Formatter<::test_protocollayouts::LocalTablePayload> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayouts::LocalTablePayload& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayouts::LocalUnionPayload> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayouts::LocalUnionPayload& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayouts::MainProtocolOneWayAnonRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayouts::MainProtocolOneWayAnonRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayouts::MainProtocolTwoWayAnonRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayAnonRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayouts::MainProtocolTwoWayAnonResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayAnonResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayouts::MainProtocolOnAnonRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayouts::MainProtocolOnAnonRequest& value);
};

namespace test_protocollayouts {

std::ostream& operator<<(std::ostream& os, const ::test_protocollayouts::LocalTablePayload& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayouts::LocalUnionPayload& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayImportWithErrorResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayLocalWithErrorResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayouts::MainProtocolOneWayAnonRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayAnonRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayAnonResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayouts::MainProtocolTwoWayAnonWithErrorResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayouts::MainProtocolOnAnonRequest& value);

}  // namespace test_protocollayouts

#ifdef __Fuchsia__

template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocollayouts::MainProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_protocollayouts::MainProtocol>& value) {
    return os << "ClientEnd<" << "test_protocollayouts::MainProtocol" << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocollayouts::MainProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_protocollayouts::MainProtocol>& value) {
    return os << "ServerEnd<" << "test_protocollayouts::MainProtocol" << ">(" << value.channel().get() << ")";
  }
};
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocollayouts::OpenProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_protocollayouts::OpenProtocol>& value) {
    return os << "ClientEnd<" << "test_protocollayouts::OpenProtocol" << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocollayouts::OpenProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_protocollayouts::OpenProtocol>& value) {
    return os << "ServerEnd<" << "test_protocollayouts::OpenProtocol" << ">(" << value.channel().get() << ")";
  }
};

namespace fidl {

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_protocollayouts::MainProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocollayouts::MainProtocol>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_protocollayouts::MainProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocollayouts::MainProtocol>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_protocollayouts::OpenProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocollayouts::OpenProtocol>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_protocollayouts::OpenProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocollayouts::OpenProtocol>>::Format(os, value);
}
}  // namespace fidl

#endif  // __Fuchsia__

#pragma clang diagnostic pop
