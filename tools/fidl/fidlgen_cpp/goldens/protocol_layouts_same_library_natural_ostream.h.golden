// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.protocollayoutssamelibrary/cpp/natural_types.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::TablePayload> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::TablePayload& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::UnionPayload> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::UnionPayload& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::ComposedProtocolOneWayAnonComposedRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolOneWayAnonComposedRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorResult> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::ComposedProtocolTwoWayNamedComposedWithErrorResult> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolTwoWayNamedComposedWithErrorResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::MainProtocolTwoWayLocalWithErrorResult> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolTwoWayLocalWithErrorResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::MainProtocolOneWayAnonRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolOneWayAnonRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResult> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocollayoutssamelibrary::MainProtocolOnAnonRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolOnAnonRequest& value);
};

namespace test_protocollayoutssamelibrary {

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::TablePayload& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::UnionPayload& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolOneWayAnonComposedRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolTwoWayAnonComposedWithErrorResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolOnAnonComposedRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::ComposedProtocolTwoWayNamedComposedWithErrorResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolTwoWayLocalWithErrorResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolOneWayAnonRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolTwoWayAnonWithErrorResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocollayoutssamelibrary::MainProtocolOnAnonRequest& value);

}  // namespace test_protocollayoutssamelibrary

#ifdef __Fuchsia__

template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocollayoutssamelibrary::ComposedProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_protocollayoutssamelibrary::ComposedProtocol>& value) {
    return os << "ClientEnd<"
              << "test_protocollayoutssamelibrary::ComposedProtocol"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocollayoutssamelibrary::ComposedProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_protocollayoutssamelibrary::ComposedProtocol>& value) {
    return os << "ServerEnd<"
              << "test_protocollayoutssamelibrary::ComposedProtocol"
              << ">(" << value.channel().get() << ")";
  }
};
template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocollayoutssamelibrary::MainProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_protocollayoutssamelibrary::MainProtocol>& value) {
    return os << "ClientEnd<"
              << "test_protocollayoutssamelibrary::MainProtocol"
              << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocollayoutssamelibrary::MainProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_protocollayoutssamelibrary::MainProtocol>& value) {
    return os << "ServerEnd<"
              << "test_protocollayoutssamelibrary::MainProtocol"
              << ">(" << value.channel().get() << ")";
  }
};

namespace fidl {

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_protocollayoutssamelibrary::ComposedProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocollayoutssamelibrary::ComposedProtocol>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_protocollayoutssamelibrary::ComposedProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocollayoutssamelibrary::ComposedProtocol>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_protocollayoutssamelibrary::MainProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocollayoutssamelibrary::MainProtocol>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_protocollayoutssamelibrary::MainProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocollayoutssamelibrary::MainProtocol>>::Format(os, value);
}
}  // namespace fidl

#endif  // __Fuchsia__

#pragma clang diagnostic pop
