// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

#pragma once

#include <fidl/test.protocolpayloads.imported/cpp/natural_ostream.h>
#include <fidl/test.protocolpayloads/cpp/natural_types.h>
#include <lib/fidl/cpp/natural_ostream.h>

#include <iostream>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"

template <>
struct fidl::ostream::Formatter<::test_protocolpayloads::LocalStructPayload> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolpayloads::LocalStructPayload& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocolpayloads::MainProtocolOneWayAnonRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolpayloads::MainProtocolOneWayAnonRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocolpayloads::MainProtocolTwoWayAnonRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayAnonRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocolpayloads::MainProtocolTwoWayAnonResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayAnonResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocolpayloads::MainProtocolOnAnonRequest> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolpayloads::MainProtocolOnAnonRequest& value);
};
template <>
struct fidl::ostream::Formatter<::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult> {
  static std::ostream& Format(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult& value);
};

namespace test_protocolpayloads {

std::ostream& operator<<(std::ostream& os, const ::test_protocolpayloads::LocalStructPayload& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayLocalWithErrorResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocolpayloads::MainProtocolOneWayAnonRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayAnonRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayAnonResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResponse& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayAnonWithErrorResult& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocolpayloads::MainProtocolOnAnonRequest& value);

std::ostream& operator<<(std::ostream& os, const ::test_protocolpayloads::MainProtocolTwoWayImportWithErrorResult& value);

}  // namespace test_protocolpayloads

#ifdef __Fuchsia__

template <>
struct fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocolpayloads::MainProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ClientEnd<::test_protocolpayloads::MainProtocol>& value) {
    return os << "ClientEnd<" << "test_protocolpayloads::MainProtocol" << ">(" << value.channel().get() << ")";
  }
};

template <>
struct fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocolpayloads::MainProtocol>> {
  static std::ostream& Format(std::ostream& os, const ::fidl::ServerEnd<::test_protocolpayloads::MainProtocol>& value) {
    return os << "ServerEnd<" << "test_protocolpayloads::MainProtocol" << ">(" << value.channel().get() << ")";
  }
};

namespace fidl {

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ClientEnd<::test_protocolpayloads::MainProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ClientEnd<::test_protocolpayloads::MainProtocol>>::Format(os, value);
}

inline std::ostream& operator<<(std::ostream& os, const ::fidl::ServerEnd<::test_protocolpayloads::MainProtocol>& value) {
  return fidl::ostream::Formatter<::fidl::ServerEnd<::test_protocolpayloads::MainProtocol>>::Format(os, value);
}
}  // namespace fidl

#endif  // __Fuchsia__

#pragma clang diagnostic pop
