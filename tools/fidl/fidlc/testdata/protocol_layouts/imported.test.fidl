library test.protocollayouts.imported;

type ImportTablePayload = table {
    1: a uint16;
};

type ImportUnionPayload = strict union {
    1: b bool;
};

closed protocol ComposedProtocol {
    strict OneWayAnonComposed(table {
        1: a uint16;
    });
    strict TwoWayAnonComposed(strict union {
        1: b bool;
    }) -> (table {
        1: a uint16;
    });
    strict TwoWayAnonComposedWithError(table {
        1: a uint16;
    }) -> (strict union {
        1: b bool;
    }) error uint32;
    strict -> OnAnonComposed(strict union {
        1: b bool;
    });
    strict -> OnAnonComposedWithError(table {
        1: a uint16;
    }) error uint32;

    strict OneWayNamedComposed(ImportTablePayload);
    strict TwoWayNamedComposed(ImportUnionPayload) -> (ImportTablePayload);
    strict TwoWayNamedComposedWithError(ImportTablePayload) -> (ImportUnionPayload) error uint32;
    strict -> OnNamedComposed(ImportUnionPayload);
    strict -> OnNamedComposedWithError(ImportTablePayload) error uint32;
};

type ImportStructPayload = struct {
    value int32;
};

open protocol ComposedOpenProtocol {
    flexible FlexibleOneWay(struct {
        value int32;
    });
    flexible FlexibleTwoWayNoError(struct {
        value int32;
    }) -> (struct {
        value int32;
    });
    flexible FlexibleTwoWayWithError(struct {
        value int32;
    }) -> (struct {
        value int32;
    }) error int32;
    flexible -> FlexibleEvent(struct {
        value int32;
    });

    strict StrictOneWay(struct {
        value int32;
    });
    strict StrictTwoWayNoError(struct {
        value int32;
    }) -> (struct {
        value int32;
    });
    strict StrictTwoWayWithError(struct {
        value int32;
    }) -> (struct {
        value int32;
    }) error int32;
    strict -> StrictEvent(struct {
        value int32;
    });

    flexible FlexibleOneWayNamedPayload(ImportStructPayload);
};
