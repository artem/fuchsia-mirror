// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = disallow_reserved
// fidl_experiment = output_index_json

package bindingsdenylist

import (
	_bindings "syscall/zx/fidl"
)

const (
	AllBindings uint32 = 0
)

type DenyEachBindingOnlyDenyCppRequest struct {
	_ struct{} `fidl:"s" fidl_size_v2:"1" fidl_alignment_v2:"1"`
	A bool     `fidl_offset_v2:"0"`
}

var _mDenyEachBindingOnlyDenyCppRequest = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenyCppRequest{})

func (msg *DenyEachBindingOnlyDenyCppRequest) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenyCppRequest
}

type DenyEachBindingOnlyDenyDartRequest struct {
	_ struct{} `fidl:"s" fidl_size_v2:"1" fidl_alignment_v2:"1"`
	A bool     `fidl_offset_v2:"0"`
}

var _mDenyEachBindingOnlyDenyDartRequest = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenyDartRequest{})

func (msg *DenyEachBindingOnlyDenyDartRequest) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenyDartRequest
}

type DenyEachBindingOnlyDenyLibfuzzerRequest struct {
	_ struct{} `fidl:"s" fidl_size_v2:"1" fidl_alignment_v2:"1"`
	A bool     `fidl_offset_v2:"0"`
}

var _mDenyEachBindingOnlyDenyLibfuzzerRequest = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenyLibfuzzerRequest{})

func (msg *DenyEachBindingOnlyDenyLibfuzzerRequest) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenyLibfuzzerRequest
}

type DenyEachBindingOnlyDenyRustRequest struct {
	_ struct{} `fidl:"s" fidl_size_v2:"1" fidl_alignment_v2:"1"`
	A bool     `fidl_offset_v2:"0"`
}

var _mDenyEachBindingOnlyDenyRustRequest = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenyRustRequest{})

func (msg *DenyEachBindingOnlyDenyRustRequest) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenyRustRequest
}

type DenyEachBindingOnlyDenySyzkallerRequest struct {
	_ struct{} `fidl:"s" fidl_size_v2:"1" fidl_alignment_v2:"1"`
	A bool     `fidl_offset_v2:"0"`
}

var _mDenyEachBindingOnlyDenySyzkallerRequest = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenySyzkallerRequest{})

func (msg *DenyEachBindingOnlyDenySyzkallerRequest) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenySyzkallerRequest
}

type DenyEachBindingOnlyDenyCppResponse struct {
	_ struct{} `fidl:"s" fidl_size_v2:"4" fidl_alignment_v2:"4"`
	B int32    `fidl_offset_v2:"0"`
}

var _mDenyEachBindingOnlyDenyCppResponse = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenyCppResponse{})

func (msg *DenyEachBindingOnlyDenyCppResponse) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenyCppResponse
}

type DenyEachBindingOnlyDenyDartResponse struct {
	_ struct{} `fidl:"s" fidl_size_v2:"4" fidl_alignment_v2:"4"`
	B int32    `fidl_offset_v2:"0"`
}

var _mDenyEachBindingOnlyDenyDartResponse = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenyDartResponse{})

func (msg *DenyEachBindingOnlyDenyDartResponse) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenyDartResponse
}

type DenyEachBindingOnlyDenyLibfuzzerResponse struct {
	_ struct{} `fidl:"s" fidl_size_v2:"4" fidl_alignment_v2:"4"`
	B int32    `fidl_offset_v2:"0"`
}

var _mDenyEachBindingOnlyDenyLibfuzzerResponse = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenyLibfuzzerResponse{})

func (msg *DenyEachBindingOnlyDenyLibfuzzerResponse) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenyLibfuzzerResponse
}

type DenyEachBindingOnlyDenyRustResponse struct {
	_ struct{} `fidl:"s" fidl_size_v2:"4" fidl_alignment_v2:"4"`
	B int32    `fidl_offset_v2:"0"`
}

var _mDenyEachBindingOnlyDenyRustResponse = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenyRustResponse{})

func (msg *DenyEachBindingOnlyDenyRustResponse) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenyRustResponse
}

type DenyEachBindingOnlyDenySyzkallerResponse struct {
	_ struct{} `fidl:"s" fidl_size_v2:"4" fidl_alignment_v2:"4"`
	B int32    `fidl_offset_v2:"0"`
}

var _mDenyEachBindingOnlyDenySyzkallerResponse = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenySyzkallerResponse{})

func (msg *DenyEachBindingOnlyDenySyzkallerResponse) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenySyzkallerResponse
}

type MemberOnlyAppearsInImportingLibrary struct {
	_ struct{} `fidl:"s" fidl_size_v2:"1" fidl_alignment_v2:"1"`
	A bool     `fidl_offset_v2:"0"`
}

var _mMemberOnlyAppearsInImportingLibrary = _bindings.CreateLazyMarshaler(MemberOnlyAppearsInImportingLibrary{})

func (msg *MemberOnlyAppearsInImportingLibrary) Marshaler() _bindings.Marshaler {
	return _mMemberOnlyAppearsInImportingLibrary
}

type OnlyAppearsInImportingLibrary struct {
	_                                   struct{}                            `fidl:"s" fidl_size_v2:"1" fidl_alignment_v2:"1"`
	MemberOnlyAppearsInImportingLibrary MemberOnlyAppearsInImportingLibrary `fidl_offset_v2:"0"`
}

var _mOnlyAppearsInImportingLibrary = _bindings.CreateLazyMarshaler(OnlyAppearsInImportingLibrary{})

func (msg *OnlyAppearsInImportingLibrary) Marshaler() _bindings.Marshaler {
	return _mOnlyAppearsInImportingLibrary
}

type OnlyGo struct {
	_ struct{} `fidl:"s" fidl_size_v2:"1" fidl_alignment_v2:"1"`
}

var _mOnlyGo = _bindings.CreateLazyMarshaler(OnlyGo{})

func (msg *OnlyGo) Marshaler() _bindings.Marshaler {
	return _mOnlyGo
}

type I_denyEachBindingOnlyDenyCppResultTag uint64

const (
	DenyEachBindingOnlyDenyCppResultResponse = 1 // 0x00000001
	DenyEachBindingOnlyDenyCppResultErr      = 2 // 0x00000002
)

type DenyEachBindingOnlyDenyCppResult struct {
	I_denyEachBindingOnlyDenyCppResultTag `fidl:"x!" fidl_size_v2:"16" fidl_alignment_v2:"8" fidl_resource:"false"`
	Response                              DenyEachBindingOnlyDenyCppResponse `fidl_ordinal:"1"`
	Err                                   uint32                             `fidl_ordinal:"2"`
}

var _mDenyEachBindingOnlyDenyCppResult = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenyCppResult{})

func (msg *DenyEachBindingOnlyDenyCppResult) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenyCppResult
}

func (_m *DenyEachBindingOnlyDenyCppResult) reset() {
	switch _m.I_denyEachBindingOnlyDenyCppResultTag {
	case 1:
		var _zeroed DenyEachBindingOnlyDenyCppResponse
		_m.Response = _zeroed
	case 2:
		var _zeroed uint32
		_m.Err = _zeroed
	}
}

func (_m *DenyEachBindingOnlyDenyCppResult) Which() I_denyEachBindingOnlyDenyCppResultTag {
	return _m.I_denyEachBindingOnlyDenyCppResultTag
}

func (_m *DenyEachBindingOnlyDenyCppResult) Ordinal() uint64 {
	return uint64(_m.I_denyEachBindingOnlyDenyCppResultTag)
}

func (_m *DenyEachBindingOnlyDenyCppResult) SetResponse(response DenyEachBindingOnlyDenyCppResponse) {
	_m.reset()
	_m.I_denyEachBindingOnlyDenyCppResultTag = DenyEachBindingOnlyDenyCppResultResponse
	_m.Response = response
}

func DenyEachBindingOnlyDenyCppResultWithResponse(response DenyEachBindingOnlyDenyCppResponse) DenyEachBindingOnlyDenyCppResult {
	var _u DenyEachBindingOnlyDenyCppResult
	_u.SetResponse(response)
	return _u
}

func (_m *DenyEachBindingOnlyDenyCppResult) SetErr(err uint32) {
	_m.reset()
	_m.I_denyEachBindingOnlyDenyCppResultTag = DenyEachBindingOnlyDenyCppResultErr
	_m.Err = err
}

func DenyEachBindingOnlyDenyCppResultWithErr(err uint32) DenyEachBindingOnlyDenyCppResult {
	var _u DenyEachBindingOnlyDenyCppResult
	_u.SetErr(err)
	return _u
}

type I_denyEachBindingOnlyDenyDartResultTag uint64

const (
	DenyEachBindingOnlyDenyDartResultResponse = 1 // 0x00000001
	DenyEachBindingOnlyDenyDartResultErr      = 2 // 0x00000002
)

type DenyEachBindingOnlyDenyDartResult struct {
	I_denyEachBindingOnlyDenyDartResultTag `fidl:"x!" fidl_size_v2:"16" fidl_alignment_v2:"8" fidl_resource:"false"`
	Response                               DenyEachBindingOnlyDenyDartResponse `fidl_ordinal:"1"`
	Err                                    uint32                              `fidl_ordinal:"2"`
}

var _mDenyEachBindingOnlyDenyDartResult = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenyDartResult{})

func (msg *DenyEachBindingOnlyDenyDartResult) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenyDartResult
}

func (_m *DenyEachBindingOnlyDenyDartResult) reset() {
	switch _m.I_denyEachBindingOnlyDenyDartResultTag {
	case 1:
		var _zeroed DenyEachBindingOnlyDenyDartResponse
		_m.Response = _zeroed
	case 2:
		var _zeroed uint32
		_m.Err = _zeroed
	}
}

func (_m *DenyEachBindingOnlyDenyDartResult) Which() I_denyEachBindingOnlyDenyDartResultTag {
	return _m.I_denyEachBindingOnlyDenyDartResultTag
}

func (_m *DenyEachBindingOnlyDenyDartResult) Ordinal() uint64 {
	return uint64(_m.I_denyEachBindingOnlyDenyDartResultTag)
}

func (_m *DenyEachBindingOnlyDenyDartResult) SetResponse(response DenyEachBindingOnlyDenyDartResponse) {
	_m.reset()
	_m.I_denyEachBindingOnlyDenyDartResultTag = DenyEachBindingOnlyDenyDartResultResponse
	_m.Response = response
}

func DenyEachBindingOnlyDenyDartResultWithResponse(response DenyEachBindingOnlyDenyDartResponse) DenyEachBindingOnlyDenyDartResult {
	var _u DenyEachBindingOnlyDenyDartResult
	_u.SetResponse(response)
	return _u
}

func (_m *DenyEachBindingOnlyDenyDartResult) SetErr(err uint32) {
	_m.reset()
	_m.I_denyEachBindingOnlyDenyDartResultTag = DenyEachBindingOnlyDenyDartResultErr
	_m.Err = err
}

func DenyEachBindingOnlyDenyDartResultWithErr(err uint32) DenyEachBindingOnlyDenyDartResult {
	var _u DenyEachBindingOnlyDenyDartResult
	_u.SetErr(err)
	return _u
}

type I_denyEachBindingOnlyDenyLibfuzzerResultTag uint64

const (
	DenyEachBindingOnlyDenyLibfuzzerResultResponse = 1 // 0x00000001
	DenyEachBindingOnlyDenyLibfuzzerResultErr      = 2 // 0x00000002
)

type DenyEachBindingOnlyDenyLibfuzzerResult struct {
	I_denyEachBindingOnlyDenyLibfuzzerResultTag `fidl:"x!" fidl_size_v2:"16" fidl_alignment_v2:"8" fidl_resource:"false"`
	Response                                    DenyEachBindingOnlyDenyLibfuzzerResponse `fidl_ordinal:"1"`
	Err                                         uint32                                   `fidl_ordinal:"2"`
}

var _mDenyEachBindingOnlyDenyLibfuzzerResult = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenyLibfuzzerResult{})

func (msg *DenyEachBindingOnlyDenyLibfuzzerResult) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenyLibfuzzerResult
}

func (_m *DenyEachBindingOnlyDenyLibfuzzerResult) reset() {
	switch _m.I_denyEachBindingOnlyDenyLibfuzzerResultTag {
	case 1:
		var _zeroed DenyEachBindingOnlyDenyLibfuzzerResponse
		_m.Response = _zeroed
	case 2:
		var _zeroed uint32
		_m.Err = _zeroed
	}
}

func (_m *DenyEachBindingOnlyDenyLibfuzzerResult) Which() I_denyEachBindingOnlyDenyLibfuzzerResultTag {
	return _m.I_denyEachBindingOnlyDenyLibfuzzerResultTag
}

func (_m *DenyEachBindingOnlyDenyLibfuzzerResult) Ordinal() uint64 {
	return uint64(_m.I_denyEachBindingOnlyDenyLibfuzzerResultTag)
}

func (_m *DenyEachBindingOnlyDenyLibfuzzerResult) SetResponse(response DenyEachBindingOnlyDenyLibfuzzerResponse) {
	_m.reset()
	_m.I_denyEachBindingOnlyDenyLibfuzzerResultTag = DenyEachBindingOnlyDenyLibfuzzerResultResponse
	_m.Response = response
}

func DenyEachBindingOnlyDenyLibfuzzerResultWithResponse(response DenyEachBindingOnlyDenyLibfuzzerResponse) DenyEachBindingOnlyDenyLibfuzzerResult {
	var _u DenyEachBindingOnlyDenyLibfuzzerResult
	_u.SetResponse(response)
	return _u
}

func (_m *DenyEachBindingOnlyDenyLibfuzzerResult) SetErr(err uint32) {
	_m.reset()
	_m.I_denyEachBindingOnlyDenyLibfuzzerResultTag = DenyEachBindingOnlyDenyLibfuzzerResultErr
	_m.Err = err
}

func DenyEachBindingOnlyDenyLibfuzzerResultWithErr(err uint32) DenyEachBindingOnlyDenyLibfuzzerResult {
	var _u DenyEachBindingOnlyDenyLibfuzzerResult
	_u.SetErr(err)
	return _u
}

type I_denyEachBindingOnlyDenyRustResultTag uint64

const (
	DenyEachBindingOnlyDenyRustResultResponse = 1 // 0x00000001
	DenyEachBindingOnlyDenyRustResultErr      = 2 // 0x00000002
)

type DenyEachBindingOnlyDenyRustResult struct {
	I_denyEachBindingOnlyDenyRustResultTag `fidl:"x!" fidl_size_v2:"16" fidl_alignment_v2:"8" fidl_resource:"false"`
	Response                               DenyEachBindingOnlyDenyRustResponse `fidl_ordinal:"1"`
	Err                                    uint32                              `fidl_ordinal:"2"`
}

var _mDenyEachBindingOnlyDenyRustResult = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenyRustResult{})

func (msg *DenyEachBindingOnlyDenyRustResult) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenyRustResult
}

func (_m *DenyEachBindingOnlyDenyRustResult) reset() {
	switch _m.I_denyEachBindingOnlyDenyRustResultTag {
	case 1:
		var _zeroed DenyEachBindingOnlyDenyRustResponse
		_m.Response = _zeroed
	case 2:
		var _zeroed uint32
		_m.Err = _zeroed
	}
}

func (_m *DenyEachBindingOnlyDenyRustResult) Which() I_denyEachBindingOnlyDenyRustResultTag {
	return _m.I_denyEachBindingOnlyDenyRustResultTag
}

func (_m *DenyEachBindingOnlyDenyRustResult) Ordinal() uint64 {
	return uint64(_m.I_denyEachBindingOnlyDenyRustResultTag)
}

func (_m *DenyEachBindingOnlyDenyRustResult) SetResponse(response DenyEachBindingOnlyDenyRustResponse) {
	_m.reset()
	_m.I_denyEachBindingOnlyDenyRustResultTag = DenyEachBindingOnlyDenyRustResultResponse
	_m.Response = response
}

func DenyEachBindingOnlyDenyRustResultWithResponse(response DenyEachBindingOnlyDenyRustResponse) DenyEachBindingOnlyDenyRustResult {
	var _u DenyEachBindingOnlyDenyRustResult
	_u.SetResponse(response)
	return _u
}

func (_m *DenyEachBindingOnlyDenyRustResult) SetErr(err uint32) {
	_m.reset()
	_m.I_denyEachBindingOnlyDenyRustResultTag = DenyEachBindingOnlyDenyRustResultErr
	_m.Err = err
}

func DenyEachBindingOnlyDenyRustResultWithErr(err uint32) DenyEachBindingOnlyDenyRustResult {
	var _u DenyEachBindingOnlyDenyRustResult
	_u.SetErr(err)
	return _u
}

type I_denyEachBindingOnlyDenySyzkallerResultTag uint64

const (
	DenyEachBindingOnlyDenySyzkallerResultResponse = 1 // 0x00000001
	DenyEachBindingOnlyDenySyzkallerResultErr      = 2 // 0x00000002
)

type DenyEachBindingOnlyDenySyzkallerResult struct {
	I_denyEachBindingOnlyDenySyzkallerResultTag `fidl:"x!" fidl_size_v2:"16" fidl_alignment_v2:"8" fidl_resource:"false"`
	Response                                    DenyEachBindingOnlyDenySyzkallerResponse `fidl_ordinal:"1"`
	Err                                         uint32                                   `fidl_ordinal:"2"`
}

var _mDenyEachBindingOnlyDenySyzkallerResult = _bindings.CreateLazyMarshaler(DenyEachBindingOnlyDenySyzkallerResult{})

func (msg *DenyEachBindingOnlyDenySyzkallerResult) Marshaler() _bindings.Marshaler {
	return _mDenyEachBindingOnlyDenySyzkallerResult
}

func (_m *DenyEachBindingOnlyDenySyzkallerResult) reset() {
	switch _m.I_denyEachBindingOnlyDenySyzkallerResultTag {
	case 1:
		var _zeroed DenyEachBindingOnlyDenySyzkallerResponse
		_m.Response = _zeroed
	case 2:
		var _zeroed uint32
		_m.Err = _zeroed
	}
}

func (_m *DenyEachBindingOnlyDenySyzkallerResult) Which() I_denyEachBindingOnlyDenySyzkallerResultTag {
	return _m.I_denyEachBindingOnlyDenySyzkallerResultTag
}

func (_m *DenyEachBindingOnlyDenySyzkallerResult) Ordinal() uint64 {
	return uint64(_m.I_denyEachBindingOnlyDenySyzkallerResultTag)
}

func (_m *DenyEachBindingOnlyDenySyzkallerResult) SetResponse(response DenyEachBindingOnlyDenySyzkallerResponse) {
	_m.reset()
	_m.I_denyEachBindingOnlyDenySyzkallerResultTag = DenyEachBindingOnlyDenySyzkallerResultResponse
	_m.Response = response
}

func DenyEachBindingOnlyDenySyzkallerResultWithResponse(response DenyEachBindingOnlyDenySyzkallerResponse) DenyEachBindingOnlyDenySyzkallerResult {
	var _u DenyEachBindingOnlyDenySyzkallerResult
	_u.SetResponse(response)
	return _u
}

func (_m *DenyEachBindingOnlyDenySyzkallerResult) SetErr(err uint32) {
	_m.reset()
	_m.I_denyEachBindingOnlyDenySyzkallerResultTag = DenyEachBindingOnlyDenySyzkallerResultErr
	_m.Err = err
}

func DenyEachBindingOnlyDenySyzkallerResultWithErr(err uint32) DenyEachBindingOnlyDenySyzkallerResult {
	var _u DenyEachBindingOnlyDenySyzkallerResult
	_u.SetErr(err)
	return _u
}

const ()

type AllowedWithCtxInterface _bindings.ChannelProxy

type AllowedWithCtx interface {
}
type AllowedWithCtxInterfaceRequest _bindings.InterfaceRequest

func NewAllowedWithCtxInterfaceRequest() (AllowedWithCtxInterfaceRequest, *AllowedWithCtxInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return AllowedWithCtxInterfaceRequest(req), (*AllowedWithCtxInterface)(cli), err
}

type AllowedWithCtxStub struct {
	Impl AllowedWithCtx
}

func (s_ *AllowedWithCtxStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	switch args_.Ordinal {
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

type AllowedEventProxy _bindings.ChannelProxy

const (
	DenyEachBindingOnlyDenyCppOrdinal       uint64 = 0x290bad96051b1b92
	DenyEachBindingOnlyDenyDartOrdinal      uint64 = 0x75384066a26d87d7
	DenyEachBindingOnlyDenyLibfuzzerOrdinal uint64 = 0x1e4f89c329617b1e
	DenyEachBindingOnlyDenyRustOrdinal      uint64 = 0x339f67244edd5cb6
	DenyEachBindingOnlyDenySyzkallerOrdinal uint64 = 0x202ee614a749e98a
)

type DenyEachBindingWithCtxInterface _bindings.ChannelProxy

func (p *DenyEachBindingWithCtxInterface) OnlyDenyCpp(ctx_ _bindings.Context, a bool) (DenyEachBindingOnlyDenyCppResult, error) {
	req_ := &DenyEachBindingOnlyDenyCppRequest{A: a}
	resp_ := &DenyEachBindingOnlyDenyCppResult{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(DenyEachBindingOnlyDenyCppOrdinal, req_, resp_)
	return (*resp_), err_
}

func (p *DenyEachBindingWithCtxInterface) OnlyDenyDart(ctx_ _bindings.Context, a bool) (DenyEachBindingOnlyDenyDartResult, error) {
	req_ := &DenyEachBindingOnlyDenyDartRequest{A: a}
	resp_ := &DenyEachBindingOnlyDenyDartResult{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(DenyEachBindingOnlyDenyDartOrdinal, req_, resp_)
	return (*resp_), err_
}

func (p *DenyEachBindingWithCtxInterface) OnlyDenyLibfuzzer(ctx_ _bindings.Context, a bool) (DenyEachBindingOnlyDenyLibfuzzerResult, error) {
	req_ := &DenyEachBindingOnlyDenyLibfuzzerRequest{A: a}
	resp_ := &DenyEachBindingOnlyDenyLibfuzzerResult{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(DenyEachBindingOnlyDenyLibfuzzerOrdinal, req_, resp_)
	return (*resp_), err_
}

func (p *DenyEachBindingWithCtxInterface) OnlyDenyRust(ctx_ _bindings.Context, a bool) (DenyEachBindingOnlyDenyRustResult, error) {
	req_ := &DenyEachBindingOnlyDenyRustRequest{A: a}
	resp_ := &DenyEachBindingOnlyDenyRustResult{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(DenyEachBindingOnlyDenyRustOrdinal, req_, resp_)
	return (*resp_), err_
}

func (p *DenyEachBindingWithCtxInterface) OnlyDenySyzkaller(ctx_ _bindings.Context, a bool) (DenyEachBindingOnlyDenySyzkallerResult, error) {
	req_ := &DenyEachBindingOnlyDenySyzkallerRequest{A: a}
	resp_ := &DenyEachBindingOnlyDenySyzkallerResult{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(DenyEachBindingOnlyDenySyzkallerOrdinal, req_, resp_)
	return (*resp_), err_
}

type DenyEachBindingWithCtx interface {
	OnlyDenyCpp(ctx_ _bindings.Context, a bool) (DenyEachBindingOnlyDenyCppResult, error)
	OnlyDenyDart(ctx_ _bindings.Context, a bool) (DenyEachBindingOnlyDenyDartResult, error)
	OnlyDenyLibfuzzer(ctx_ _bindings.Context, a bool) (DenyEachBindingOnlyDenyLibfuzzerResult, error)
	OnlyDenyRust(ctx_ _bindings.Context, a bool) (DenyEachBindingOnlyDenyRustResult, error)
	OnlyDenySyzkaller(ctx_ _bindings.Context, a bool) (DenyEachBindingOnlyDenySyzkallerResult, error)
}
type DenyEachBindingWithCtxInterfaceRequest _bindings.InterfaceRequest

func NewDenyEachBindingWithCtxInterfaceRequest() (DenyEachBindingWithCtxInterfaceRequest, *DenyEachBindingWithCtxInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return DenyEachBindingWithCtxInterfaceRequest(req), (*DenyEachBindingWithCtxInterface)(cli), err
}

type DenyEachBindingWithCtxStub struct {
	Impl DenyEachBindingWithCtx
}

func (s_ *DenyEachBindingWithCtxStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	switch args_.Ordinal {
	case DenyEachBindingOnlyDenyCppOrdinal:
		in_ := &DenyEachBindingOnlyDenyCppRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if err_ := _bindings.Unmarshal(marshalerCtx, args_.Bytes, args_.HandleInfos, in_); err_ != nil {
			return nil, false, err_
		}
		payload, err_ := s_.Impl.OnlyDenyCpp(args_.Ctx, (*in_).A)
		out_ := &payload
		return out_, true, err_
	case DenyEachBindingOnlyDenyDartOrdinal:
		in_ := &DenyEachBindingOnlyDenyDartRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if err_ := _bindings.Unmarshal(marshalerCtx, args_.Bytes, args_.HandleInfos, in_); err_ != nil {
			return nil, false, err_
		}
		payload, err_ := s_.Impl.OnlyDenyDart(args_.Ctx, (*in_).A)
		out_ := &payload
		return out_, true, err_
	case DenyEachBindingOnlyDenyLibfuzzerOrdinal:
		in_ := &DenyEachBindingOnlyDenyLibfuzzerRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if err_ := _bindings.Unmarshal(marshalerCtx, args_.Bytes, args_.HandleInfos, in_); err_ != nil {
			return nil, false, err_
		}
		payload, err_ := s_.Impl.OnlyDenyLibfuzzer(args_.Ctx, (*in_).A)
		out_ := &payload
		return out_, true, err_
	case DenyEachBindingOnlyDenyRustOrdinal:
		in_ := &DenyEachBindingOnlyDenyRustRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if err_ := _bindings.Unmarshal(marshalerCtx, args_.Bytes, args_.HandleInfos, in_); err_ != nil {
			return nil, false, err_
		}
		payload, err_ := s_.Impl.OnlyDenyRust(args_.Ctx, (*in_).A)
		out_ := &payload
		return out_, true, err_
	case DenyEachBindingOnlyDenySyzkallerOrdinal:
		in_ := &DenyEachBindingOnlyDenySyzkallerRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if err_ := _bindings.Unmarshal(marshalerCtx, args_.Bytes, args_.HandleInfos, in_); err_ != nil {
			return nil, false, err_
		}
		payload, err_ := s_.Impl.OnlyDenySyzkaller(args_.Ctx, (*in_).A)
		out_ := &payload
		return out_, true, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

type DenyEachBindingEventProxy _bindings.ChannelProxy

const (
	ImportsSameNameContextUnattributedOrdinal                    uint64 = 0x698380acfd29e8f
	ImportsSameNameContextAlwaysAppearsInImportingLibraryOrdinal uint64 = 0x2874096c521236f8
)

type ImportsSameNameContextWithCtxInterface _bindings.ChannelProxy

func (p *ImportsSameNameContextWithCtxInterface) Unattributed(ctx_ _bindings.Context) error {
	var req_ _bindings.Message
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ImportsSameNameContextUnattributedOrdinal, req_)
	return err_
}

func (p *ImportsSameNameContextWithCtxInterface) AlwaysAppearsInImportingLibrary(ctx_ _bindings.Context) error {
	var req_ _bindings.Message
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ImportsSameNameContextAlwaysAppearsInImportingLibraryOrdinal, req_)
	return err_
}

type ImportsSameNameContextWithCtx interface {
	Unattributed(ctx_ _bindings.Context) error
	AlwaysAppearsInImportingLibrary(ctx_ _bindings.Context) error
}
type ImportsSameNameContextWithCtxInterfaceRequest _bindings.InterfaceRequest

func NewImportsSameNameContextWithCtxInterfaceRequest() (ImportsSameNameContextWithCtxInterfaceRequest, *ImportsSameNameContextWithCtxInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ImportsSameNameContextWithCtxInterfaceRequest(req), (*ImportsSameNameContextWithCtxInterface)(cli), err
}

type ImportsSameNameContextWithCtxStub struct {
	Impl ImportsSameNameContextWithCtx
}

func (s_ *ImportsSameNameContextWithCtxStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	switch args_.Ordinal {
	case ImportsSameNameContextUnattributedOrdinal:
		err_ := s_.Impl.Unattributed(args_.Ctx)
		return nil, false, err_
	case ImportsSameNameContextAlwaysAppearsInImportingLibraryOrdinal:
		err_ := s_.Impl.AlwaysAppearsInImportingLibrary(args_.Ctx)
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

type ImportsSameNameContextEventProxy _bindings.ChannelProxy
