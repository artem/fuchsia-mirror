// WARNING: This file is machine generated by fidlgen.

// fidl_experiment = output_index_json

package inheritancewithrecursivedecl

import (
	_bindings "syscall/zx/fidl"
)

type ChildSecondRequest struct {
	_       struct{}                      `fidl:"s" fidl_size_v2:"4" fidl_alignment_v2:"4"`
	Request ParentWithCtxInterfaceRequest `fidl_offset_v2:"0" fidl_handle_subtype:"4" fidl_bounds:"0"`
}

var _mChildSecondRequest = _bindings.CreateLazyMarshaler(ChildSecondRequest{})

func (msg *ChildSecondRequest) Marshaler() _bindings.Marshaler {
	return _mChildSecondRequest
}

type ParentFirstRequest struct {
	_       struct{}                      `fidl:"s" fidl_size_v2:"4" fidl_alignment_v2:"4"`
	Request ParentWithCtxInterfaceRequest `fidl_offset_v2:"0" fidl_handle_subtype:"4" fidl_bounds:"0"`
}

var _mParentFirstRequest = _bindings.CreateLazyMarshaler(ParentFirstRequest{})

func (msg *ParentFirstRequest) Marshaler() _bindings.Marshaler {
	return _mParentFirstRequest
}

const (
	ChildFirstOrdinal  uint64 = 0x3723835775b3455b
	ChildSecondOrdinal uint64 = 0x23521821ca109865
)

type ChildWithCtxInterface _bindings.ChannelProxy

func (p *ChildWithCtxInterface) First(ctx_ _bindings.Context, request ParentWithCtxInterfaceRequest) error {
	req_ := &ParentFirstRequest{Request: request}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ChildFirstOrdinal, req_)
	return err_
}

func (p *ChildWithCtxInterface) Second(ctx_ _bindings.Context, request ParentWithCtxInterfaceRequest) error {
	req_ := &ChildSecondRequest{Request: request}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ChildSecondOrdinal, req_)
	return err_
}

type ChildWithCtx interface {
	First(ctx_ _bindings.Context, request ParentWithCtxInterfaceRequest) error
	Second(ctx_ _bindings.Context, request ParentWithCtxInterfaceRequest) error
}
type ChildWithCtxInterfaceRequest _bindings.InterfaceRequest

func NewChildWithCtxInterfaceRequest() (ChildWithCtxInterfaceRequest, *ChildWithCtxInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ChildWithCtxInterfaceRequest(req), (*ChildWithCtxInterface)(cli), err
}

type ChildWithCtxStub struct {
	Impl ChildWithCtx
}

func (s_ *ChildWithCtxStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	switch args_.Ordinal {
	case ChildFirstOrdinal:
		in_ := &ParentFirstRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if err_ := _bindings.Unmarshal(marshalerCtx, args_.Bytes, args_.HandleInfos, in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.First(args_.Ctx, (*in_).Request)
		return nil, false, err_
	case ChildSecondOrdinal:
		in_ := &ChildSecondRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if err_ := _bindings.Unmarshal(marshalerCtx, args_.Bytes, args_.HandleInfos, in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.Second(args_.Ctx, (*in_).Request)
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

type ChildEventProxy _bindings.ChannelProxy

const (
	ParentFirstOrdinal uint64 = 0x3723835775b3455b
)

type ParentWithCtxInterface _bindings.ChannelProxy

func (p *ParentWithCtxInterface) First(ctx_ _bindings.Context, request ParentWithCtxInterfaceRequest) error {
	req_ := &ParentFirstRequest{Request: request}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ParentFirstOrdinal, req_)
	return err_
}

type ParentWithCtx interface {
	First(ctx_ _bindings.Context, request ParentWithCtxInterfaceRequest) error
}
type ParentWithCtxInterfaceRequest _bindings.InterfaceRequest

func NewParentWithCtxInterfaceRequest() (ParentWithCtxInterfaceRequest, *ParentWithCtxInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ParentWithCtxInterfaceRequest(req), (*ParentWithCtxInterface)(cli), err
}

type ParentWithCtxStub struct {
	Impl ParentWithCtx
}

func (s_ *ParentWithCtxStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	switch args_.Ordinal {
	case ParentFirstOrdinal:
		in_ := &ParentFirstRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if err_ := _bindings.Unmarshal(marshalerCtx, args_.Bytes, args_.HandleInfos, in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.First(args_.Ctx, (*in_).Request)
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

type ParentEventProxy _bindings.ChannelProxy
