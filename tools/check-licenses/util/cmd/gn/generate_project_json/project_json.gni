# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")
import("//build/info/info.gni")

# Invokes the check-licenses tool.
#
# Parameters
#
#   fuchsia_dir (optional)
#     [string] Path to the fuchsia root directory. Defaults to "//".
#
#   out_dir (optional)
#     [string] Directory where generated NOTICE files will be placed. Defaults
#     to target_out_dir.
#
#   target (optional)
#     [string] Target to analyze. Defaults to "//:default".
#
#   prune_targets (optional)
#     [string list] Targets to explicitly filter out of the build graph. Defaults to empty list.
#
#   run_analysis (optional)
#     [bool] Whether to analyze license texts and run tests. Default == true.
#
#   always_run_gn_desc (optional)
#     [bool] Whether to (re)generate build graph using 'fx gn desc'. Default == true.
#
#   produce_spdx (optional)
#     [bool] Whether to also produce an SPDX output. Default == false.
#
#   emit_metadata (optional)
#     [bool] Whether to emit metadata for uploading artifacts to GCS. Default == true.
#
#   testonly, visibility
template("project_json") {
  assert(defined(invoker.gen_output), "gen_output must be defined")

  compiled_action("$target_name") {
    tool = "//tools/check-licenses/util/cmd/gn/generate_project_json:check-licenses-gen-project-json"

    # This command runs "fx gn gen", which potentially touches thousands of files
    # across the repo. It cannot be hermetic.
    # TODO(https://fxbug.dev/84924): Improve the way notice files are generated.
    hermetic_deps = false

    outputs = [
      "$root_build_dir/" + invoker.gen_output,
      "$root_build_dir/" + invoker.gen_output + ".stamp",
    ]
    args = [
      "--gn_path",
      rebase_path("//prebuilt/third_party/gn/${host_os}-${host_cpu}/gn",
                  root_build_dir),
      "--build_dir",
      rebase_path(root_out_dir, root_build_dir),
      "--gen_output",
      invoker.gen_output,
      "--stamp_output",
      invoker.gen_output + ".stamp",
    ]

    if (defined(invoker.always_run_gn_desc)) {
      args += [
        "--always_run_gn_desc",
        invoker.always_run_gn_desc,
      ]
    }

    # "project.json" names the output dir
    no_output_dir_leaks = false
  }
}
