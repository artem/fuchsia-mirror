// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// NOTE: The doc comments on `IntetgrationTestCmd` and its fields appear as the helptext of
// `fx testgen`. Please run that command to make sure the output looks correct before
// submitting changes.

use crate::{common::*, flags};

use {
    anyhow::{bail, Error},
    argh::FromArgs,
    std::path::PathBuf,
    tracing::info,
};

/// Generates an integration test for a Fuchsia component.
#[derive(FromArgs, PartialEq, Debug)]
#[argh(subcommand, name = "integration_test")]
pub(crate) struct IntegrationTestCmd {
    /// the absolute the path to the component-under-test's manifest.
    #[argh(option, short = 'm')]
    pub component_manifest: PathBuf,
    /// the root directory where code will be generated. This directory must not exist.
    #[argh(option, short = 'o')]
    pub test_root: PathBuf,
}
/// Generates an integration test for a Fuchsia component.
///
/// Code is generated by copying the template files in templates/integration_test.
/// Each template uses the [handlebars](https://docs.rs/handlebars/latest/handlebars/) syntax.
///
/// The full set of variables available to each template are derived from the user's input
/// and are as follows:
///
///   component_name
///       The name of the component, derived from the name of the input component manifest.
///       Example: /path/to/my-component.cml -> my-component
///
///   test_binary_name
///       The name of the generated test binary.
///
///   test_package_name
///       The name of the generated test Fuchsia package.
///       Example GN usage: `fuchsia_test_package("{{ test_package_name }}")`
///
///   fidl_rust_crate_name
///       The name of the Rust crate containing the test's generated RealmFactory FIDL bindings.
///       This is primarily useful for importing generated Rust fidl bindings in test code.
///       Example Rust usage: `use {{ fidl_rust_crate_name }} as ftest`
///
///   fidl_library_name
///       The name of the RealmFactory fidl library. This is primarily useful for defining and importing
///       the FIDL library in .fidl files.
///       Example FIDL usage: `library {{ fidl_library_name }};`
///
///   realm_factory_binary_name
///       The name of the generated test realm factory binary name.
///
impl IntegrationTestCmd {
    // TODO(127973): Add back support for C++
    pub async fn run(&self, _: &flags::Flags) -> Result<(), Error> {
        let test_root = self.test_root.clone();
        if test_root.exists() {
            bail!("{} already exists. Please choose a directory location that does not already exist.", test_root.display());
        }
        let component_manifest = self.component_manifest.clone();
        if !component_manifest.exists() {
            bail!("{} does not exist.", self.component_manifest.display());
        }
        if !component_manifest.extension().is_some_and(|x| x == "cml") {
            bail!("component manifest must be a .cml file");
        }
        info!("Generating an integration test at {}", test_root.display());

        // Initialize template variables and source code.
        let component_name = path_file_stem(&self.component_manifest);

        // rustfmt mangles this. long lines are easier to read.
        #[rustfmt::skip]
        let gen = CodeGenerator::new()
            .with_template_var("component_name", component_name.clone())
            .with_template_var("test_binary_name", var_test_binary_name(&component_name))
            .with_template_var("test_package_name", var_test_package_name(&component_name))
            .with_template_var("realm_factory_binary_name", var_realm_factory_binary_name(&component_name))
            .with_template_var("fidl_rust_crate_name", var_fidl_rust_crate_name(&component_name))
            .with_template_var("fidl_library_name", var_fidl_library_name(&component_name))
            .with_template(hbrs_template_file!("integration_test", "tests/BUILD.gn"))
            .with_template(hbrs_template_file!("integration_test", "tests/meta/test-root.cml"))
            .with_template(hbrs_template_file!("integration_test", "tests/meta/test-suite.cml"))
            .with_template(hbrs_template_file!("integration_test", "tests/src/main.rs"))
            .with_template(hbrs_template_file!("integration_test", "testing/fidl/BUILD.gn"))
            .with_template(hbrs_template_file!("integration_test", "testing/fidl/realm_factory.test.fidl"))
            .with_template(hbrs_template_file!("integration_test", "testing/realm-factory/BUILD.gn"))
            .with_template(hbrs_template_file!("integration_test", "testing/realm-factory/meta/default.cml"))
            .with_template(hbrs_template_file!("integration_test", "testing/realm-factory/src/main.rs"))
            .with_template(hbrs_template_file!("integration_test", "testing/realm-factory/src/realm_factory.rs"));
        gen.generate(test_root)
    }
}
