// Copyright 2019 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Vendored from src/main/java/com/google/devtools/build/skydoc/rendering/proto/stardoc_output.proto
// in the Bazel source tree at commit bf5504a8c8f2d5e91acb18db864b2dae0d90ca7f
//
// Protos for Stardoc data.
//
// Stardoc collects information about Starlark functions, providers, and rules.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: stardoc_output.proto

package stardoc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Representation of a Starlark rule attribute type. These generally
// have a one-to-one correspondence with functions defined at
// https://bazel.build/rules/lib/attr.
type AttributeType int32

const (
	AttributeType_UNKNOWN AttributeType = 0
	// A special case of STRING; all rules have exactly one implicit
	// attribute "name" of type NAME.
	AttributeType_NAME              AttributeType = 1
	AttributeType_INT               AttributeType = 2
	AttributeType_LABEL             AttributeType = 3
	AttributeType_STRING            AttributeType = 4
	AttributeType_STRING_LIST       AttributeType = 5
	AttributeType_INT_LIST          AttributeType = 6
	AttributeType_LABEL_LIST        AttributeType = 7
	AttributeType_BOOLEAN           AttributeType = 8
	AttributeType_LABEL_STRING_DICT AttributeType = 9
	AttributeType_STRING_DICT       AttributeType = 10
	AttributeType_STRING_LIST_DICT  AttributeType = 11
	AttributeType_OUTPUT            AttributeType = 12
	AttributeType_OUTPUT_LIST       AttributeType = 13
)

// Enum value maps for AttributeType.
var (
	AttributeType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "NAME",
		2:  "INT",
		3:  "LABEL",
		4:  "STRING",
		5:  "STRING_LIST",
		6:  "INT_LIST",
		7:  "LABEL_LIST",
		8:  "BOOLEAN",
		9:  "LABEL_STRING_DICT",
		10: "STRING_DICT",
		11: "STRING_LIST_DICT",
		12: "OUTPUT",
		13: "OUTPUT_LIST",
	}
	AttributeType_value = map[string]int32{
		"UNKNOWN":           0,
		"NAME":              1,
		"INT":               2,
		"LABEL":             3,
		"STRING":            4,
		"STRING_LIST":       5,
		"INT_LIST":          6,
		"LABEL_LIST":        7,
		"BOOLEAN":           8,
		"LABEL_STRING_DICT": 9,
		"STRING_DICT":       10,
		"STRING_LIST_DICT":  11,
		"OUTPUT":            12,
		"OUTPUT_LIST":       13,
	}
)

func (x AttributeType) Enum() *AttributeType {
	p := new(AttributeType)
	*p = x
	return p
}

func (x AttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_stardoc_output_proto_enumTypes[0].Descriptor()
}

func (AttributeType) Type() protoreflect.EnumType {
	return &file_stardoc_output_proto_enumTypes[0]
}

func (x AttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeType.Descriptor instead.
func (AttributeType) EnumDescriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{0}
}

// The root output proto of Stardoc. An invocation of Stardoc on a single file
// will output exactly one instance of this proto, representing all
// documentation for the input Starlark file.
type ModuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleInfo     []*RuleInfo             `protobuf:"bytes,1,rep,name=rule_info,json=ruleInfo,proto3" json:"rule_info,omitempty"`
	ProviderInfo []*ProviderInfo         `protobuf:"bytes,2,rep,name=provider_info,json=providerInfo,proto3" json:"provider_info,omitempty"`
	FuncInfo     []*StarlarkFunctionInfo `protobuf:"bytes,3,rep,name=func_info,json=funcInfo,proto3" json:"func_info,omitempty"`
	AspectInfo   []*AspectInfo           `protobuf:"bytes,4,rep,name=aspect_info,json=aspectInfo,proto3" json:"aspect_info,omitempty"`
	// The docstring present at the top of the input Starlark file.
	ModuleDocstring string `protobuf:"bytes,5,opt,name=module_docstring,json=moduleDocstring,proto3" json:"module_docstring,omitempty"`
	// The display form of the label of the module file (as seen from the
	// starlark_doc_extract or Stardoc target's repo). Unset when there is no
	// module file (e.g. when the module is a REPL, or in Bazel's internal tests).
	File                string                 `protobuf:"bytes,6,opt,name=file,proto3" json:"file,omitempty"`
	ModuleExtensionInfo []*ModuleExtensionInfo `protobuf:"bytes,7,rep,name=module_extension_info,json=moduleExtensionInfo,proto3" json:"module_extension_info,omitempty"`
	RepositoryRuleInfo  []*RepositoryRuleInfo  `protobuf:"bytes,8,rep,name=repository_rule_info,json=repositoryRuleInfo,proto3" json:"repository_rule_info,omitempty"`
}

func (x *ModuleInfo) Reset() {
	*x = ModuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleInfo) ProtoMessage() {}

func (x *ModuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleInfo.ProtoReflect.Descriptor instead.
func (*ModuleInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{0}
}

func (x *ModuleInfo) GetRuleInfo() []*RuleInfo {
	if x != nil {
		return x.RuleInfo
	}
	return nil
}

func (x *ModuleInfo) GetProviderInfo() []*ProviderInfo {
	if x != nil {
		return x.ProviderInfo
	}
	return nil
}

func (x *ModuleInfo) GetFuncInfo() []*StarlarkFunctionInfo {
	if x != nil {
		return x.FuncInfo
	}
	return nil
}

func (x *ModuleInfo) GetAspectInfo() []*AspectInfo {
	if x != nil {
		return x.AspectInfo
	}
	return nil
}

func (x *ModuleInfo) GetModuleDocstring() string {
	if x != nil {
		return x.ModuleDocstring
	}
	return ""
}

func (x *ModuleInfo) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ModuleInfo) GetModuleExtensionInfo() []*ModuleExtensionInfo {
	if x != nil {
		return x.ModuleExtensionInfo
	}
	return nil
}

func (x *ModuleInfo) GetRepositoryRuleInfo() []*RepositoryRuleInfo {
	if x != nil {
		return x.RepositoryRuleInfo
	}
	return nil
}

// Representation of a Starlark rule definition.
type RuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name under which the rule is made accessible to a user of this module,
	// including any structs it is nested in, for example "foo.foo_library".
	RuleName string `protobuf:"bytes,1,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// The documentation string of the rule.
	DocString string `protobuf:"bytes,2,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	// The attributes of the rule.
	Attribute []*AttributeInfo `protobuf:"bytes,3,rep,name=attribute,proto3" json:"attribute,omitempty"`
	// The module where and the name under which the rule was originally declared.
	OriginKey *OriginKey `protobuf:"bytes,4,opt,name=origin_key,json=originKey,proto3" json:"origin_key,omitempty"`
	// The list of providers that the rule's implementation must return. Unset if
	// the rule lists no advertised providers.
	AdvertisedProviders *ProviderNameGroup `protobuf:"bytes,5,opt,name=advertised_providers,json=advertisedProviders,proto3" json:"advertised_providers,omitempty"`
	// True if this is a test rule.
	Test bool `protobuf:"varint,6,opt,name=test,proto3" json:"test,omitempty"`
	// True if this is an executable rule.
	//
	// Note: if test is true, executable is also true (test rules are implicitly
	// executable).
	Executable bool `protobuf:"varint,7,opt,name=executable,proto3" json:"executable,omitempty"`
}

func (x *RuleInfo) Reset() {
	*x = RuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleInfo) ProtoMessage() {}

func (x *RuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleInfo.ProtoReflect.Descriptor instead.
func (*RuleInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{1}
}

func (x *RuleInfo) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *RuleInfo) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *RuleInfo) GetAttribute() []*AttributeInfo {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *RuleInfo) GetOriginKey() *OriginKey {
	if x != nil {
		return x.OriginKey
	}
	return nil
}

func (x *RuleInfo) GetAdvertisedProviders() *ProviderNameGroup {
	if x != nil {
		return x.AdvertisedProviders
	}
	return nil
}

func (x *RuleInfo) GetTest() bool {
	if x != nil {
		return x.Test
	}
	return false
}

func (x *RuleInfo) GetExecutable() bool {
	if x != nil {
		return x.Executable
	}
	return false
}

// Representation of a Starlark rule, repository rule, or module extension tag
// attribute definition, comprised of an attribute name, and a schema defined by
// a call to one of the 'attr' module methods enumerated at
// https://bazel.build/rules/lib/attr
type AttributeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the attribute.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The documentation string of the attribute, supplied via the 'doc'
	// parameter to the schema-creation call.
	DocString string `protobuf:"bytes,2,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	// The type of the attribute, defined generally by which function is invoked
	// in the attr module.
	Type AttributeType `protobuf:"varint,3,opt,name=type,proto3,enum=stardoc_output.AttributeType" json:"type,omitempty"`
	// If true, all targets of the rule must specify a value for this attribute.
	Mandatory bool `protobuf:"varint,4,opt,name=mandatory,proto3" json:"mandatory,omitempty"`
	// The target(s) in this attribute must define all the providers of at least
	// one of the ProviderNameGroups in this list. If the Attribute Type is not a
	// label, a label list, or a label-keyed string dictionary, the field will be
	// left empty. For attributes of a repository rule or a module extension tag,
	// this attribute is meaningless and may be ignored.
	// TODO(b/290788853): ensure this field is always empty for attributes of a
	// repository rule or a module extension tag.
	ProviderNameGroup []*ProviderNameGroup `protobuf:"bytes,5,rep,name=provider_name_group,json=providerNameGroup,proto3" json:"provider_name_group,omitempty"`
	// The string representation of the default value of this attribute.
	DefaultValue string `protobuf:"bytes,6,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// If true, the attribute is non-configurable.
	Nonconfigurable bool `protobuf:"varint,7,opt,name=nonconfigurable,proto3" json:"nonconfigurable,omitempty"`
}

func (x *AttributeInfo) Reset() {
	*x = AttributeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeInfo) ProtoMessage() {}

func (x *AttributeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeInfo.ProtoReflect.Descriptor instead.
func (*AttributeInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{2}
}

func (x *AttributeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttributeInfo) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *AttributeInfo) GetType() AttributeType {
	if x != nil {
		return x.Type
	}
	return AttributeType_UNKNOWN
}

func (x *AttributeInfo) GetMandatory() bool {
	if x != nil {
		return x.Mandatory
	}
	return false
}

func (x *AttributeInfo) GetProviderNameGroup() []*ProviderNameGroup {
	if x != nil {
		return x.ProviderNameGroup
	}
	return nil
}

func (x *AttributeInfo) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *AttributeInfo) GetNonconfigurable() bool {
	if x != nil {
		return x.Nonconfigurable
	}
	return false
}

// Representation of a set of providers.
type ProviderNameGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of the providers.
	//
	// This field is only intended for rendering human-readable output.
	// Please use origin_key (a list of the same length and in the same order as
	// this field) for cross-references and tooling.
	//
	// Note: legacy Stardoc (0.5.x and earlier) is unable to extract the name in
	// some circumstances (for example, if the provider is nested in a struct),
	// and in that case, the provider name will be "Unknown Provider".
	ProviderName []string `protobuf:"bytes,1,rep,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// A list of unambiguous references to providers, of the same length and in
	// the same order as the provider_name list.
	//
	// For provider symbols, this means modules where and the names under which
	// the providers were originally declared.
	//
	// For legacy struct providers, origin_key.file is unset.
	//
	// Note: legacy Stardoc (0.5.x and earlier) does not set this field.
	OriginKey []*OriginKey `protobuf:"bytes,2,rep,name=origin_key,json=originKey,proto3" json:"origin_key,omitempty"`
}

func (x *ProviderNameGroup) Reset() {
	*x = ProviderNameGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderNameGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderNameGroup) ProtoMessage() {}

func (x *ProviderNameGroup) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderNameGroup.ProtoReflect.Descriptor instead.
func (*ProviderNameGroup) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{3}
}

func (x *ProviderNameGroup) GetProviderName() []string {
	if x != nil {
		return x.ProviderName
	}
	return nil
}

func (x *ProviderNameGroup) GetOriginKey() []*OriginKey {
	if x != nil {
		return x.OriginKey
	}
	return nil
}

// Representation of Starlark function definition.
type StarlarkFunctionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name under which the function is made accessible to a user of this
	// module, including any structs it is nested in, for example
	// "foo.frobnicate".
	FunctionName string `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// The parameters for the function.
	Parameter []*FunctionParamInfo `protobuf:"bytes,2,rep,name=parameter,proto3" json:"parameter,omitempty"`
	// The documented description of the function (if specified in the function's
	// docstring).
	DocString string `protobuf:"bytes,3,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	// The return value for the function.
	Return *FunctionReturnInfo `protobuf:"bytes,4,opt,name=return,proto3" json:"return,omitempty"`
	// The deprecation for the function.
	Deprecated *FunctionDeprecationInfo `protobuf:"bytes,5,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// The module where and the name under which the function was originally
	// declared.
	//
	// Note: legacy Stardoc (0.5.x and earlier) does not set this field.
	OriginKey *OriginKey `protobuf:"bytes,6,opt,name=origin_key,json=originKey,proto3" json:"origin_key,omitempty"`
}

func (x *StarlarkFunctionInfo) Reset() {
	*x = StarlarkFunctionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkFunctionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkFunctionInfo) ProtoMessage() {}

func (x *StarlarkFunctionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkFunctionInfo.ProtoReflect.Descriptor instead.
func (*StarlarkFunctionInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{4}
}

func (x *StarlarkFunctionInfo) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *StarlarkFunctionInfo) GetParameter() []*FunctionParamInfo {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *StarlarkFunctionInfo) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *StarlarkFunctionInfo) GetReturn() *FunctionReturnInfo {
	if x != nil {
		return x.Return
	}
	return nil
}

func (x *StarlarkFunctionInfo) GetDeprecated() *FunctionDeprecationInfo {
	if x != nil {
		return x.Deprecated
	}
	return nil
}

func (x *StarlarkFunctionInfo) GetOriginKey() *OriginKey {
	if x != nil {
		return x.OriginKey
	}
	return nil
}

// Representation of a Starlark function parameter definition.
type FunctionParamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the parameter.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The documented description of the parameter (if specified in the function's
	// docstring).
	DocString string `protobuf:"bytes,2,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	// If not an empty string, the default value of the parameter displayed
	// as a string.
	DefaultValue string `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// If true, the default value is unset and a value is needed for this
	// parameter. This might be false even if defaultValue is empty in the case of
	// special parameter such as *args and **kwargs"
	Mandatory bool `protobuf:"varint,4,opt,name=mandatory,proto3" json:"mandatory,omitempty"`
}

func (x *FunctionParamInfo) Reset() {
	*x = FunctionParamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionParamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionParamInfo) ProtoMessage() {}

func (x *FunctionParamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionParamInfo.ProtoReflect.Descriptor instead.
func (*FunctionParamInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{5}
}

func (x *FunctionParamInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionParamInfo) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *FunctionParamInfo) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *FunctionParamInfo) GetMandatory() bool {
	if x != nil {
		return x.Mandatory
	}
	return false
}

type FunctionReturnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The documented return value of the function (if specified in the function's
	// docstring).
	DocString string `protobuf:"bytes,1,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
}

func (x *FunctionReturnInfo) Reset() {
	*x = FunctionReturnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionReturnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionReturnInfo) ProtoMessage() {}

func (x *FunctionReturnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionReturnInfo.ProtoReflect.Descriptor instead.
func (*FunctionReturnInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{6}
}

func (x *FunctionReturnInfo) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

type FunctionDeprecationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The documented deprecation of the function (if specified in the function's
	// docstring).
	DocString string `protobuf:"bytes,1,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
}

func (x *FunctionDeprecationInfo) Reset() {
	*x = FunctionDeprecationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionDeprecationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionDeprecationInfo) ProtoMessage() {}

func (x *FunctionDeprecationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionDeprecationInfo.ProtoReflect.Descriptor instead.
func (*FunctionDeprecationInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{7}
}

func (x *FunctionDeprecationInfo) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

// Representation of a Starlark provider field definition, comprised of
// the field name and provider description.
type ProviderFieldInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the field.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the provider.
	DocString string `protobuf:"bytes,2,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
}

func (x *ProviderFieldInfo) Reset() {
	*x = ProviderFieldInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderFieldInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderFieldInfo) ProtoMessage() {}

func (x *ProviderFieldInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderFieldInfo.ProtoReflect.Descriptor instead.
func (*ProviderFieldInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{8}
}

func (x *ProviderFieldInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProviderFieldInfo) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

// Representation of a Starlark provider definition.
type ProviderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name under which the provider is made accessible to a user of this
	// module, including any structs it is nested in, for example "foo.FooInfo".
	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// The description of the provider.
	DocString string `protobuf:"bytes,2,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	// The fields of the provider.
	FieldInfo []*ProviderFieldInfo `protobuf:"bytes,3,rep,name=field_info,json=fieldInfo,proto3" json:"field_info,omitempty"`
	// The module where and the name under which the provider was originally
	// declared.
	OriginKey *OriginKey `protobuf:"bytes,4,opt,name=origin_key,json=originKey,proto3" json:"origin_key,omitempty"`
	// The provider's init callback.
	Init *StarlarkFunctionInfo `protobuf:"bytes,5,opt,name=init,proto3" json:"init,omitempty"`
}

func (x *ProviderInfo) Reset() {
	*x = ProviderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderInfo) ProtoMessage() {}

func (x *ProviderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderInfo.ProtoReflect.Descriptor instead.
func (*ProviderInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{9}
}

func (x *ProviderInfo) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *ProviderInfo) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *ProviderInfo) GetFieldInfo() []*ProviderFieldInfo {
	if x != nil {
		return x.FieldInfo
	}
	return nil
}

func (x *ProviderInfo) GetOriginKey() *OriginKey {
	if x != nil {
		return x.OriginKey
	}
	return nil
}

func (x *ProviderInfo) GetInit() *StarlarkFunctionInfo {
	if x != nil {
		return x.Init
	}
	return nil
}

// Representation of a Starlark aspect definition.
type AspectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name under which the aspect is made accessible to a user of this
	// module, including any structs it is nested in, for example
	// "foo.foo_aspect".
	AspectName string `protobuf:"bytes,1,opt,name=aspect_name,json=aspectName,proto3" json:"aspect_name,omitempty"`
	// The documentation string of the aspect.
	DocString string `protobuf:"bytes,2,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	// The rule attributes along which the aspect propagates.
	AspectAttribute []string `protobuf:"bytes,3,rep,name=aspect_attribute,json=aspectAttribute,proto3" json:"aspect_attribute,omitempty"`
	// The attributes of the aspect.
	Attribute []*AttributeInfo `protobuf:"bytes,4,rep,name=attribute,proto3" json:"attribute,omitempty"`
	// The module where and the name under which the aspect was originally
	// declared.
	//
	// Note: legacy Stardoc (0.5.x and earlier) does not set this field.
	OriginKey *OriginKey `protobuf:"bytes,5,opt,name=origin_key,json=originKey,proto3" json:"origin_key,omitempty"`
}

func (x *AspectInfo) Reset() {
	*x = AspectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AspectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AspectInfo) ProtoMessage() {}

func (x *AspectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AspectInfo.ProtoReflect.Descriptor instead.
func (*AspectInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{10}
}

func (x *AspectInfo) GetAspectName() string {
	if x != nil {
		return x.AspectName
	}
	return ""
}

func (x *AspectInfo) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *AspectInfo) GetAspectAttribute() []string {
	if x != nil {
		return x.AspectAttribute
	}
	return nil
}

func (x *AspectInfo) GetAttribute() []*AttributeInfo {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *AspectInfo) GetOriginKey() *OriginKey {
	if x != nil {
		return x.OriginKey
	}
	return nil
}

// Representation of a Bazel module extension, i.e. the object returned by
// calling `module_extension(...)`.
//
// Note: legacy Stardoc (0.5.x and earlier) does not emit this message.
type ModuleExtensionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name under which the extension is made accessible to a user of this
	// Starlark module.
	ExtensionName string `protobuf:"bytes,1,opt,name=extension_name,json=extensionName,proto3" json:"extension_name,omitempty"`
	// The documentation string of the extension.
	DocString string `protobuf:"bytes,2,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	// The tag classes of the extension.
	TagClass []*ModuleExtensionTagClassInfo `protobuf:"bytes,3,rep,name=tag_class,json=tagClass,proto3" json:"tag_class,omitempty"`
	// The Starlark module where the Bazel module extension was originally
	// declared; origin_key.name is currently never set.
	// TODO(arostovtsev): attempt to retrieve the name under which the module
	// extension was originally declared if it was declared as a global.
	OriginKey *OriginKey `protobuf:"bytes,4,opt,name=origin_key,json=originKey,proto3" json:"origin_key,omitempty"`
}

func (x *ModuleExtensionInfo) Reset() {
	*x = ModuleExtensionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleExtensionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleExtensionInfo) ProtoMessage() {}

func (x *ModuleExtensionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleExtensionInfo.ProtoReflect.Descriptor instead.
func (*ModuleExtensionInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{11}
}

func (x *ModuleExtensionInfo) GetExtensionName() string {
	if x != nil {
		return x.ExtensionName
	}
	return ""
}

func (x *ModuleExtensionInfo) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *ModuleExtensionInfo) GetTagClass() []*ModuleExtensionTagClassInfo {
	if x != nil {
		return x.TagClass
	}
	return nil
}

func (x *ModuleExtensionInfo) GetOriginKey() *OriginKey {
	if x != nil {
		return x.OriginKey
	}
	return nil
}

// Representation of a Bazel module extension tag class.
type ModuleExtensionTagClassInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the tag for this tag class.
	TagName string `protobuf:"bytes,1,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	// The documentation string of the tag class.
	DocString string `protobuf:"bytes,2,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	// The tag class's attributes.
	Attribute []*AttributeInfo `protobuf:"bytes,3,rep,name=attribute,proto3" json:"attribute,omitempty"`
}

func (x *ModuleExtensionTagClassInfo) Reset() {
	*x = ModuleExtensionTagClassInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleExtensionTagClassInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleExtensionTagClassInfo) ProtoMessage() {}

func (x *ModuleExtensionTagClassInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleExtensionTagClassInfo.ProtoReflect.Descriptor instead.
func (*ModuleExtensionTagClassInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{12}
}

func (x *ModuleExtensionTagClassInfo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *ModuleExtensionTagClassInfo) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *ModuleExtensionTagClassInfo) GetAttribute() []*AttributeInfo {
	if x != nil {
		return x.Attribute
	}
	return nil
}

// Representation of a Bazel repository rule, i.e. the object returned by
// calling `repository_rule(...)`.
//
// Note: legacy Stardoc (0.5.x and earlier) does not emit this message, instead
// using RuleInfo.
type RepositoryRuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name under which the repository rule is made accessible to a user of
	// this Starlark module.
	RuleName string `protobuf:"bytes,1,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// The documentation string of the repository rule.
	DocString string `protobuf:"bytes,2,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	// The attributes of the repository rule.
	Attribute []*AttributeInfo `protobuf:"bytes,3,rep,name=attribute,proto3" json:"attribute,omitempty"`
	// Environment variables that this repository rule depends on.
	Environ []string `protobuf:"bytes,4,rep,name=environ,proto3" json:"environ,omitempty"`
	// The Starlark module where and the name under which the repository rule was
	// originally declared.
	OriginKey *OriginKey `protobuf:"bytes,5,opt,name=origin_key,json=originKey,proto3" json:"origin_key,omitempty"`
}

func (x *RepositoryRuleInfo) Reset() {
	*x = RepositoryRuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryRuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryRuleInfo) ProtoMessage() {}

func (x *RepositoryRuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryRuleInfo.ProtoReflect.Descriptor instead.
func (*RepositoryRuleInfo) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{13}
}

func (x *RepositoryRuleInfo) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *RepositoryRuleInfo) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *RepositoryRuleInfo) GetAttribute() []*AttributeInfo {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *RepositoryRuleInfo) GetEnviron() []string {
	if x != nil {
		return x.Environ
	}
	return nil
}

func (x *RepositoryRuleInfo) GetOriginKey() *OriginKey {
	if x != nil {
		return x.OriginKey
	}
	return nil
}

// Representation of the origin of a rule, provider, aspect, or function.
// Intended to be used for building unambiguous cross-references: for example,
// between an element of a ProviderNameGroup required by a rule attribute and
// its corresponding ProviderInfo.
type OriginKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name under which the entity was originally exported. Unset when the
	// entity was not exported in its module.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The display form of the label of the module file in which the entity was
	// originally declared (as seen from the starlark_doc_extract or Stardoc
	// target's repo), or "<native>" for Bazel's built-in entities implemented in
	// Java. Unset when there is no module file (such as for legacy struct
	// providers, when the module is a REPL, or in Bazel's internal tests).
	File string `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *OriginKey) Reset() {
	*x = OriginKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardoc_output_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginKey) ProtoMessage() {}

func (x *OriginKey) ProtoReflect() protoreflect.Message {
	mi := &file_stardoc_output_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginKey.ProtoReflect.Descriptor instead.
func (*OriginKey) Descriptor() ([]byte, []int) {
	return file_stardoc_output_proto_rawDescGZIP(), []int{14}
}

func (x *OriginKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OriginKey) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

var File_stardoc_output_proto protoreflect.FileDescriptor

var file_stardoc_output_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xf4, 0x03, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64,
	0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x41, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f,
	0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x29, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x44, 0x6f, 0x63, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x57,
	0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc7, 0x02,
	0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f,
	0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x54, 0x0a,
	0x14, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x13,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x51, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x6e, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x72, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x22, 0xda, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x47, 0x0a,
	0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79,
	0x22, 0x89, 0x01, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f,
	0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x33, 0x0a, 0x12,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0x38, 0x0a, 0x17, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x46, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x88, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x22, 0xee,
	0x01, 0x0a, 0x0a, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x22,
	0xdf, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a,
	0x09, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74,
	0x61, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x65,
	0x79, 0x22, 0x94, 0x01, 0x0a, 0x1b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x65,
	0x79, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x33, 0x0a, 0x09,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x2a, 0xdd, 0x01, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e,
	0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f,
	0x4c, 0x45, 0x41, 0x4e, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x10, 0x09, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x10, 0x0a, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x44, 0x49,
	0x43, 0x54, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x0c,
	0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x0d, 0x42, 0x86, 0x01, 0x0a, 0x30, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e,
	0x73, 0x6b, 0x79, 0x64, 0x6f, 0x63, 0x2e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x13, 0x53, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a, 0x3d, 0x67, 0x6f, 0x2e,
	0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x66, 0x75, 0x63, 0x68,
	0x73, 0x69, 0x61, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x62, 0x61, 0x7a, 0x65, 0x6c, 0x2d,
	0x64, 0x6f, 0x63, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x64, 0x6f, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_stardoc_output_proto_rawDescOnce sync.Once
	file_stardoc_output_proto_rawDescData = file_stardoc_output_proto_rawDesc
)

func file_stardoc_output_proto_rawDescGZIP() []byte {
	file_stardoc_output_proto_rawDescOnce.Do(func() {
		file_stardoc_output_proto_rawDescData = protoimpl.X.CompressGZIP(file_stardoc_output_proto_rawDescData)
	})
	return file_stardoc_output_proto_rawDescData
}

var file_stardoc_output_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_stardoc_output_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_stardoc_output_proto_goTypes = []interface{}{
	(AttributeType)(0),                  // 0: stardoc_output.AttributeType
	(*ModuleInfo)(nil),                  // 1: stardoc_output.ModuleInfo
	(*RuleInfo)(nil),                    // 2: stardoc_output.RuleInfo
	(*AttributeInfo)(nil),               // 3: stardoc_output.AttributeInfo
	(*ProviderNameGroup)(nil),           // 4: stardoc_output.ProviderNameGroup
	(*StarlarkFunctionInfo)(nil),        // 5: stardoc_output.StarlarkFunctionInfo
	(*FunctionParamInfo)(nil),           // 6: stardoc_output.FunctionParamInfo
	(*FunctionReturnInfo)(nil),          // 7: stardoc_output.FunctionReturnInfo
	(*FunctionDeprecationInfo)(nil),     // 8: stardoc_output.FunctionDeprecationInfo
	(*ProviderFieldInfo)(nil),           // 9: stardoc_output.ProviderFieldInfo
	(*ProviderInfo)(nil),                // 10: stardoc_output.ProviderInfo
	(*AspectInfo)(nil),                  // 11: stardoc_output.AspectInfo
	(*ModuleExtensionInfo)(nil),         // 12: stardoc_output.ModuleExtensionInfo
	(*ModuleExtensionTagClassInfo)(nil), // 13: stardoc_output.ModuleExtensionTagClassInfo
	(*RepositoryRuleInfo)(nil),          // 14: stardoc_output.RepositoryRuleInfo
	(*OriginKey)(nil),                   // 15: stardoc_output.OriginKey
}
var file_stardoc_output_proto_depIdxs = []int32{
	2,  // 0: stardoc_output.ModuleInfo.rule_info:type_name -> stardoc_output.RuleInfo
	10, // 1: stardoc_output.ModuleInfo.provider_info:type_name -> stardoc_output.ProviderInfo
	5,  // 2: stardoc_output.ModuleInfo.func_info:type_name -> stardoc_output.StarlarkFunctionInfo
	11, // 3: stardoc_output.ModuleInfo.aspect_info:type_name -> stardoc_output.AspectInfo
	12, // 4: stardoc_output.ModuleInfo.module_extension_info:type_name -> stardoc_output.ModuleExtensionInfo
	14, // 5: stardoc_output.ModuleInfo.repository_rule_info:type_name -> stardoc_output.RepositoryRuleInfo
	3,  // 6: stardoc_output.RuleInfo.attribute:type_name -> stardoc_output.AttributeInfo
	15, // 7: stardoc_output.RuleInfo.origin_key:type_name -> stardoc_output.OriginKey
	4,  // 8: stardoc_output.RuleInfo.advertised_providers:type_name -> stardoc_output.ProviderNameGroup
	0,  // 9: stardoc_output.AttributeInfo.type:type_name -> stardoc_output.AttributeType
	4,  // 10: stardoc_output.AttributeInfo.provider_name_group:type_name -> stardoc_output.ProviderNameGroup
	15, // 11: stardoc_output.ProviderNameGroup.origin_key:type_name -> stardoc_output.OriginKey
	6,  // 12: stardoc_output.StarlarkFunctionInfo.parameter:type_name -> stardoc_output.FunctionParamInfo
	7,  // 13: stardoc_output.StarlarkFunctionInfo.return:type_name -> stardoc_output.FunctionReturnInfo
	8,  // 14: stardoc_output.StarlarkFunctionInfo.deprecated:type_name -> stardoc_output.FunctionDeprecationInfo
	15, // 15: stardoc_output.StarlarkFunctionInfo.origin_key:type_name -> stardoc_output.OriginKey
	9,  // 16: stardoc_output.ProviderInfo.field_info:type_name -> stardoc_output.ProviderFieldInfo
	15, // 17: stardoc_output.ProviderInfo.origin_key:type_name -> stardoc_output.OriginKey
	5,  // 18: stardoc_output.ProviderInfo.init:type_name -> stardoc_output.StarlarkFunctionInfo
	3,  // 19: stardoc_output.AspectInfo.attribute:type_name -> stardoc_output.AttributeInfo
	15, // 20: stardoc_output.AspectInfo.origin_key:type_name -> stardoc_output.OriginKey
	13, // 21: stardoc_output.ModuleExtensionInfo.tag_class:type_name -> stardoc_output.ModuleExtensionTagClassInfo
	15, // 22: stardoc_output.ModuleExtensionInfo.origin_key:type_name -> stardoc_output.OriginKey
	3,  // 23: stardoc_output.ModuleExtensionTagClassInfo.attribute:type_name -> stardoc_output.AttributeInfo
	3,  // 24: stardoc_output.RepositoryRuleInfo.attribute:type_name -> stardoc_output.AttributeInfo
	15, // 25: stardoc_output.RepositoryRuleInfo.origin_key:type_name -> stardoc_output.OriginKey
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_stardoc_output_proto_init() }
func file_stardoc_output_proto_init() {
	if File_stardoc_output_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stardoc_output_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderNameGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkFunctionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionParamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionReturnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionDeprecationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderFieldInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AspectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleExtensionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleExtensionTagClassInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryRuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardoc_output_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stardoc_output_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stardoc_output_proto_goTypes,
		DependencyIndexes: file_stardoc_output_proto_depIdxs,
		EnumInfos:         file_stardoc_output_proto_enumTypes,
		MessageInfos:      file_stardoc_output_proto_msgTypes,
	}.Build()
	File_stardoc_output_proto = out.File
	file_stardoc_output_proto_rawDesc = nil
	file_stardoc_output_proto_goTypes = nil
	file_stardoc_output_proto_depIdxs = nil
}
