{{>copyright comment="//"}}

#include "../{{PROJECT_NAME}}.h"

#include <lib/driver/devicetree/testing/visitor-test-helper.h>
#include <lib/driver/devicetree/visitors/default/bind-property/bind-property.h>
#include <lib/driver/devicetree/visitors/registry.h>

#include <gtest/gtest.h>
namespace {{snake_case PROJECT_NAME}}_dt {

class {{pascal_case PROJECT_NAME}}Tester : public
    fdf_devicetree::testing::VisitorTestHelper<{{pascal_case PROJECT_NAME}}> {
 public:
  {{pascal_case PROJECT_NAME}}Tester(std::string_view dtb_path)
      : fdf_devicetree::testing::VisitorTestHelper<{{pascal_case PROJECT_NAME}}>(
            dtb_path, "{{pascal_case PROJECT_NAME}}Test") {
  }
};

TEST({{pascal_case PROJECT_NAME}}Test, TestMetadataAndBindProperty) {
  fdf_devicetree::VisitorRegistry visitors;
  ASSERT_TRUE(
      visitors.RegisterVisitor(std::make_unique<fdf_devicetree::BindPropertyVisitor>()).is_ok());

  auto tester = std::make_unique<{{pascal_case PROJECT_NAME}}Tester>("/pkg/test-data/{{PROJECT_NAME}}.dtb");
  {{pascal_case PROJECT_NAME}}Tester* {{snake_case PROJECT_NAME}}_tester = tester.get();
  ASSERT_TRUE(visitors.RegisterVisitor(std::move(tester)).is_ok());

  ASSERT_EQ(ZX_OK, {{snake_case PROJECT_NAME}}_tester->manager()->Walk(visitors).status_value());
  ASSERT_TRUE({{snake_case PROJECT_NAME}}_tester->DoPublish().is_ok());

  auto node_count =
      {{snake_case PROJECT_NAME}}_tester->env().SyncCall(&fdf_devicetree::testing::FakeEnvWrapper::pbus_node_size);

  uint32_t node_tested_count = 0;
  for (size_t i = 0; i < node_count; i++) {
    auto node =
        {{snake_case PROJECT_NAME}}_tester->env().SyncCall(&fdf_devicetree::testing::FakeEnvWrapper::pbus_nodes_at, i);

    // <Add tests for specific node properties>.
    if (node.name()->find("") != std::string::npos) {
      node_tested_count++;
      // <Add Node specific metadata or bind property tests below>.
    }
  }

  ASSERT_EQ(node_tested_count, 1u);
}

}  // namespace {{snake_case PROJECT_NAME}}_dt
