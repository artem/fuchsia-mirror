# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/assembled_system.gni")
import("//build/assembly/generated_images_config.gni")
import("//build/assembly/product_assembly_configuration.gni")
import("//build/images/zedboot/zedboot_args.gni")
import("//src/storage/fshost/generated_fshost_config.gni")
import("//src/sys/core/build/core.gni")

# Wraps assembled_system to allow adding internal network-conformance test stubs.
#
# Parameters
#
#   additional_base_packages
#     Additional package labels to include in the `base_packages` passed to `assembled_system`.
#
template("assemble_network_conformance_system") {
  _image_name = target_name

  labels = {
    images_config_fvm = "${target_name}.images_config_fvm"
    images_config_fxfs = "${target_name}.images_config_fxfs"
    product_config = "${target_name}.product_assembly_config"
    product_config_fxfs = "${target_name}.product_assembly_config_fxfs"
    board_config = "${target_name}.board_config"
  }
  files = {
    board_config = "${target_out_dir}/${target_name}.board_config.json"
  }

  core_realm_definition("core") {
    testonly = true
  }

  generated_images_config(labels.images_config_fvm) {
    zbi = {
      name = _image_name
    }
    fvm = {
      slice_size = 1048576
    }
  }

  generated_images_config(labels.images_config_fxfs) {
    zbi = {
      name = _image_name
    }
    fxfs = {
    }
  }

  generated_file(labels.board_config) {
    outputs = [ files.board_config ]
    output_conversion = "json"
    contents = {
      name = "network-conformance"
      filesystems = {
        fvm = {
          slice_size = 1048576
          sparse_output = {
          }
        }
      }
    }
  }

  product_assembly_configuration(labels.product_config) {
    platform = {
      build_type = "eng"
      feature_set_level = "utility"
      storage = {
        filesystems = {
          image_name = _image_name
          volume = {
            fvm = {
              data = {
              }
              blob = {
              }
            }
          }
        }
      }
    }
  }

  product_assembly_configuration(labels.product_config_fxfs) {
    platform = {
      build_type = "eng"
      feature_set_level = "utility"
      storage = {
        filesystems = {
          image_name = _image_name
          volume = "fxfs"
        }
      }
    }
  }

  assembled_system(target_name) {
    testonly = true

    if (!fxfs_blob) {
      assembly_images_config_label = ":${labels.images_config_fvm}"
      product_assembly_config_label = ":${labels.product_config}"
      generate_fvm = true
    } else {
      assembly_images_config_label = ":${labels.images_config_fxfs}"
      product_assembly_config_label = ":${labels.product_config_fxfs}"
      generate_fxfs = true
    }
    ramdisk_in_zbi = true

    board_config = files.board_config
    deps = [ ":${labels.board_config}" ]
    allow_eng_platform_bundle_use = true

    base_packages = [
      "//src/connectivity/network/mdns/bundles:services",
      "//src/connectivity/network/netcfg:config-default",
      "//src/connectivity/network/net-cli",
      "//src/connectivity/network/testing/network-test-realm/service:network-test-realm",
      "//src/security/bin/root_ssl_certificates",
      "//src/sys/full-resolver:full-resolver-pkg",
    ]
    base_packages += invoker.additional_base_packages

    core_realm_definition = ":core"

    include_component_id_index = true
    additional_boot_args =
        [ "virtcon.disable=true" ] + zedboot_additional_boot_args
    cmdline = [ "kernel.halt-on-panic=true" ]

    bootfs_labels = [
      "//build/input:recovery_bootfs",
      "//bundles/drivers:bootstrap",
      "//src/sys/component_manager:component_manager_bootfs_config",
    ]
  }
}
