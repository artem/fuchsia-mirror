# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/assembled_system.gni")
import("//build/assembly/product_assembly_configuration.gni")
import("//build/assembly/sshd_config.gni")
import("//build/board.gni")
import("//build/images/args.gni")
import("//build/images/paths.gni")
import("//build/images/vboot/vboot.gni")
import("//build/images/zedboot/zedboot_args.gni")
import("//build/info/info.gni")
import("//build/product.gni")
import("//build/testing/host_test_data.gni")
import("//src/storage/fshost/generated_fshost_config.gni")
import("//src/sys/core/build/core.gni")

if (is_host) {
  host_test_data("test_data") {
    out_dir = get_label_info(":anything($target_toolchain)", "target_out_dir")
    sources = [
      "${out_dir}/recovery-eng/fuchsia.zbi",
      "${out_dir}/recovery-fdr/fuchsia.zbi",
      "${out_dir}/recovery-installer/fuchsia.zbi",
    ]
    deps = [
      ":recovery-eng($target_toolchain)",
      ":recovery-fdr($target_toolchain)",
      ":recovery-installer($target_toolchain)",
    ]
  }
}

if (is_fuchsia) {
  assert(current_toolchain == default_toolchain,
         "//build/images/* are only valid in the Fuchsia toolchain")

  _images_config = "//boards/images:default"
  if (has_board) {
    assert(board_information_for_assembly != false,
           "Need to define board_information_for_assembly for cuckoo tests")
    assert(fuchsia_filesystem_config != false,
           "Need to define fuchsia_filesystem_config for cuckoo tests")
    _images_config = fuchsia_filesystem_config
  }

  # Parameters shared between recovery-eng and recovery-installer
  recovery_base = {
    testonly = true
    image_name = "fuchsia"
    generate_fvm = !bootfs_only && !fxfs_blob
    generate_fxfs = !bootfs_only && fxfs_blob

    generate_fvm_fastboot = generate_fvm && assembly_generate_fvm_fastboot
    generate_fvm_nand = generate_fvm && assembly_generate_fvm_nand
    generate_vbmeta = use_vbmeta

    ramdisk_in_zbi = true

    assembly_images_config_label = _images_config
    board_config = board_information_for_assembly

    include_component_id_index = true
    additional_boot_args =
        [ "virtcon.disable=true" ] + zedboot_additional_boot_args

    bootfs_labels = [
      "//build/input:recovery_bootfs",
      "//bundles/drivers:bootstrap",
      "//bundles/drivers:usb-host-stack",
      "//bundles/drivers:usb-peripheral-stack",
    ]
    bootfs_labels +=
        [ "//src/sys/component_manager:component_manager_bootfs_config" ]

    if (custom_signing_script != "") {
      inputs = custom_signing_script_inputs
      generate_signed_zbi = true
    } else if (use_vboot) {
      inputs = vboot_action.inputs
      generate_signed_zbi = true
    }
  }

  group("recovery") {
    testonly = true
    public_deps = [
      ":recovery-eng",
      ":recovery-fastboot",
      ":recovery-fdr",
      ":recovery-installer",
    ]
  }

  # These are to temporarily switch back to using the bootstrap level so that the
  # vendor assemblies can be moved to utility with it being the same as
  # bootstrap
  # TODO(122863) Remove use of transitional labels
  core_realm_aib_pkgs = []
  core_realm_aib_shards = []
  core_realm_network_aib_pkgs = [
    # Newtorking itself
    "//src/connectivity/network:for_transition",
    "//src/security/bin/root_ssl_certificates:for_transition",
  ]
  core_realm_eng_aib_pkgs = [
    # Enable ffx support.
    "//src/connectivity/network/mdns/bundles:services",  # group for transition

    # Basic command-line tools:
    "//bundles/assembly:third_party_sbase_for_transition",
    "//src/diagnostics/log_listener:for_transition",

    # Command-line interface to wlan stack:
    "//src/connectivity/wlan/wlancfg/tool:for_transition",

    # Device side of zxdb & fidlcat:
    "//src/developer/debug/debug_agent",
  ]
  core_realm_testing_aib_pkgs = [
    # SL4F for infra testing
    "//src/testing/sl4f:for_transition",
    "//src/sys/bin/start_sl4f:for_transition",
  ]
  core_realm_testing_aib_shards = [
    # SL4F for infra testing
    "//src/testing/sl4f:sl4f_core_shard",
  ]

  _core_realm_deps =
      core_realm_aib_shards + [
        "//src/diagnostics/realm:core_shard",
        "//src/firmware/fastboot-tcp:fastboot-tcp-core-shard",
        "//src/firmware/fastboot-usb:fastboot-usb-core-shard",
        "//src/recovery/factory_reset:factory_reset_core_shard",
        "//src/ui/bin/brightness_manager:auto-brightness_core_shard",
      ]

  core_realm_definition("core") {
    deps = _core_realm_deps +
           [ "//src/recovery/system:system_recovery_fdr_core_shard" ]
  }

  core_realm_definition("core-eng") {
    deps =
        _core_realm_deps + core_realm_testing_aib_shards + [
          # required for SL4F
          "//src/developer:default-laboratory-env-core-shard",
          "//src/developer/memory/monitor:memory_monitor_core_shard",
          "//src/factory/factory_store_providers:factory_store_providers_shard",
          "//src/recovery/system:system_recovery_core_shard",
          "//src/settings/service:setui_service_core_shard",
        ]
  }

  core_realm_definition("core-installer") {
    deps = _core_realm_deps +
           [ "//src/recovery/system:system_recovery_installer_core_shard" ]
  }

  recovery_packages = board_recovery_package_labels + core_realm_aib_pkgs +
                      core_realm_network_aib_pkgs +
                      [
                        ":build-info-recovery",
                        "//src/connectivity/network/netcfg:config-default",
                        "//src/recovery/factory_reset",
                        "//src/recovery/system:system_recovery",
                        "//src/sys/core:component_id_index_no_restrict_storage",
                        "//src/ui/bin/brightness_manager:auto-brightness",

                        # Flattened from //src/sys/pkg:recovery
                        "//src/sys/pkg/bin/omaha-client",
                        "//src/sys/pkg/bin/system-updater",

                        # system-update-committer is a dependency of pkg-cache,
                        # but we don't want to do any verification in recovery
                        # mode, so we completely disable it.
                        "//src/sys/pkg/bin/system-update-committer:disable",
                      ]

  recovery_eng_packages =
      recovery_packages + core_realm_eng_aib_pkgs +
      core_realm_testing_aib_pkgs +
      [
        "//src/cobalt/bin/app:build_type_eng",
        "//src/cobalt/bin/app:cobalt",
        "//src/cobalt/bin/app:cobalt_registry",
        "//src/cobalt/bin/app:config",

        # The SWD stack for OTAs.
        "//src/sys/pkg/lib/isolated-swd:isolated-swd-components",

        # Userspace fastboot for flashing
        "//src/firmware/fastboot-tcp",

        # Support for hwinfo protocol to read regulatory region from factory.
        "//src/factory/factory_store_providers",

        # Support privacy switch
        "//src/settings/service:setui_service",

        # Forensics and crash reporting
        "//src/developer/forensics:user_configs",
        "//src/developer/forensics:feedback_remote_device_id_provider",
      ]

  recovery_installer_packages =
      recovery_eng_packages - [ "//src/recovery/system:system_recovery" ] + [
        "//src/recovery/system:system_recovery_installer",
        "//src/firmware/fastboot-tcp:fastboot_tcp_mdns_config",
      ]

  recovery_fdr_packages = recovery_packages
  recovery_fdr_packages -= [ "//src/recovery/system:system_recovery" ]
  recovery_fdr_packages += [ "//src/recovery/system:system_recovery_fdr" ]

  product_assembly_configuration("for-eng") {
    platform = {
      build_type = "eng"
      feature_set_level = "utility"
      if (authorized_ssh_keys_path != false) {
        development_support = {
          authorized_ssh_keys_path =
              rebase_path(authorized_ssh_keys_path, root_build_dir)
        }
      }
      connectivity = {
        wlan = {
          legacy_privacy_support = true
        }
      }
    }
    product = {
    }
  }

  assembled_system("recovery-eng") {
    forward_variables_from(recovery_base, "*")
    namespace = "recovery-eng"
    allow_eng_platform_bundle_use = true
    base_packages = recovery_eng_packages
    core_realm_definition = ":core-eng"

    product_assembly_config_label = ":for-eng"
    board_config = board_information_for_assembly
  }

  product_assembly_configuration("for-fastboot") {
    platform = {
      build_type = "eng"
      feature_set_level = "utility"
      if (authorized_ssh_keys_path != false) {
        development_support = {
          authorized_ssh_keys_path =
              rebase_path(authorized_ssh_keys_path, root_build_dir)
        }
      }
      connectivity = {
        wlan = {
          legacy_privacy_support = true
        }
      }
    }
    product = {
    }
  }

  # A minimal recovery image that runs userspace fastboot on tcp.
  assembled_system("recovery-fastboot") {
    forward_variables_from(recovery_base, "*")
    namespace = "recovery-fastboot"
    allow_eng_platform_bundle_use = true
    base_packages = []
    core_realm_definition = ":core-eng"

    product_assembly_config_label = ":for-fastboot"

    base_packages = core_realm_aib_pkgs + core_realm_eng_aib_pkgs +
                    core_realm_network_aib_pkgs +
                    [
                      "//build/info:build-info",
                      "//src/connectivity/network/netcfg:config-default",
                      "//src/sys/core:component_id_index_no_restrict_storage",
                      "//src/firmware/fastboot-tcp",
                      "//src/firmware/fastboot-tcp:fastboot_tcp_mdns_config",
                      "//src/firmware/fastboot-usb",
                    ]

    bootfs_labels = []
    bootfs_labels = [
      "//build/input:recovery_bootfs",
      "//bundles/drivers:bootstrap",
      "//bundles/drivers:usb-host-stack",
      "//bundles/drivers:usb-peripheral-stack",
      "//src/sys/component_manager:component_manager_bootfs_config",
    ]

    if (recovery_is_recovery_fastboot) {
      image_metadata_overrides = {
        zbi = {
          name = "zircon-r"
          if (zircon_r_partition != "") {
            fastboot_flash = [ zircon_r_partition ]
          }
          bootserver_pave = [ "--zirconr" ]
        }

        if (sign_zbi) {
          zbi_signed = {
            name = "zircon-r.signed"
            if (zircon_r_partition != "") {
              fastboot_flash = [ zircon_r_partition ]
            }
            bootserver_pave = [ "--zirconr" ]
          }
        }

        if (use_vbmeta) {
          vbmeta = {
            name = "zircon-r"
            if (vbmeta_r_partition != "") {
              fastboot_flash = [ vbmeta_r_partition ]
            }
            bootserver_pave = [ "--vbmetar" ]
          }
        }
      }
    }
  }

  product_assembly_configuration("for-fdr") {
    platform = {
      build_type = "user"
      feature_set_level = "utility"
    }
    product = {
    }
  }

  assembled_system("recovery-fdr") {
    image_name = "fuchsia"
    namespace = "recovery-fdr"

    base_packages = recovery_fdr_packages
    core_realm_definition = ":core"
    generate_fvm = !bootfs_only && !fxfs_blob
    generate_fxfs = !bootfs_only && fxfs_blob

    generate_fvm_fastboot = generate_fvm && assembly_generate_fvm_fastboot
    generate_fvm_nand = generate_fvm && assembly_generate_fvm_nand
    generate_vbmeta = use_vbmeta

    ramdisk_in_zbi = true

    include_component_id_index = true

    additional_boot_args = [ "virtcon.disable=true" ]
    cmdline = []

    assembly_images_config_label = _images_config
    product_assembly_config_label = ":for-fdr"
    board_config = board_information_for_assembly

    bootfs_labels = [
      "//build/input:recovery_bootfs",
      "//bundles/drivers:bootstrap",
      "//bundles/drivers:usb-host-stack",
      "//bundles/drivers:usb-peripheral-stack",
    ]
    bootfs_labels +=
        [ "//src/sys/component_manager:component_manager_bootfs_config" ]

    if (custom_signing_script != "") {
      inputs = custom_signing_script_inputs
      generate_signed_zbi = true
    } else if (use_vboot) {
      inputs = vboot_action.inputs
      generate_signed_zbi = true
    }
  }

  product_assembly_configuration("for-installer") {
    platform = {
      build_type = "eng"
      feature_set_level = "utility"
      if (authorized_ssh_keys_path != false) {
        development_support = {
          authorized_ssh_keys_path =
              rebase_path(authorized_ssh_keys_path, root_build_dir)
        }
      }
      connectivity = {
        wlan = {
          legacy_privacy_support = true
        }

        # After issuing device reboot when `ffx target flash`, ffx will block
        # on the first mdns respond from the target as a signal of re-discovery.
        # It also seems to temporarily stop updating the target according to
        # later responds that follow. If we are unlucky and this first responds
        # is _fuchsia._udp instead of _fastboot._tcp, ffx will fail to
        # recognize the device as being in the fastboot state. For now remove
        # _fuchsia._udp service as a workaround in favor of _fastboot._tcp
        # until we need both.
        mdns = {
          publish_fuchsia_dev_wired_service = false
        }
      }
    }
    product = {
    }
  }

  assembled_system("recovery-installer") {
    forward_variables_from(recovery_base, "*")
    namespace = "recovery-installer"
    allow_eng_platform_bundle_use = true
    base_packages = recovery_installer_packages

    product_assembly_config_label = ":for-installer"

    core_realm_definition = ":core-installer"

    # The installer needs to see all partitions on the system so that it can
    #determine the installation source and destination
    fshost_config = {
      gpt_all = true
    }
  }

  recovery_build_info_product = "${target_gen_dir}/product.txt"

  generated_file("recovery_build_info_product") {
    outputs = [ recovery_build_info_product ]
    contents = "${build_info_product}_recovery"
  }

  resource_group("build-info-resources") {
    files = [
      {
        source = recovery_build_info_product
        dest = "data/product"
      },
      {
        source = build_info_files.board
        dest = "data/board"
      },
      {
        source = build_info_files.version
        dest = "data/version"
      },
      {
        source = build_info_files.jiri_snapshot
        dest = "data/snapshot"
      },
      {
        source = build_info_files.latest_commit_date
        dest = "data/latest-commit-date"
      },
      {
        source = build_info_files.minimum_utc_stamp
        dest = "data/minimum-utc-stamp"
      },
    ]
    deps = [
      ":recovery_build_info_product",
      "//build/info:latest-commit-date",
    ]
  }

  fuchsia_package("build-info-recovery") {
    package_name = "build-info"
    deps = [ ":build-info-resources" ]
  }
}
