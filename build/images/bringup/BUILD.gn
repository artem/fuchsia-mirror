# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/assembled_system.gni")
import("//build/assembly/generated_images_config.gni")
import("//build/assembly/legacy_image_metadata_overrides.gni")
import("//build/assembly/product_assembly_configuration.gni")
import("//build/board.gni")
import("//build/images/args.gni")
import("//build/images/custom_signing.gni")
import("//build/images/vboot/vboot.gni")

assert(current_toolchain == default_toolchain,
       "//build/images/* are only valid in the Fuchsia toolchain")

if (has_board) {
  assert(board_information_for_assembly != false,
         "board_information_for_assembly must be defined for the build")
}

product_assembly_configuration("product_assembly_config") {
  platform = {
    feature_set_level = "bootstrap"
    build_type = "eng"
    storage = {
      filesystems = {
        image_name = "bringup"
        volume = "none"
      }
    }
  }

  # The bringup product can't specify anything in base/cache packages, as it
  # doesn't have an fvm with blobfs.
  product = {
  }
}

generated_images_config("images_config") {
  zbi = {
    name = "bringup"
  }
}

bringup_base = {
  testonly = true
  output_dir = root_build_dir
  generate_vbmeta = use_vbmeta

  if (custom_signing_script != "") {
    inputs = custom_signing_script_inputs
    generate_signed_zbi = true
  } else if (use_vboot) {
    inputs = vboot_action.inputs
    generate_signed_zbi = true
  }

  product_assembly_config_label = ":product_assembly_config"
  board_config = board_information_for_assembly
  use_bringup_platform_bundles_only = true

  include_component_id_index = true
  include_shell_commands = false

  cmdline_deps = [ "//build/input:bootfs" ]

  base_packages = []
  base_driver_packages = [
    "//:developer_base_driver_packages",
    "//:legacy_base_driver_packages",
  ]

  bootfs_labels = base_driver_packages + [
                    "//build/input:bootfs",
                    "//:developer_base_packages",
                  ]

  _ignored = {
    import("//build/dev.gni")
    import("//build/product.gni")
    all_empty = true
    if (dev_system_image_deps != []) {
      print("dev_system_image_deps not empty: ${dev_system_image_deps}")
      all_empty = false
    }
    if (product_system_image_deps != []) {
      print("product_system_image_deps not empty: ${product_system_image_deps}")
      all_empty = false
    }
    assert(all_empty)
  }
}

assembled_system("bringup") {
  forward_variables_from(bringup_base, "*")
  assembly_images_config_label = ":images_config"
  image_metadata_overrides = legacy_bringup_image_metadata_overrides
}
