# Copyright 2024 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Defines a WORKSPACE rule for generating SDK companion image targets."""

load("//fuchsia/workspace:utils.bzl", "fetch_cipd_contents")

def _fuchsia_products_repository_impl(ctx):
    if (bool(ctx.attr.cipd_bin) and bool(ctx.attr.ensure_file)) == bool(ctx.attr.metadata_file):
        fail("Either cipd_bin and ensure_file must be defined or metadata_file, but not both.")

    product_bundles_manifest = ctx.attr.metadata_file
    if ctx.attr.cipd_bin and ctx.attr.ensure_file:
        fetch_cipd_contents(ctx, ctx.attr.cipd_bin, ctx.attr.ensure_file)
        product_bundles_manifest = "product_bundles.json"

    product_bundles_metadata = json.decode(ctx.read(product_bundles_manifest))
    ctx.file("BUILD.bazel", """# DO NOT MODIFY.
# AUTOGENERATED BY `fuchsia_products_repository.bzl`.

load("@fuchsia_sdk//fuchsia:defs.bzl", "fuchsia_remote_product_bundle")

""" + "\n\n".join([
        """
fuchsia_remote_product_bundle(
    name = "%s",
    transfer_url = "%s",
    product_version = "%s",
    visibility = ["//visibility:public"],
)
""".strip() % (pb["name"], pb["transfer_manifest_url"], pb["product_version"])
        for pb in product_bundles_metadata
    ]))

fuchsia_products_repository = repository_rule(
    doc = """Initalizes targets for SDK companion images.

Example Usage:
```
# Initializing the repo:
load("@fuchsia_sdk//fuchsia:deps.bzl", "fuchsia_products_repository")

fuchsia_products_repository(
    name = "fuchsia_products",
    cipd_bin = "@cipd_tool//:cipd",
    ensure_file = "//manifests:product_bundles.ensure",
)

# Examining the generated targest:
#   $ bazel query '@fuchsia_products//... except attr("tags", "manual", @fuchsia_products//...)'

# Using the targets:
#   $ bazel run @fuchsia_products//:core.x64.emu -- --headless
#   $ bazel run @fuchsia_products//:core.vim3.flash
""",
    implementation = _fuchsia_products_repository_impl,
    attrs = {
        "cipd_bin": attr.label(
            doc = "The cipd binary that will be used to download the companion image metadata.",
        ),
        "ensure_file": attr.label(
            doc = "A cipd ensure file to use to download the companion image metadata.",
        ),
        "metadata_file": attr.label(
            doc = "A label referencing product_bundles.json.",
            allow_single_file = True,
        ),
    },
)
