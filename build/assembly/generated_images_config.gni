# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Generates an Images Config. See the specification here:
#   https://fuchsia.googlesource.com/fuchsia/+/refs/heads/main/src/developer/ffx/plugins/assembly/#images-config
#
# Parameters:
#
#   zbi (required)
#     [struct] Arguments for generating a ZBI.
#     {
#       name (required)
#         [string] The name to give the ZBI in the out directory.
#         Typically: fuchsia, recovery, etc.
#     }
#
#   fvm (optional)
#     [struct] Arguments for generating optional FVMs.
#     {
#
#       reserved
#         {
#           slices (required)
#             [int] The number of slices to reserve in the FVM.
#         }
#     }
#
#   fxfs (optional)
#     [struct] Arguments for generating optional Fxfs images containing the base system packages.
#     {
#     }
#
template("generated_images_config") {
  not_needed(invoker,
             [
               "fxfs",
               "vbmeta",
             ])
  product_output_path = "$target_out_dir/${target_name}_product.json"

  # ZBI
  assert(defined(invoker.zbi), "Need to define zbi")
  invoker_zbi = invoker.zbi
  assert(defined(invoker_zbi.name), "Need to define zbi.name")

  generated_file(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                             "deps",
                           ])

    outputs = [ product_output_path ]
    output_conversion = "json"

    # Pull out the blobfs and reserved sections.
    if (defined(invoker.fvm)) {
      _invoker_fvm = invoker.fvm
      not_needed([ "_invoker_fvm" ])
      if (defined(_invoker_fvm.reserved)) {
        _invoker_fvm_reserved = _invoker_fvm.reserved
      }
      if (defined(_invoker_fvm.blobfs)) {
        _invoker_fvm_blobfs = _invoker_fvm.blobfs
      }
    }

    contents = {
      image_name = invoker_zbi.name
      format_data_on_corruption = false
      if (defined(invoker.fvm)) {
        volume = {
          fvm = {
            data = {
            }
            blob = {
              if (defined(_invoker_fvm_blobfs) &&
                  defined(_invoker_fvm_blobfs.layout)) {
                blob_layout = _invoker_fvm_blobfs.layout
              }
            }
            if (defined(_invoker_fvm_reserved)) {
              reserved = {
                reserved_bytes = _invoker_fvm_reserved.slices
              }
            }
          }
        }
      } else if (defined(invoker.fxfs)) {
        volume = "fxfs"
      } else {
        volume = "none"
      }
    }
  }
}
