# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bazel/bazel_action.gni")
import("//build/bazel/drivers/verify_driver_package.gni")
import("//build/packages/prebuilt_package.gni")

# Wraps a `fuchsia_package()` in a `BUILD.bazel` file.
# Use this template to make a `fuchsia_package()` target in a `BUILD.bazel`
# file be available in the GN build. Depending on the GN target will ensure
# that the corresponding Bazel target is built.
#
# Example:
#   BUILD.gn:
#     bazel_fuchsia_package("pkg") {
#       bazel_target = "//bar:foo"
#       package_name = "example_package"
#     }
#
# Args:
#   bazel_target: (required)
#     Bazel target to wrap.
#     This target should be a `fuchsia_package()` target.
#
#   package_name: (required)
#     The `package_name` of the wrapped `fuchsia_package`.
#
#   bazel_inputs: (optional)
#     List of GN labels to bazel_input_xxx() targets required by the
#     bazel_target.
#     Type: list of strings (GN labels)
#
#   gn_driver_package_for_verification: (optional)
#     A GN label which this driver will be checked against. If this is provided,
#     a verify_driver_package target will be created. If not, the driver will
#     not have any verification.
#     Type: GN Label
#
#   deps:
#   testonly:
#   visibility:
#     Usual GN meaning.
template("bazel_driver_package") {
  assert(defined(invoker.bazel_target), "bazel_target must be defined")
  assert(defined(invoker.package_name), "package_name must be defined")
  bazel_target = invoker.bazel_target
  package_name = invoker.package_name

  bazel_build_target = "$target_name.bazel_build"
  bazel_action(bazel_build_target) {
    forward_variables_from(invoker,
                           [
                             "bazel_inputs",
                             "deps",
                             "metadata",
                             "testonly",
                             "visibility",
                           ])
    command = "build"
    bazel_targets = [ bazel_target + "_fuchsia_package" ]
    copy_outputs = [
      {
        bazel = "{{BAZEL_TARGET_OUT_DIR}}/{{BAZEL_TARGET_NAME}}_pkg/package_manifest.json"
        ninja = "$package_name/package_manifest.json"
      },
      {
        bazel = "{{BAZEL_TARGET_OUT_DIR}}/$package_name.far"
        ninja = "$package_name.far"
      },
    ]
  }

  if (defined(invoker.gn_driver_package_for_verification)) {
    verify_against_gn = true

    # Rule to verify that the GN built driver is identical to the Bazel built driver.
    verify_target_name = "$target_name.verify_driver_package"
    verify_driver_package(verify_target_name) {
      gn_driver_package = invoker.gn_driver_package_for_verification
      bazel_driver_package_target = bazel_target + "_fuchsia_package"
      blobs_to_ignore = [
        # These libraries are getting pulled in transitively in the Bazel SDK. We need
        # to figure out why they are included an not include them
        "lib/libasync-default.so",
        "lib/libsyslog.so",
        "lib/libbackend_fuchsia_globals.so",
        "lib/libtrace-engine.so",
      ]
    }
  } else {
    verify_against_gn = false
  }

  # From the perspective of GN/Ninja, this package is a prebuilt
  # even though we just built it ourselves.
  prebuilt_package(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                             "visibility",
                           ])
    package_name = package_name
    archive = "$target_out_dir/$package_name.far"
    if (!defined(deps)) {
      deps = []
    }

    deps += [ ":$bazel_build_target" ]

    if (verify_against_gn) {
      deps += [ ":$verify_target_name" ]
    }
  }
}
