# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# These rules aggregate license information for all the GN-built bazel input resources
# into a licenses SPDX file to be used in bazel build too.
#
# The SPDX file is a bazel input resource as well.

import("//build/bazel/bazel_inputs.gni")
import("//build/bazel/legacy_ninja_build_outputs.gni")
import("//build/licenses/generated_licenses_spdx.gni")
import("//build/security.gni")
import("//tools/check-licenses/build/license_data.gni")

declare_args() {
  # Deprecated. No-op.
  # TODO(fxb/132725): Remove once unused downstream.
  generate_legacy_ninja_build_outputs_licenses_spdx = false

  # Deprecated. No-op.
  # TODO(fxb/132725): Remove once unused downstream.
  generate_legacy_ninja_build_outputs_licenses_spdx_from_metadata = true
}

# TODO(fxb/117740): We only need to cover bazel inputs that end up in the product,
# e.g. not tests or build tools. This can be achieved by adding metadata to
# the bazel inputs list (i.e. converting it into some dictionary) or by
# splitting into more granular lists.

_excluded_bazel_inputs = [
  # Remove a potential circular dependency on the spdx bazel_input_resource itself.
  "//build/bazel/licenses:legacy_ninja_build_outputs_licenses_spdx",

  # See fxb/126949#c15. Zedboot is only used in eng builds and is testonly, so can't
  # be used in license calculations.
  "//build/images/zedboot:zedboot.bazel_legacy_aib",

  # Bringup is testonly too.
  "//build/images/bringup:bringup.bazel_legacy_aib",

  # This is only used for `//tools/devshell:fx_publish_test`.
  "//build/images/updates/tests:fx_publish_test.gn_assembly.bazel_legacy_aib",
]

# Remove all non-user platform aibs
_excluded_bazel_inputs += eng_platform_aib_labels
_excluded_bazel_inputs += user_platform_aib_labels
_excluded_bazel_inputs -= user_platform_aib_labels

if (fuchsia_zbi_testonly) {
  # Remove fuchsia_zbi_testonly=true targets. See fxb/126949#c18 for why that is ok.
  _excluded_bazel_inputs +=
      [ "//build/images/fuchsia:fuchsia.bazel_legacy_aib" ]
}

group("all_bazel_inputs") {
  deps = gn_labels_for_bazel_inputs + extra_gn_labels_for_bazel_inputs

  deps += _excluded_bazel_inputs
  deps -= _excluded_bazel_inputs

  metadata = {
    # Prevent packages from leaking into the universe packages list in
    # //build/images/updates:universe_packages.list which uses
    # generate_package_metadata()
    package_names_barrier = []
  }
}

generated_licenses_spdx("all_bazel_inputs_licenses_spdx") {
  target = ":all_bazel_inputs"
  spdx_root_package_name = "Fuchsia"
  output = "${target_out_dir}/all_bazel_inputs_licenses.spdx.json"

  debug_hints = true

  # Current Bazel inputs customers don't need host tool licenses.
  # TODO(132725): Revisit once each individual input has its own SPDX.
  # We can then derive value based on whether the input target's toolchain.
  include_host_tools = false

  # TODO(132725): Remove once all remaining errors are sorted out.
  ignore_collection_errors = true
}

bazel_input_resource("legacy_ninja_build_outputs_licenses_spdx") {
  deps = [ ":all_bazel_inputs_licenses_spdx" ]
  sources = get_target_outputs(":all_bazel_inputs_licenses_spdx")
  outputs = [ "legacy_ninja_build_outputs_licenses.spdx.json" ]
}
