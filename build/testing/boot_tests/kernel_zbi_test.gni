# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/assembly/assembled_system.gni")
import("//build/board.gni")
import("//build/images/args.gni")
import("//build/product.gni")
import("//build/testing/boot_tests/zbi_test.gni")
import("//src/storage/fshost/generated_fshost_config.gni")

declare_args() {
  # Defines the default value of `kernel_zbi_test()` template `generate_cuckoo` parameters.
  # When true, all instances of `kernel_zbi_tests()` will default to generating a `cuckoo_zbi_test()`
  # which is a full system image generated for exfiltrating instrumentation data from a target system.
  generate_cuckoo_tests = false
}

cuckoo_kernel_zbi_test_params = {
  # List of assembly input groups that the kernel cuckoo zbi will use. Each one may provide
  # packages, core realm shards, etc.
  input_groups = [
    "bootstrap",
    "legacy",
    "network",
    "debug",
    "test",
  ]
}

template("_cuckoo_kernel_zbi_test") {
  assert(current_toolchain == default_toolchain)
  assert(defined(invoker.kernel_zbi))

  target_environments = [ emu_env ]
  if (defined(invoker.environments)) {
    target_environments = invoker.environments
  }

  if (defined(invoker.disabled) && invoker.disabled) {
    target_environments = []
  }

  # Generate a group as the main target, that will contain the system
  # and the target test.
  cuckoo_target_name = "${target_name}.assembled_system"
  label_for_images = get_label_info(":$cuckoo_target_name",
                                    "label_no_toolchain") + ".image_assembler"
  label_for_images_with_toolchain =
      get_label_info(label_for_images, "label_with_toolchain")

  # This creates the target test to run against the cuckoo images, the purpose of
  # this test is to trigger coverage collection.
  stub_test_name = "${target_name}.test"
  fuchsia_unittest_package(stub_test_name) {
    deps = [
      "//src/sys/early_boot_instrumentation/test:early-boot-collector-stub",
    ]
    test_specs = {
      image_overrides = {
        zbi = label_for_images_with_toolchain
        if (use_vbmeta) {
          vbmeta = label_for_images_with_toolchain
        }
        if (fxfs_blob) {
          fxfs = label_for_images_with_toolchain
        } else {
          fvm = label_for_images_with_toolchain
        }
      }
      environments = target_environments
      isolated = true
    }
  }

  # Generate the assembled system with the provided kernel_zbi.
  assembly_kernel_zbi = invoker.kernel_zbi
  assembly_kernel_image_name = get_label_info(assembly_kernel_zbi, "name")
  if (defined(invoker.kernel_image_name)) {
    assembly_kernel_image_name = invoker.kernel_image_name
  }

  assembly_input = {
    testonly = true
    namespace = cuckoo_target_name
    image_name = "fuchsia"
    kernel_zbi = assembly_kernel_zbi
    kernel_image_name = assembly_kernel_image_name
    bootfs_labels = board_bootfs_labels
    base_packages =
        board_package_labels + board_driver_package_labels + [
          # This package is needed to provide a fake intl_services
          # so that snapshot won't time out trying to collect
          # locale and timezone annotations.
          "//src/testing/fidl/intl_property_manager:fake_intl_services_package",
          ":$stub_test_name",
        ]
    cmdline_deps = []
    system_image_deps = board_system_image_deps
    core_realm_definition = "//build/testing:cuckoo-core-realm"
    board_config_label = board_configuration_label
    allow_eng_platform_bundle_use = true

    if (fxfs_blob) {
      product_assembly_config_label =
          "//build/testing:cuckoo-product-configuration"
      generate_fxfs = true
    } else {
      if (data_filesystem_format == "fxfs") {
        product_assembly_config_label =
            "//build/testing:cuckoo-product-configuration-fxfs"
      } else {
        product_assembly_config_label =
            "//build/testing:cuckoo-product-configuration-minfs"
      }
      generate_fvm = true
      generate_fvm_fastboot = generate_fvm && assembly_generate_fvm_fastboot
      generate_fvm_nand = generate_fvm && assembly_generate_fvm_nand
    }

    generate_vbmeta = use_vbmeta
  }

  foreach(input_group, cuckoo_kernel_zbi_test_params.input_groups) {
    input_group_label = "//bundles/assembly_input_groups:${input_group}"
    assembly_input.base_packages += [ "${input_group_label}.base_packages" ]
    assembly_input.bootfs_labels += [ "${input_group_label}.bootfs_labels" ]
    assembly_input.cmdline_deps += [ "${input_group_label}.cmdline_deps" ]
    assembly_input.system_image_deps +=
        [ "${input_group_label}.system_image_deps" ]
  }

  assembled_system(cuckoo_target_name) {
    forward_variables_from(assembly_input, "*")
  }

  group(target_name) {
    testonly = true
    deps = [
      ":$cuckoo_target_name",
      ":$stub_test_name",
    ]
  }
}

# Composes a bootable kernel zbi test. That is, a zircon kernel that will launch
# a custom user space process instead of component manager.
#
# Parameters
#
#   * generate_cuckoo
#     - Optional: When set a cuckoo image will be generated for the `kernel_zbi_test()`.
#       A cuckoo image consist on three targets:
#        1. `$target_name.cuckoo.test` a  `fuchsia_unittest_package()` containing a single
#             stub test component.
#        2. `$target_name.cuckoo.assembled_system` am `assembled_system()` that contains (1)
#             and boots the zbi from `kernel_zbi_test()` and proceed to boot a fully fuchsia system.
#        3. `$target_name.cuckoo` which is a group containing (1) and (2).
#       A cuckoo image is commonly used for exfiltrating early boot data from a device.
#     - Type: boolean
#     - Default: `kernel_zbi_test_generates_cuckoo`
#
#   * disabled
#     - Optional:  When true, the generated images and the test tied to them are
#       treated as disabled, that is, they will not be automatically executed.
#     - Type: boolean
#     - Default: false
#
# Additionally supports all parameters from `zbi_test()`.
template("kernel_zbi_test") {
  generate_cuckoo = generate_cuckoo_tests
  if (defined(invoker.generate_cuckoo)) {
    generate_cuckoo = invoker.generate_cuckoo
  }

  main_target_name = target_name
  cuckoo_deps = []

  if (generate_cuckoo) {
    cuckoo_target_name = "${target_name}.cuckoo"
    if (default_toolchain == current_toolchain) {
      _cuckoo_kernel_zbi_test(cuckoo_target_name) {
        forward_variables_from(invoker, [ "disabled" ])
        kernel_zbi = ":$main_target_name.zbi"
        kernel_image_name = "$main_target_name"
      }
    }
    cuckoo_deps = [ ":$cuckoo_target_name($default_toolchain)" ]
  }

  zbi_test(main_target_name) {
    assert(current_cpu != "")
    deps = []
    data_deps = []
    forward_variables_from(invoker, "*", [ "generate_cuckoo" ])
    data_deps += cuckoo_deps
    deps += [ "//zircon/kernel" ]
  }
}
