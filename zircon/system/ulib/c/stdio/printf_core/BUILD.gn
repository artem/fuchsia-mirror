# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("../../libc.gni")

llvm_libc_source_set("printf_core") {
  public = [ "printf_main.h" ]
  sources = [ "printf_main.cpp" ]
  functions = []
  deps = [
    ":converter",
    ":parser",
    ":writer",
  ]
}

# These aren't really functions, but they follow the pattern of the actual libc
# function implementations in each having a corresponding header file and test
# file in the usual places.

llvm_libc_source_set("converter") {
  visibility = [ ":*" ]

  defines = [
    # Never support %n.
    "LIBC_COPT_PRINTF_DISABLE_WRITE_INT",
  ]

  # Don't support FP types in minimal environments.
  if (is_kernel || toolchain_environment == "user.basic") {
    defines += [ "LIBC_COPT_PRINTF_DISABLE_FLOAT" ]
  }

  functions = [ "converter" ]

  deps = [ ":writer" ]
}

llvm_libc_source_set("parser") {
  visibility = [ ":*" ]

  # TODO(mcgrathr): soft transition for llvm-libc roll that removed parser.cc
  # The old parser.h was 148 lines long. The new one is much longer.
  # Use that to detect pre-roll vs post-roll builds.
  # This hack can be removed once the roll lands.
  _parser_lines =
      read_file("$llvm_libc/src/stdio/printf_core/parser.h", "list lines")
  _count = 0
  foreach(line, _parser_lines) {
    _count = _count + 1
  }
  if (_count == 148) {
    functions = [ "parser" ]

    # TODO(fxbug.dev/62780): tests need full libc framework
    no_test_functions = [ "parser" ]
  } else {
    public = [ "parser.h" ]
    functions = []
  }
}

llvm_libc_source_set("writer") {
  functions = [ "writer" ]
}

source_set("wrapper") {
  public = [ "wrapper.h" ]
  public_configs = [ "../..:llvm-libc.config" ]
  deps = [ ":printf_core" ]
}
