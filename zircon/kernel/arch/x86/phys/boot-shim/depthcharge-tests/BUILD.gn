# Copyright 2022 The Fuchsia Authors
#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

import("//build/testing/boot_tests/zbi_test.gni")
import("//build/zbi/kernel_cmdline.gni")
import("//build/zbi/zbi.gni")
import("//build/zbi/zbi_input.gni")
import("//zircon/kernel/phys/qemu.gni")
import("//zircon/kernel/phys/zbi_executable.gni")

zbi_executable("proper-zbi-test") {
  visibility = [ "./*" ]
  testonly = true
  sources = [ "proper-zbi-test.cc" ]
  deps = [
    "//src/lib/zbitl",
    "//zircon/kernel/phys/test:zbi-test-main",
  ]
  include_dirs = [ "//zircon/kernel/phys/test" ]
}

# Fake depthcharge ZBI item that is prepended, making the ZBI not bootable.
zbi_input("depthcharge-bootloader-entry") {
  type = "bootloader_file"
  args = [
    "--entry=$0x03foobar",
    "--entry=$0x04foozbarz",
  ]
}

# ZBI Payload.
kernel_cmdline("depthcharge-zbi-cmdline") {
  testonly = true
  visibility = [ "./*" ]
  args = [ "depthcharge.payload=4321" ]
}

zbi_test("depthcharge-improper-zbi-test") {
  foreach(qemu, qemu_boot_formats) {
    if (qemu.name == "multiboot") {
      qemu_kernel = "..:depthcharge-multiboot-shim(${qemu.environment})"
      forward_variables_from(qemu, [ "timeout" ])
    }
  }
  assert(defined(qemu_kernel), "multiboot not in $qemu_boot_formats")

  # This prevents the zbi tool from forcing the zbi to be bootable,
  # which would reorder the zbi items, hence preventing us from testing
  # the boot quirks of the depthcharge bootloader.
  cpu = ""
  device_types = [ "QEMU" ]

  # Order matters here!
  # NOSORT
  deps = [
    ":depthcharge-bootloader-entry",
    ":proper-zbi-test",
    ":depthcharge-zbi-cmdline",
  ]
}

group("tests") {
  testonly = true
  deps = [ ":depthcharge-improper-zbi-test" ]
}
