# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")

group("conformance") {
  testonly = true
  deps = [
    ":mouse-conformance-test",
    ":touch-conformance-test",
  ]
}

source_set("conformance-test-base") {
  testonly = true
  sources = [
    "conformance-test-base.cc",
    "conformance-test-base.h",
  ]
  output_name = "conformance-test-base"
  public_deps = [
    "//sdk/fidl/fuchsia.testing.harness:fuchsia.testing.harness_hlcpp",
    "//sdk/fidl/fuchsia.ui.test.context:fuchsia.ui.test.context_hlcpp",
    "//sdk/lib/sys/cpp",
    "//src/lib/testing/loop_fixture",
    "//third_party/googletest:gtest",
  ]
}

############# TOUCH CONFORMANCE TEST #############
executable("touch-validator-bin") {
  testonly = true
  sources = [ "touch-validator.cc" ]
  output_name = "touch-validator"
  deps = [
    ":conformance-test-base",
    "//sdk/fidl/fuchsia.ui.composition:fuchsia.ui.composition_hlcpp",
    "//sdk/fidl/fuchsia.ui.display.singleton:fuchsia.ui.display.singleton_hlcpp",
    "//sdk/fidl/fuchsia.ui.input3:fuchsia.ui.input3_hlcpp",
    "//sdk/fidl/fuchsia.ui.pointer:fuchsia.ui.pointer_hlcpp",
    "//sdk/fidl/fuchsia.ui.test.conformance:fuchsia.ui.test.conformance_hlcpp",
    "//sdk/fidl/fuchsia.ui.test.input:fuchsia.ui.test.input_hlcpp",
    "//sdk/fidl/fuchsia.ui.test.scene:fuchsia.ui.test.scene_hlcpp",
    "//sdk/lib/syslog/cpp",
    "//sdk/lib/ui/scenic/cpp",
    "//src/lib/fxl/test:gtest_main",
  ]
}

fuchsia_component("touch-validator") {
  testonly = true
  manifest = "meta/touch-validator.cml"
  deps = [ ":touch-validator-bin" ]
}

fuchsia_package("touch-test-suite") {
  package_name = "touch-test-suite"
  testonly = true
  deps = [
    ":touch-validator",
    "//src/ui/testing/puppet:ui-puppet-component",
  ]
}

fuchsia_test_component("touch-conformance-test-component") {
  testonly = true
  component_name = "touch-conformance-test"
  manifest = "meta/touch-conformance-test.cml"
  test_type = "system"
}

fuchsia_test_package("touch-conformance-test") {
  test_components = [ ":touch-conformance-test-component" ]
  subpackages = [
    ":touch-test-suite",
    "//src/ui/testing/context:ui-context-factory",
  ]
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
    environments = [
      {
        dimensions = {
          # Ensure the device has Vulkan.
          device_type = "AEMU"
        }
      },
    ]
  }
}

############# MOUSE CONFORMANCE TEST #############
executable("mouse-validator-bin") {
  testonly = true
  sources = [ "mouse-validator.cc" ]
  output_name = "mouse-validator"
  deps = [
    ":conformance-test-base",
    "//sdk/fidl/fuchsia.ui.composition:fuchsia.ui.composition_hlcpp",
    "//sdk/fidl/fuchsia.ui.display.singleton:fuchsia.ui.display.singleton_hlcpp",
    "//sdk/fidl/fuchsia.ui.input3:fuchsia.ui.input3_hlcpp",
    "//sdk/fidl/fuchsia.ui.test.conformance:fuchsia.ui.test.conformance_hlcpp",
    "//sdk/fidl/fuchsia.ui.test.input:fuchsia.ui.test.input_hlcpp",
    "//sdk/fidl/fuchsia.ui.test.scene:fuchsia.ui.test.scene_hlcpp",
    "//sdk/lib/syslog/cpp",
    "//sdk/lib/ui/scenic/cpp",
    "//src/lib/fxl/test:gtest_main",
  ]
}

fuchsia_component("mouse-validator") {
  testonly = true
  manifest = "meta/mouse-validator.cml"
  deps = [ ":mouse-validator-bin" ]
}

fuchsia_package("mouse-test-suite") {
  package_name = "mouse-test-suite"
  testonly = true
  deps = [
    ":mouse-validator",
    "//src/ui/testing/puppet:ui-puppet-component",
  ]
}

fuchsia_test_component("mouse-conformance-test-component") {
  testonly = true
  component_name = "mouse-conformance-test"
  manifest = "meta/mouse-conformance-test.cml"
  test_type = "system"
}

fuchsia_test_package("mouse-conformance-test") {
  test_components = [ ":mouse-conformance-test-component" ]
  subpackages = [
    ":mouse-test-suite",
    "//src/ui/testing/context:ui-context-factory",
  ]
  test_specs = {
    log_settings = {
      max_severity = "ERROR"
    }
    environments = [
      {
        dimensions = {
          # Ensure the device has Vulkan.
          device_type = "AEMU"
        }
      },
    ]
  }
}
