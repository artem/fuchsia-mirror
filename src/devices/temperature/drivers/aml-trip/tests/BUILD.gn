# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/drivers.gni")
import("//build/test.gni")

executable("aml-trip-test-bin") {
  configs += [ "//build/config:all_source" ]
  testonly = true
  sources = [
    "../aml-trip-device.cc",
    "../aml-trip.cc",
    "../util.cc",
    "aml-trip-test.cc",
  ]
  deps = [
    "//sdk/fidl/fuchsia.driver.compat:fuchsia.driver.compat_cpp",
    "//sdk/fidl/fuchsia.hardware.clock:fuchsia.hardware.clock_cpp",
    "//sdk/fidl/fuchsia.hardware.platform.bus:fuchsia.hardware.platform.bus_cpp",
    "//sdk/fidl/fuchsia.hardware.platform.device:fuchsia.hardware.platform.device_cpp",
    "//sdk/fidl/fuchsia.hardware.trippoint:fuchsia.hardware.trippoint_bindlib_cpp",
    "//sdk/fidl/fuchsia.hardware.trippoint:fuchsia.hardware.trippoint_cpp",
    "//sdk/lib/async_patterns/testing/cpp",
    "//sdk/lib/component/outgoing/cpp",
    "//sdk/lib/driver/compat/cpp",
    "//sdk/lib/driver/logging/cpp:cpp",
    "//sdk/lib/driver/runtime/testing/cpp",
    "//sdk/lib/driver/testing/cpp:cpp",
    "//src/devices/bus/lib/device-protocol-pdev",
    "//src/devices/bus/testing/fake-pdev",
    "//src/devices/lib/amlogic",
    "//src/devices/lib/mmio",
    "//src/devices/testing/fake-mmio-reg",
    "//src/devices/testing/mock-mmio-reg",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/fbl",
    "//zircon/system/ulib/fzl",
    "//zircon/system/ulib/hwreg",
    "//zircon/system/ulib/pretty",
    "//zircon/system/ulib/sync",
    "//zircon/system/ulib/zircon-internal",
    "//zircon/system/ulib/zx",
    "//zircon/system/ulib/zxtest",
  ]
}

fuchsia_unittest_package("aml-trip-test-package") {
  manifest = "aml-trip-test.cml"
  package_name = "aml-trip-test-package"
  deps = [ ":aml-trip-test-bin" ]
  test_specs = {
    environments = basic_envs
    log_settings = {
      max_severity = "ERROR"
    }
  }
}
