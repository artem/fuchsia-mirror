# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bind/bind.gni")
import("//build/components.gni")
import("//build/drivers.gni")
import("//build/test.gni")

driver_bind_rules("sdmmc-bind") {
  rules = "sdmmc.bind"
  bind_output = "sdmmc.bindbc"
  tests = "sdmmc-bind-test.json"
  deps = [
    "//sdk/fidl/fuchsia.hardware.sdmmc:fuchsia.hardware.sdmmc_bindlib",
    "//src/devices/bind/fuchsia.sdmmc",
  ]
}

common_deps = [
  ":sdmmc-bind",
  ":sdmmc-config",
  "//sdk/banjo/fuchsia.hardware.block.partition:fuchsia.hardware.block.partition_banjo_cpp",
  "//sdk/banjo/fuchsia.hardware.sdio:fuchsia.hardware.sdio_banjo_cpp",
  "//sdk/banjo/fuchsia.hardware.sdmmc:fuchsia.hardware.sdmmc_banjo_cpp",
  "//sdk/fidl/fuchsia.hardware.block.driver:fuchsia.hardware.block.driver_banjo_cpp",
  "//sdk/fidl/fuchsia.hardware.power:fuchsia.hardware.power_cpp",
  "//sdk/fidl/fuchsia.hardware.rpmb:fuchsia.hardware.rpmb_cpp",
  "//sdk/fidl/fuchsia.hardware.sdio:fuchsia.hardware.sdio_cpp",
  "//sdk/fidl/fuchsia.hardware.sdmmc:fuchsia.hardware.sdmmc_cpp",
  "//sdk/fidl/fuchsia.io:fuchsia.io_cpp",
  "//sdk/fidl/fuchsia.power.broker:fuchsia.power.broker_cpp",
  "//sdk/fidl/fuchsia.power.system:fuchsia.power.system_cpp",
  "//sdk/lib/component/outgoing/cpp",
  "//sdk/lib/driver/compat/cpp",
  "//sdk/lib/driver/component/cpp:cpp",
  "//sdk/lib/driver/power/cpp",
  "//sdk/lib/driver/runtime:driver_runtime",
  "//sdk/lib/driver/runtime:driver_runtime_cpp",
  "//sdk/lib/inspect/component/cpp",
  "//src/devices/bin/driver_runtime",
  "//src/devices/block/lib/common",
  "//src/devices/block/lib/sdio",
  "//src/devices/block/lib/sdmmc",
  "//src/devices/lib/dev-operation",
  "//zircon/system/ulib/async-loop:async-loop-cpp",
  "//zircon/system/ulib/async-loop:async-loop-default",
  "//zircon/system/ulib/fbl",
  "//zircon/system/ulib/fzl",
  "//zircon/system/ulib/inspect",
  "//zircon/system/ulib/pretty",
  "//zircon/system/ulib/sync",
  "//zircon/system/ulib/sync:sync-cpp",
  "//zircon/system/ulib/trace",
  "//zircon/system/ulib/zircon-internal",
  "//zircon/system/ulib/zx",
  "//zircon/third_party/ulib/safemath",
]

fuchsia_driver("sdmmc-driver") {
  output_name = "sdmmc"
  configs += [
    "//build/config:all_source",
    "//build/config/fuchsia:enable_zircon_asserts",
  ]
  sources = [
    "driver-export.cc",
    "mmc.cc",
    "sd.cc",
    "sdio-controller-device.cc",
    "sdio-function-device.cc",
    "sdmmc-block-device.cc",
    "sdmmc-device.cc",
    "sdmmc-partition-device.cc",
    "sdmmc-root-device.cc",
    "sdmmc-rpmb-device.cc",
  ]
  deps = common_deps
}

fuchsia_component_manifest("sdmmc-manifest") {
  component_name = "sdmmc"
  manifest = "meta/sdmmc.cml"
}

fuchsia_driver_component("sdmmc") {
  visibility = [ ":*" ]
  cm_label = ":sdmmc-manifest"
  deps = [ ":sdmmc-driver" ]
  info = "sdmmc-info.json"
}

fuchsia_structured_config_cpp_elf_lib("sdmmc-config") {
  cm_label = ":sdmmc-manifest"
}

fuchsia_structured_config_values("sc-values") {
  cm_label = ":sdmmc-manifest"
  values = {
    enable_suspend = false
  }
}

fuchsia_driver_package("package") {
  package_name = "sdmmc"
  driver_components = [ ":sdmmc" ]
  deps = [ ":sc-values" ]
}

test("sdmmc-block-test-bin") {
  configs += [ "//build/config:all_source" ]
  output_name = "sdmmc-block-test"
  sources = [
    "fake-sdmmc-device.cc",
    "mmc.cc",
    "sd.cc",
    "sdio-controller-device.cc",
    "sdio-function-device.cc",
    "sdmmc-block-device-test.cc",
    "sdmmc-block-device.cc",
    "sdmmc-device.cc",
    "sdmmc-partition-device.cc",
    "sdmmc-root-device.cc",
    "sdmmc-rpmb-device.cc",
  ]
  deps = common_deps + [
           "//sdk/fidl/fuchsia.hardware.block:fuchsia.hardware.block_cpp",
           "//sdk/lib/async_patterns/testing/cpp",
           "//sdk/lib/driver/testing/cpp:cpp",
           "//sdk/lib/inspect/testing/cpp:zxtest",
           "//zircon/system/ulib/zxtest",
         ]
}

fuchsia_unittest_package("sdmmc-block-test") {
  deps = [ ":sdmmc-block-test-bin" ]
  test_specs = {
    environments = basic_envs
    log_settings = {
      max_severity = "ERROR"
    }
  }
}

test("sdio-controller-test-bin") {
  configs += [ "//build/config:all_source" ]
  output_name = "sdio-controller-test"
  sources = [
    "fake-sdmmc-device.cc",
    "mmc.cc",
    "sd.cc",
    "sdio-controller-device-test.cc",
    "sdio-controller-device.cc",
    "sdio-function-device.cc",
    "sdmmc-block-device.cc",
    "sdmmc-device.cc",
    "sdmmc-partition-device.cc",
    "sdmmc-root-device.cc",
    "sdmmc-rpmb-device.cc",
  ]
  deps = common_deps + [
           "//sdk/fidl/fuchsia.hardware.block:fuchsia.hardware.block_cpp",
           "//sdk/lib/async_patterns/testing/cpp",
           "//sdk/lib/driver/testing/cpp:cpp",
           "//sdk/lib/inspect/testing/cpp:zxtest",
           "//zircon/system/ulib/zxtest",
         ]
}

fuchsia_unittest_package("sdio-controller-test") {
  deps = [ ":sdio-controller-test-bin" ]
  test_specs = {
    environments = basic_envs
    log_settings = {
      max_severity = "ERROR"
    }
  }
}

group("tests") {
  testonly = true
  deps = [
    ":sdio-controller-test",
    ":sdmmc-bind_test",
    ":sdmmc-block-test",
  ]
}
