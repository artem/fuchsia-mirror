// Copyright 2020 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

composite aml_sdmmc;

using fuchsia.amlogic.platform;
using fuchsia.gpio;
using fuchsia.hardware.clock;
using fuchsia.hardware.gpio;
using fuchsia.platform;
using fuchsia.pwm;
using fuchsia.devicetree;

primary node "pdev" {
  if fuchsia.BIND_PLATFORM_DEV_VID == fuchsia.platform.BIND_PLATFORM_DEV_VID.GENERIC {
    fuchsia.BIND_PLATFORM_DEV_DID == fuchsia.platform.BIND_PLATFORM_DEV_DID.DEVICETREE;
    fuchsia.devicetree.FIRST_COMPATIBLE == "amlogic,meson-axg-mmc";
  } else {
    fuchsia.BIND_PROTOCOL == fuchsia.platform.BIND_PROTOCOL.DEVICE;
    fuchsia.BIND_PLATFORM_DEV_VID == fuchsia.amlogic.platform.BIND_PLATFORM_DEV_VID.AMLOGIC;
    fuchsia.BIND_PLATFORM_DEV_PID == fuchsia.platform.BIND_PLATFORM_DEV_PID.GENERIC;
    accept fuchsia.BIND_PLATFORM_DEV_DID {
      fuchsia.amlogic.platform.BIND_PLATFORM_DEV_DID.SDMMC_A,
      fuchsia.amlogic.platform.BIND_PLATFORM_DEV_DID.SDMMC_B,
      fuchsia.amlogic.platform.BIND_PLATFORM_DEV_DID.SDMMC_C,
    }
  }
}

optional node "gpio-reset" {
  fuchsia.hardware.gpio.Service == fuchsia.hardware.gpio.Service.ZirconTransport;
  fuchsia.gpio.FUNCTION == fuchsia.gpio.FUNCTION.SDMMC_RESET;
}

optional node "pwm" {
  fuchsia.BIND_INIT_STEP == fuchsia.pwm.BIND_INIT_STEP.PWM;
}

optional node "clock-gate" {
  fuchsia.hardware.clock.Service == fuchsia.hardware.clock.Service.ZirconTransport;
}

node "gpio-init" {
  fuchsia.BIND_INIT_STEP == fuchsia.gpio.BIND_INIT_STEP.GPIO;
}
