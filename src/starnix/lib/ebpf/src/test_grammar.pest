rules = { SOI ~
          ( ASM | MEMORY | RAW | ( RESULT | ERROR ) | IGNORED_SECTIONS | EOL )* ~
          EOI }

WHITESPACE = _{ " " }
_COMMENT   = _{ "#" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
EOL = _{ NEWLINE | _COMMENT }
SECTION_MARKER = _{ "-- " }

HEXPREFIX = _{ "0x" }
HEXSUFFIX = { ASCII_HEX_DIGIT+ }
HEXNUM = _{ HEXPREFIX ~ HEXSUFFIX }
DECNUM = @{ ASCII_DIGIT+ }
NUM = { HEXNUM | DECNUM }
SIGN = { "+" | "-" }
IMM = { SIGN? ~ NUM }
OFFSET = { SIGN ~ NUM }
EXIT = { "exit" }

REG_PREFIX = _{ "%r" }
REG_NUMBER = @{ ASCII_DIGIT{1, 2} }
REG = _{ REG_PREFIX ~ REG_NUMBER }
DEREF = { "[" ~ REG ~ OFFSET? ~ "]" }

BASE_BINARY_OP = @{ "add" | "sub" | "mul" | "div" | "or" | "and" | "lsh" | "rsh" | "mod" |
                    "xor" | "mov" | "arsh" }
BINARY_OP = @{ BASE_BINARY_OP ~ ( "32" )? }
UNARY_OP = @{ ( "neg" ~ ( "32" )? ) | "le16" | "le32" | "le64" | "be16" | "be32" | "be64" }

ALU_INSTRUCTION = { ( UNARY_OP ~ REG ) |
                    ( BINARY_OP  ~ REG ~ "," ~ (REG | IMM) ) }

BASE_ATOMIC_OP = @{ "add" | "and" | "or" | "xor" | "cmpxchg" | "xchg" }
ATOMIC_OP = @{ BASE_ATOMIC_OP ~ ( "32" )? }

FETCH = { "fetch" }
ATOMIC_INSTRUCTION = { "lock" ~ FETCH ? ~ ATOMIC_OP ~ DEREF ~ "," ~ REG }

STORE_REG_OP = @{ "stxb" | "stxh" | "stxw" | "stxdw" }
STORE_IMM_OP = @{ "stb" | "sth" | "stw" | "stdw" }
LOAD_OP = @{ "ldxb" | "ldxh" | "ldxw" | "ldxdw" }
LDDW_OP = @{ "lddw" }

MEM_INSTRUCTION = { ( STORE_REG_OP ~ DEREF ~ "," ~ REG ) |
                    ( STORE_IMM_OP ~ DEREF ~ "," ~ IMM ) |
                    ( LOAD_OP ~ REG ~ "," ~ DEREF ) |
                    ( LDDW_OP ~ REG ~ "," ~ IMM ) }

BASE_JMP_OP = @{ "jeq" | "jgt" | "jge" | "jlt" | "jle" | "jset" | "jne" | "jsgt" |
                 "jsge" | "jslt" | "jsle" }
JMP_OP = @{ BASE_JMP_OP ~ ( "32" )? }

JMP_CONDITIONAL = { JMP_OP ~ REG ~ "," ~ (REG | IMM) ~ "," ~ ( OFFSET | EXIT ) }
JMP = { "ja" ~ OFFSET }
CALL = { "call" ~ IMM }
JMP_INSTRUCTION = { JMP_CONDITIONAL |
                    JMP |
                    CALL |
                    EXIT }

ASM_INSTRUCTION = { (   ALU_INSTRUCTION |
                        MEM_INSTRUCTION |
                        JMP_INSTRUCTION |
                        ATOMIC_INSTRUCTION |
                        ""
                    ) ~ EOL }

ASM_INSTRUCTIONS = { ASM_INSTRUCTION+ }

ASM = _{ "-- asm" ~ EOL ~
         ASM_INSTRUCTIONS }

IGNORED_SECTION_MARKS = _{ "-- c" | "-- no register offset" | "-- no jit" }
IGNORED_SECTIONS = _{ EOL* ~ IGNORED_SECTION_MARKS ~ EOL ~
                      ((!(SECTION_MARKER | NEWLINE) ~ ANY)* ~ EOL)* }

MEMORY_DATA = { ASCII_HEX_DIGIT{2} }
MEMORY = { "-- mem" ~ EOL ~
           (MEMORY_DATA* ~ EOL)* }

RESULT = { "-- result" ~ EOL ~
           IMM ~  EOL }

ERROR = { ( "-- error pattern" | "-- error" ) ~ EOL ~
          (!NEWLINE ~ ANY)* ~ EOL }

RAW_VALUE = { ASCII_HEX_DIGIT{16} }
RAW_LINE = _{ "0x" ~ RAW_VALUE }
RAW = { "-- raw" ~ EOL ~
        (RAW_LINE ~  EOL)* }
