// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
{
    actions: [
        {
            type: "expect_pass",
            matchers: [
                "*",
            ],
        },
        {
            include: "//third_party/gvisor_syscall_tests/expects/netstack3/all.json5",
        },
        {
            type: "expect_pass",
            matchers: [
                // Tests that pass with starnix but fail when run against
                // fdio/netstack3 without starnix
                "AllTCPSockets/AllSocketPairTest.BasicSendmmsg/0",
                "AllTCPSockets/AllSocketPairTest.BasicSendmmsg/1",
                "AllTCPSockets/AllSocketPairTest.BasicSendmmsg/2",
                "AllTCPSockets/AllSocketPairTest.BasicSendmmsg/3",
                "AllTCPSockets/AllSocketPairTest.BasicSendmmsg/4",
                "AllTCPSockets/AllSocketPairTest.BasicSendmmsg/5",
                "AllTCPSockets/AllSocketPairTest.SendmmsgIsLimitedByMAXIOV/0",
                "AllTCPSockets/AllSocketPairTest.SendmmsgIsLimitedByMAXIOV/1",
                "AllTCPSockets/AllSocketPairTest.SendmmsgIsLimitedByMAXIOV/2",
                "AllTCPSockets/AllSocketPairTest.SendmmsgIsLimitedByMAXIOV/3",
                "AllTCPSockets/AllSocketPairTest.SendmmsgIsLimitedByMAXIOV/4",
                "AllTCPSockets/AllSocketPairTest.SendmmsgIsLimitedByMAXIOV/5",
                "AllTCPSockets/AllSocketPairTest.BasicRecvmmsg/0",
                "AllTCPSockets/AllSocketPairTest.BasicRecvmmsg/1",
                "AllTCPSockets/AllSocketPairTest.BasicRecvmmsg/2",
                "AllTCPSockets/AllSocketPairTest.BasicRecvmmsg/3",
                "AllTCPSockets/AllSocketPairTest.BasicRecvmmsg/4",
                "AllTCPSockets/AllSocketPairTest.BasicRecvmmsg/5",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsg10KB/0",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsg10KB/1",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsg10KB/2",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsg10KB/3",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsg10KB/4",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsg10KB/5",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsg16KB/0",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsg16KB/1",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsg16KB/2",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsg16KB/3",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsg16KB/4",
                "AllTCPSockets/AllSocketPairTest.SendmsgRecvmsg16KB/5",
                "AllTCPSockets/AllSocketPairTest.RecvmsgMsghdrFlagsCleared/0",
                "AllTCPSockets/AllSocketPairTest.RecvmsgMsghdrFlagsCleared/1",
                "AllTCPSockets/AllSocketPairTest.RecvmsgMsghdrFlagsCleared/2",
                "AllTCPSockets/AllSocketPairTest.RecvmsgMsghdrFlagsCleared/3",
                "AllTCPSockets/AllSocketPairTest.RecvmsgMsghdrFlagsCleared/4",
                "AllTCPSockets/AllSocketPairTest.RecvmsgMsghdrFlagsCleared/5",
                "AllTCPSockets/AllSocketPairTest.RecvmsgPeekMsghdrFlagsCleared/0",
                "AllTCPSockets/AllSocketPairTest.RecvmsgPeekMsghdrFlagsCleared/1",
                "AllTCPSockets/AllSocketPairTest.RecvmsgPeekMsghdrFlagsCleared/2",
                "AllTCPSockets/AllSocketPairTest.RecvmsgPeekMsghdrFlagsCleared/3",
                "AllTCPSockets/AllSocketPairTest.RecvmsgPeekMsghdrFlagsCleared/4",
                "AllTCPSockets/AllSocketPairTest.RecvmsgPeekMsghdrFlagsCleared/5",
                "AllTCPSockets/AllSocketPairTest.RecvmmsgInvalidTimeout/0",
                "AllTCPSockets/AllSocketPairTest.RecvmmsgInvalidTimeout/1",
                "AllTCPSockets/AllSocketPairTest.RecvmmsgInvalidTimeout/2",
                "AllTCPSockets/AllSocketPairTest.RecvmmsgInvalidTimeout/3",
                "AllTCPSockets/AllSocketPairTest.RecvmmsgInvalidTimeout/4",
                "AllTCPSockets/AllSocketPairTest.RecvmmsgInvalidTimeout/5",
                "AllTCPSockets/AllSocketPairTest.RecvmmsgTimeoutBeforeRecv/0",
                "AllTCPSockets/AllSocketPairTest.RecvmmsgTimeoutBeforeRecv/1",
                "AllTCPSockets/AllSocketPairTest.RecvmmsgTimeoutBeforeRecv/2",
                "AllTCPSockets/AllSocketPairTest.RecvmmsgTimeoutBeforeRecv/3",
                "AllTCPSockets/AllSocketPairTest.RecvmmsgTimeoutBeforeRecv/4",
                "AllTCPSockets/AllSocketPairTest.RecvmmsgTimeoutBeforeRecv/5",
                "AllTCPSockets/AllSocketPairTest.RecvWaitAll/0",
                "AllTCPSockets/AllSocketPairTest.RecvWaitAll/1",
                "AllTCPSockets/AllSocketPairTest.RecvWaitAll/2",
                "AllTCPSockets/AllSocketPairTest.RecvWaitAll/3",
                "AllTCPSockets/AllSocketPairTest.RecvWaitAll/4",
                "AllTCPSockets/AllSocketPairTest.RecvWaitAll/5",
                "AllTCPSockets/AllSocketPairTest.RecvWaitAllDontWait/0",
                "AllTCPSockets/AllSocketPairTest.RecvWaitAllDontWait/1",
                "AllTCPSockets/AllSocketPairTest.RecvWaitAllDontWait/2",
                "AllTCPSockets/AllSocketPairTest.RecvWaitAllDontWait/3",
                "AllTCPSockets/AllSocketPairTest.RecvWaitAllDontWait/4",
                "AllTCPSockets/AllSocketPairTest.RecvWaitAllDontWait/5",
                "AllTCPSockets/AllSocketPairTest.RecvTimeoutWaitAll/0",
                "AllTCPSockets/AllSocketPairTest.RecvTimeoutWaitAll/1",
                "AllTCPSockets/AllSocketPairTest.RecvTimeoutWaitAll/2",
                "AllTCPSockets/AllSocketPairTest.RecvTimeoutWaitAll/3",
                "AllTCPSockets/AllSocketPairTest.RecvTimeoutWaitAll/4",
                "AllTCPSockets/AllSocketPairTest.RecvTimeoutWaitAll/5",
                "AllUDPSockets/AllSocketPairTest.BasicSendmmsg/0",
                "AllUDPSockets/AllSocketPairTest.BasicSendmmsg/1",
                "AllUDPSockets/AllSocketPairTest.BasicSendmmsg/2",
                "AllUDPSockets/AllSocketPairTest.BasicSendmmsg/3",
                "AllUDPSockets/AllSocketPairTest.BasicSendmmsg/4",
                "AllUDPSockets/AllSocketPairTest.BasicSendmmsg/5",
                "AllUDPSockets/AllSocketPairTest.SendmmsgIsLimitedByMAXIOV/0",
                "AllUDPSockets/AllSocketPairTest.SendmmsgIsLimitedByMAXIOV/1",
                "AllUDPSockets/AllSocketPairTest.SendmmsgIsLimitedByMAXIOV/2",
                "AllUDPSockets/AllSocketPairTest.SendmmsgIsLimitedByMAXIOV/3",
                "AllUDPSockets/AllSocketPairTest.SendmmsgIsLimitedByMAXIOV/4",
                "AllUDPSockets/AllSocketPairTest.SendmmsgIsLimitedByMAXIOV/5",
                "AllUDPSockets/AllSocketPairTest.BasicRecvmmsg/0",
                "AllUDPSockets/AllSocketPairTest.BasicRecvmmsg/1",
                "AllUDPSockets/AllSocketPairTest.BasicRecvmmsg/2",
                "AllUDPSockets/AllSocketPairTest.BasicRecvmmsg/3",
                "AllUDPSockets/AllSocketPairTest.BasicRecvmmsg/4",
                "AllUDPSockets/AllSocketPairTest.BasicRecvmmsg/5",
                "AllUDPSockets/AllSocketPairTest.RecvmsgMsghdrFlagsCleared/0",
                "AllUDPSockets/AllSocketPairTest.RecvmsgMsghdrFlagsCleared/1",
                "AllUDPSockets/AllSocketPairTest.RecvmsgMsghdrFlagsCleared/2",
                "AllUDPSockets/AllSocketPairTest.RecvmsgMsghdrFlagsCleared/3",
                "AllUDPSockets/AllSocketPairTest.RecvmsgMsghdrFlagsCleared/4",
                "AllUDPSockets/AllSocketPairTest.RecvmsgMsghdrFlagsCleared/5",
                "AllUDPSockets/AllSocketPairTest.RecvmsgPeekMsghdrFlagsCleared/0",
                "AllUDPSockets/AllSocketPairTest.RecvmsgPeekMsghdrFlagsCleared/1",
                "AllUDPSockets/AllSocketPairTest.RecvmsgPeekMsghdrFlagsCleared/2",
                "AllUDPSockets/AllSocketPairTest.RecvmsgPeekMsghdrFlagsCleared/3",
                "AllUDPSockets/AllSocketPairTest.RecvmsgPeekMsghdrFlagsCleared/4",
                "AllUDPSockets/AllSocketPairTest.RecvmsgPeekMsghdrFlagsCleared/5",
                "AllUDPSockets/AllSocketPairTest.RecvmmsgInvalidTimeout/0",
                "AllUDPSockets/AllSocketPairTest.RecvmmsgInvalidTimeout/1",
                "AllUDPSockets/AllSocketPairTest.RecvmmsgInvalidTimeout/2",
                "AllUDPSockets/AllSocketPairTest.RecvmmsgInvalidTimeout/3",
                "AllUDPSockets/AllSocketPairTest.RecvmmsgInvalidTimeout/4",
                "AllUDPSockets/AllSocketPairTest.RecvmmsgInvalidTimeout/5",
                "AllUDPSockets/AllSocketPairTest.RecvmmsgTimeoutBeforeRecv/0",
                "AllUDPSockets/AllSocketPairTest.RecvmmsgTimeoutBeforeRecv/1",
                "AllUDPSockets/AllSocketPairTest.RecvmmsgTimeoutBeforeRecv/2",
                "AllUDPSockets/AllSocketPairTest.RecvmmsgTimeoutBeforeRecv/3",
                "AllUDPSockets/AllSocketPairTest.RecvmmsgTimeoutBeforeRecv/4",
                "AllUDPSockets/AllSocketPairTest.RecvmmsgTimeoutBeforeRecv/5",
                "IPUnboundSockets/IPUnboundSocketTest.NullTOS/2",
                "IPUnboundSockets/IPUnboundSocketTest.NullTOS/3",
                "SocketTest.UnixSocketPairProtocol",
                "SocketTest.ProtocolUnix",
                "SocketTest.UnixSocketStat",
                "SocketTest.UnixSocketStatFS",
                "SocketTest.UnixSCMRightsOnlyPassedOnce",
                "SocketTest.Permission",
                "OpenModes/SocketOpenTest.Unix/0",
                "OpenModes/SocketOpenTest.Unix/1",
                "AllInetTests/SimpleTcpSocketTest.NonBlockingConnect_PollWrNorm/0",
                "AllInetTests/SimpleTcpSocketTest.NonBlockingConnect_PollWrNorm/1",

                // TODO(https://fxbug.dev/327661705): The following tests fail
                // when run against fdio/netstack3 without starnix, remove the
                // following lines once the issue is fixed.
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4Any_ConnectV4Any",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4Any_ConnectV4Loopback",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4Any_ConnectV4MappedAny",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4Any_ConnectV4MappedLoopback",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4Loopback_ConnectV4Any",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4Loopback_ConnectV4Loopback",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4Loopback_ConnectV4MappedLoopback",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4MappedAny_ConnectV4Any",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4MappedAny_ConnectV4Loopback",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4MappedAny_ConnectV4MappedAny",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4MappedAny_ConnectV4MappedLoopback",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4MappedLoopback_ConnectV4Any",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4MappedLoopback_ConnectV4Loopback",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV4MappedLoopback_ConnectV4MappedLoopback",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV6Any_ConnectV4Any",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV6Any_ConnectV4Loopback",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV6Any_ConnectV4MappedAny",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV6Any_ConnectV4MappedLoopback",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV6Any_ConnectV6Any",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV6Any_ConnectV6Loopback",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV6Loopback_ConnectV6Any",
                "All/SocketInetLoopbackIsolatedTest.TCPFinWait2Test/ListenV6Loopback_ConnectV6Loopback",
            ],
        },
        {
            type: "expect_failure",
            matchers: [
                // affinity_test
                "AffinityTest.LargeCpuMask",
                "AffinityTest.NewThread",
                "AffinityTest.Sanity",

                // aio_test
                "AIOTest.BasicWrite",
                "AIOTest.MremapExpansion",
                "AIOTest.BadWrite",
                "BadOffset/AIOReadWriteParamTest.BadOffset/3",
                "AIOTest.ExitWithPendingIo",
                "AIOTest.Mprotect",
                "AIOTest.Mremap",
                "AIOTest.Timeout",
                "AIOTest.CloneVm",
                "BadIOVecs/AIOVectorizedParamTest.BadIOVecs/0",
                "BadIOVecs/AIOVectorizedParamTest.BadIOVecs/1",
                "BadOffset/AIOReadWriteParamTest.BadOffset/1",
                "BadOffset/AIOReadWriteParamTest.BadOffset/0",
                "BadOffset/AIOReadWriteParamTest.BadOffset/2",

                // cgroup_test
                "CPUAcctCgroup.CPUAcctStat",
                "CPUAcctCgroup.CPUAcctUsage",
                "CPUAcctCgroup.HierarchicalAccounting",
                "CPUAcctCgroup.IndirectCharge",
                "CPUAcctCgroup.NoDoubleAccounting",
                "CPUCgroup.ControlFilesHaveDefaultValues",
                "Cgroup.AllControllersExplicit",
                "Cgroup.AllControllersImplicit",
                "Cgroup.CantRenameControlFile",
                "Cgroup.CgroupsCannotMountTwice",
                "Cgroup.ControllersMustBeInUniqueHierarchy",
                "Cgroup.Create",
                "Cgroup.CrossDirRenameNotAllowed",
                "Cgroup.DirSetStat",
                "Cgroup.DuplicateUnlinkOnDirFD",
                "Cgroup.EmptyHierarchyMustHaveName",
                "Cgroup.InvalidController",
                "Cgroup.MigrateInvalidPID",
                "Cgroup.MigrateToSubcontainer",
                "Cgroup.MigrateToSubcontainerThread",
                "Cgroup.MkdirWithPermissions",
                "Cgroup.MoptAllMustBeExclusive",
                "Cgroup.MountRace",
                "Cgroup.MountSucceeds",
                "Cgroup.MountsForAllControllers",
                "Cgroup.NameMatchButControllersDont",
                "Cgroup.NamedHierarchies",
                "Cgroup.NoneExclusiveWithAnyController",
                "Cgroup.OnlyContainsControllerSpecificFiles",
                "Cgroup.PIDZeroMovesSelf",
                "Cgroup.ProcsAndTasks",
                "Cgroup.Rename",
                "Cgroup.RenameNameCollision",
                "Cgroup.SeparateMounts",
                "Cgroup.Statfs",
                "Cgroup.SubcontainerInitiallyEmpty",
                "Cgroup.SubcontainersHaveIndependentState",
                "Cgroup.TIDZeroMovesSelf",
                "Cgroup.UnmountFreesControllers",
                "Cgroup.UnmountRepeated",
                "CpusetCgroup.Defaults",
                "CpusetCgroup.SetEmptyMask",
                "CpusetCgroup.SetMask",
                "DevicesCgroup.AddDeviceRule",
                "DevicesCgroup.ControlFilesExist",
                "DevicesCgroup.DenyAll",
                "DevicesCgroup.IgnorePartialMatchRule",
                "DevicesCgroup.RemoveDeviceRule",
                "JobCgroup.ReadWriteRead",
                "MemoryCgroup.MemoryUsageInBytes",
                "PIDsCgroup.CanLowerLimitBelowCurrentCharge",
                "PIDsCgroup.ChargeMigration",
                "PIDsCgroup.ControlFilesExist",
                "PIDsCgroup.LimitEnforced",
                "PIDsCgroup.MigrationCanExceedLimit",
                "PIDsCgroup.SetInvalidLimit",
                "ProcCgroup.MultiControllerHierarchy",
                "ProcCgroup.PIDCgroupMatchesCgroups",
                "ProcCgroup.ProcfsReportsCgroupfsMountOptions",
                "ProcCgroups.Empty",
                "ProcCgroups.ProcCgroupsEntries",
                "ProcCgroups.ProcfsReportsTasksCgroup",
                "ProcCgroups.ProcfsRreportsHierarchyID",
                "ProcCgroups.UnmountRemovesEntries",
                "ProcPIDCgroup.Empty",
                "ProcPIDCgroup.Entries",
                "ProcPIDCgroup.UnmountRemovesEntries",

                // clock_nanosleep_test
                "ClockNanosleepProcessTest.SleepFiveSeconds",

                // epoll_test - https://fxbug.dev/42159478
                "EpollTest.CloseFile",

                // eventfd_test - splice() isn't implemented https://fxbug.dev/42070385
                "EventfdTest.SpliceReturnsEINVAL",

                // exceptions_test
                "ExceptionTest.AlignmentCheck",

                // exec_test
                // Disable InterpreterScript because the script has the path /bin/bash which is not
                // where bash is located on the Android system image.
                "ExecTest.InterpreterScript",
                "ExecTest.SymlinkLimitRefreshedForInterpreter",

                // This test attempts to successfully open a symlink in the test dir that points to
                // `/bin/echo` using NOFOLLOW. The goal is to test that despite specifying NOFOLLOW,
                // ancestor symlinks are always followed. NOFOLLOW only applies to the final node,
                // which must not be a symlink.
                //
                // The test follows the test dir symlink to `/bin` which points to `/system/bin`.
                //
                // Sadly, on the Android system image, `/system/bin/echo` points to `toybox`, making
                // the final node a symlink which breaks this test.
                "ExecveatTest.SymlinkNoFollowIgnoreSymlinkAncestor",

                // This test attempts to open `/bin` with read permissions.
                //
                // On the Android system image, this points to `/system/bin` which
                // has `0751` mode permission bits (`drwxr-x--x`).
                //
                // A non-root user cannot read the contents of this directory.
                //
                // Even if the test were to be running under the root user, the `echo` file inside
                // is a symlink that points to `toybox`, meaning that using NOFOLLOW will fail.
                "ExecveatTest.SymlinkNoFollowWithNormalFile",

                // This test call exec from a process with multiple threads.
                // Starnix doesnt' support this yet: https://fxbug.dev/42082680
                "ExecTest.FromSiblingThread",
                "ExecTest.WithSiblingThread",

                // exec_binary_test
                //
                // These tests exec an ELF with a load address of 0x40000,
                // which is too low for zircon.
                "ElfTest.Execute",
                "ElfTest.AnonOnlySegment",
                "ElfTest.DataSegment",
                "ElfTest.ELFInterpreter",
                "ElfTest.ELFInterpreterRelative",
                "ElfTest.ELFInterpreterWrongArch",
                "ElfTest.ExtraMemPages",
                "ElfTest.MissingPhdr",
                "ElfTest.UnalignedOffset",
                "ExecveTest.BrkAfterBinary",
                "InterpreterScriptTest.BinaryNoExecute",
                "InterpreterScriptTest.Execute",
                "InterpreterScriptTest.MaxRecursion",
                "InterpreterScriptTest.RelativePath",
                "InterpreterScriptTest.Symlink",
                "InterpreterScriptTest.UncleanPath",
                "InterpreterScriptTest.Whitespace",
                "Cases/ElfInterpreterStaticTest.Test/0",
                "Cases/ElfInterpreterStaticTest.Test/1",
                "Cases/ElfInterpreterStaticTest.Test/2",
                "Cases/ElfInterpreterBadPathTest.Test/1",
                "Cases/ElfInterpreterBadPathTest.Test/2",
                "Cases/ElfInterpreterBadPathTest.Test/3",

                // fcntl_test
                "FcntlTest.SetSig",
                "FcntlTest.SetSigDefaultsToZero",
                "FcntlTest.SetSigToDefault",
                "FcntlTest.SetSigInvalid",
                "FcntlTest.SetSigInvalidDoesNotResetPreviousChoice",
                "FcntlTest.SetFlSetOwnSetSigDoNotRace",
                "FcntlSignalTest.SetSigDefault",
                "FcntlSignalTest.SignalFD",
                "FcntlSignalTest.SignalFDSetSigAfterASYNC",
                "FcntlSignalTest.SetSigCustom",
                "FcntlSignalTest.SetSigUnregisterStillGetsSigio",
                "FcntlSignalTest.SetSigWithSigioStillGetsSiginfo",
                "FcntlSignalTest.SetSigDupThenCloseOld",
                "FcntlSignalTest.SetSigDupThenCloseNew",
                "FcntlSignalTest.SetSigDupOldRegistered",
                "FcntlSignalTest.SetSigDupNewRegistered",
                "FcntlSignalTest.SetSigDupBothRegistered",
                "FcntlSignalTest.SetSigDupBothRegisteredAfterDup",
                "FcntlSignalTest.SetSigDupUnregisterOld",
                "FcntlSignalTest.SetSigDupUnregisterNew",
                "FcntlLockTest.GetLockRespectsPIDNamespace",

                // fork_test
                "ForkTest.Affinity",
                "CloneTest.NewUserNamespacePermitsAllOtherNamespaces",
                "CloneTest.NonCanonicalTLS",

                // futex_test - https://fxbug.dev/42159495 Needs atomic ops on restricted memory.
                "PrivateFutexTest.WakeOp0Set",
                "PrivateFutexTest.WakeOp0Add",
                "PrivateFutexTest.WakeOp0Or",
                "PrivateFutexTest.WakeOp0Andn",
                "PrivateFutexTest.WakeOp0Xor",
                "SharedPrivate/PrivateAndSharedFutexTest.PITryLock/*",

                // getcpu_host_test and getcpu_test
                "GetcpuTest.IsValidCpu",

                // getdents_test
                // Assumes structure of root directory.
                "ReaddirTest.RootContainsBasicDirectories",

                // getrusage_test
                "GetrusageTest.Grandchild",
                "GetrusageTest.BasicFork",
                "GetrusageTest.Wait4",
                "GetrusageTest.IgnoreSIGCHLD",
                "GetrusageTest.IgnoreZombie",

                // inotify_test
                "Inotify.InOnlyDirFlagRespected",
                "Inotify.TruncateGeneratesModifyEvent",
                "Inotify.SymlinkFollow",
                "Inotify.UtimesGeneratesAttribEvent",
                "Inotify.UnmatchedEventsAreDiscarded",
                "Inotify.ControlEvents",
                "Inotify.KernfsBasic",
                "Inotify.ExcludeUnlinkInodeEvents",
                "Inotify.ExcludeUnlinkDirectory",
                "Inotify.ExcludeUnlink",
                "Inotify.Fallocate",
                "Inotify.IncludeUnlinkedFile",
                "Inotify.ExcludeUnlinkMultipleChildren",
                "Inotify.Utimensat",
                "Inotify.Exec",

                // ioctl_test
                "IoctlTest/IoctlTestSIOCGIFCONF.ValidateNoArrayGetsLength/*",
                "IoctlTest.FIONBIOFails",
                "IoctlTest.FIOCLEXSucceeds",
                "IoctlTest.FIONCLEXSucceeds",
                "IoctlTest.FIOASYNCFails",
                "IoctlTest.FIOASYNCSucceeds",
                "IoctlTest.FIOASYNCNoTarget",
                "IoctlTest.FIOASYNCSelfTarget",
                "IoctlTest.FIOASYNCSelfTarget2",
                "IoctlTest.FIOASYNCSelfTargetClose",
                "IoctlTest.FIOASYNCInvalidPID",
                "IoctlTest.FIOASYNCUnsetTarget",
                "IoctlTest.FIOGETOWNSucceeds",
                "IoctlTest.SIOCGPGRPSucceeds",
                "IoctlTest.FIONBIOSucceeds",
                "IoctlTest/IoctlTestSIOCGIFCONF.ValidateNoPartialIfrsReturned/*",
                "IoctlTest/IoctlTestSIOCGIFCONF.ValidateNestedPointerCheck/*",
                "IoctlTest/IoctlTestSIOCGIFCONF.ValidateLoopbackIsPresent/*",
                "IoctlTest/IoctlTestSIOCGIFCONF.ValidateNoArrayGetsLength/*",

                // iptables_test
                "IPTablesBasic.GetRevision",
                "IPTablesBasic.GetInfoErrorPrecedence",
                "IPTablesTest.InitialState",
                "IPTablesBasic.OriginalDstErrors",
                "IPTablesBasic.GetEntriesErrorPrecedence",

                // ip6tables_test
                "IP6TablesBasic.GetRevision",
                "IP6TablesBasic.GetEntriesErrorPrecedence",
                "IP6TablesBasic.GetInfoErrorPrecedence",
                "IP6TablesTest.InitialInfo",

                // itimer_test
                "ItimerTest.DeliversSIGPROFToThreadsRoughlyFairlyActive",

                // lseek_test
                // Assumes structure of root directory.
                "LseekTest.EtcPasswdDup",

                // madvise_test
                "MadviseDontneedTest.CleansPrivateFilePage",

                // memory_accounting_test
                "MemoryAccounting.AnonAccountingPreservedOnSaveRestore",

                // mempolicy_test
                "MempolicyTest.CheckDefaultPolicy",
                "MempolicyTest.PolicyPreservedAfterSetMempolicy",
                "MempolicyTest.EmptyNodemaskOnSet",
                "MempolicyTest.QueryAvailableNodes",
                "MempolicyTest.GetMempolicyQueryNodeForAddress",
                "MempolicyTest.GetMempolicyCanOmitPointers",
                "MempolicyTest.SetMempolicyRejectsInvalidInputs",
                "MempolicyTest.Mbind",
                "MempolicyTest.GetMempolicyNextInterleaveNode",

                // mincore_test
                "MincoreTest.DirtyAnonPagesAreResident",
                "MincoreTest.UnalignedAddressFails",
                "MincoreTest.UnalignedLengthSucceedsAndIsRoundedUp",
                "MincoreTest.ZeroLengthSucceedsAndAllowsAnyVecBelowTaskSize",
                "MincoreTest.InvalidLengthFails",

                // mlock_test
                "MlockTest.Basic",
                "MapLockedTest.Basic",
                "MapLockedTest.RlimitMemlockZero",
                "MlockTest.MsyncInvalidate",
                "MlockTest.ProtNone",
                "MlockTest.Fork",
                "MlockTest.RlimitMemlockZero",
                "MunlockTest.Basic",
                "MlockTest.RlimitMemlockInsufficient",
                "MlockallTest.Future",
                "MunlockallTest.Basic",
                "Mlock2Test.NoFlags",
                "MapLockedTest.RlimitMemlockInsufficient",
                "MremapLockedTest.Basic",
                "Mlock2Test.UnknownFlags",
                "MremapLockedTest.RlimitMemlockZero",
                "Mlock2Test.MlockOnfault",
                "MremapLockedTest.RlimitMemlockInsufficient",
                "MlockTest.MadviseDontneed",

                // mmap_test
                "MMapDeathTest.TruncateAfterCOWBreak",
                "MMapFileTest.MapFirstNegativePage",
                "MMapFileTest.MapLastNegativePage",
                "MMapFileTest.MapLastPositivePage",
                "MMapFileTest.MapSecondToLastNegativePage",
                "MMapTest.ExceedLimitAS",
                "MMapTest.ExceedLimitDataPrlimitPID",
                "MMapTest.MapLocked",
                "MMapTest.MprotectHugeLength",

                // mount_test
                "MountTest.ActiveSubmountBusy",
                "MountTest.BindSlaveToShared",
                "MountTest.BindSlaveToSlave",
                "MountTest.ChangeMountFlags",
                "MountTest.DetachedMountBindFails",
                "MountTest.LargeTreePropagationEvent",
                "MountTest.LockedMountStopsNonRecBind",
                "MountTest.MaxMounts",
                "MountTest.MountInfo",
                "MountTest.MountNamespaceSlavesNewUserNamespace",
                "MountTest.MountNoExec",
                "MountTest.MaxRecursiveBind",
                "MountTest.MountTmpfsMagicValIgnored",
                "MountTest.MountWithStrictAtime",
                "MountTest.OpenFileBusy",
                "MountTest.PropagateChildUmountEvent",
                "MountTest.ReuseGroupIDs",
                "MountTest.SlaveMaster",
                "MountTest.TmpfsDirectoryAllocCheck",
                "MountTest.TmpfsEmptySizeAllocCheck",
                "MountTest.TmpfsHardLinkAllocCheck",
                "MountTest.TmpfsSizeAllocationMultiplePages",
                "MountTest.TmpfsSizeMmap",
                "MountTest.TmpfsSizeMoreThanSinglePgSZMultipleFiles",
                "MountTest.TmpfsSizePartialWriteMultiplePages",
                "MountTest.TmpfsSizePartialWriteSinglePage",
                "MountTest.TmpfsSizeRoundUpSinglePageSize",
                "MountTest.TmpfsSymlinkAllocCheck",
                "MountTest.TmpfsSymlinkUnallocCheck",
                "MountTest.UmountPropagatedSubtreeFromPrivilegedNS",
                "MountTest.UmountReparentsCoveredMounts",

                // msgqueue_test
                "MsgqueueTest.MsgCtlIpcSet",
                "MsgqueueTest.MsgOpTruncate",
                "MsgqueueTest.MsgCtlIpcStatWriteOnly",
                "MsgqueueTest.MsgOpInvalidArgs",
                "MsgqueueTest.MsgGetFail",
                "MsgqueueTest.MsgOpNoMsg",
                "MsgqueueTest.MsgGetIpcPrivate",
                "MsgqueueTest.MsgOpNoMsgType",
                "MsgqueueTest.MsgOpTooBig",
                "MsgqueueTest.MsgOpSimple",
                "MsgqueueTest.MsgExcept",
                "MsgqueueTest.MsgRcvType",
                "MsgqueueTest.MsgRcvTypeNegative",
                "MsgqueueTest.MsgOpLimits",
                "MsgqueueTest.MsgOpPermissions",
                "MsgqueueTest.MsgRcvTypeBlocking",
                "MsgqueueTest.MsgRcvBlocking",
                "MsgqueueTest.MsgSndRmWhileBlocking",
                "MsgqueueTest.MsgSndBlocking",
                "MsgqueueTest.InterruptRecv",
                "MsgqueueTest.MsgRcvRmWhileBlocking",
                "MsgqueueTest.InterruptSend",
                "MsgqueueTest.MsgCtlIpcSetMaxBytes",
                "MsgqueueTest.MsgCtlMsgInfo",
                "MsgqueueTest.MsgOpEmpty",
                "MsgqueueTest.MsgGet",
                "MsgqueueTest.MsgOpGeneral",
                "MsgqueueTest.MsgCtlIpcInfo",
                "MsgqueueTest.MsgCtlIpcStat",

                // msync_test
                "All/MsyncNoFlagsTest.BothSyncAndAsyncFails/*",

                // network_namespace_test
                "NetworkNamespaceTest.BindMount",
                "NetworkNamespaceTest.LoopbackExists",
                "NetworkNamespaceTest.Setns",

                // packet_socket_dgram_test
                "AllInetTests/CookedPacketTest.BindDrop/*",
                "AllInetTests/CookedPacketTest.ReceiveOutbound/*",

                // packet_socket_test
                "AllPacketSocketTests/PacketSocketTest.GetSockName/*",

                // ping_socket_test
                "PingSocket.ReceiveIPPacketInfo",
                "PingSocket.ReceiveTOS",
                "PingSocket.ReceiveTClass",
                "PingSocket.ReceiveTTL",
                "PingSocket.ReceiveHopLimit",
                "PingSockets/Fixture.Bind/ICMP_socket_V4Multicast",
                "PingSockets/Fixture.Bind/ICMP_socket_V4MulticastAllHosts",
                "PingSockets/Fixture.Bind/ICMPv6_socket_V6Multicast",
                "PingSockets/Fixture.Bind/ICMPv6_socket_V6MulticastInterfaceLocalAllNodes",
                "PingSockets/Fixture.Bind/ICMPv6_socket_V6MulticastLinkLocalAllNodes",
                "PingSockets/Fixture.Bind/ICMPv6_socket_V6MulticastLinkLocalAllRouters",

                // pivot_root_test
                "PivotRootTest.WithoutCapability",
                "PivotRootTest.OnSharedPutOldMountpoint",
                "PivotRootTest.NotDir",
                "PivotRootTest.NewRootNotAMountpoint",
                "PivotRootTest.OnSharedNewRoot",
                "PivotRootTest.Success",
                "PivotRootTest.OnSharedNewRootParent",
                "PivotRootTest.PutOldNotUnderNewRoot",
                "PivotRootTest.CurrentRootNotAMountPoint",
                "PivotRootTest.NotExist",
                "PivotRootTest.NewRootOnRootMount",
                "PivotRootTest.DotDot",
                "PivotRootTest.CreatesNewRoot",
                "PivotRootTest.OnRootFS",
                "PivotRootTest.ChangesCwdForAllProcesses",
                "PivotRootTest.MovesOldRoot",
                "PivotRootTest.LockedNewRootFails",
                "PivotRootTest.OldRootUnlocked",

                // prctl_setuid_test
                "PrctlKeepCapsSetuidTest.NoKeepCapsAfterNewUserNamespace",

                // prctl_test
                "PrctlTest.InvalidPrSetMM",
                "PrctlTest.PDeathSig",
                "PrctlTest.OrphansReparentedToSubreaper",
                "PrctlTest.RootDumpability",

                // processes_test
                "Processes.SetPGIDOfZombie",

                // proc_test
                "ProcCpuinfo.RequiredFieldsArePresent",
                "ProcSentryMeminfo.ContainsFieldsAndEndsWithNewline",
                "ProcStat.ContainsBasicFields",
                "ProcPidSymlink.SubprocessZombied",
                "ProcPidFile.SubprocessRunning",
                "ProcPidFile.SubprocessZombie",
                "ProcPidFile.SubprocessExited",
                "ProcTask.TaskDirHasCorrectMetadata",
                "ProcTask.VerifyTaskChildren",
                "ProcTask.VerifyTaskDirNlinks",
                "ProcSysKernelHostname.MatchesUname",
                "ProcSysVmMaxmapCount.HasNumericValue",
                "ProcSysVmMmapMinAddr.HasNumericValue",
                "ProcSysVmOvercommitMemory.HasNumericValue",
                "ProcFilesystems.Bug65172365",
                "ProcFilesystems.ReadCapLastCap",
                "Proc.GetdentsEnoent",
                "Proc.PidTidIOAccounting",

                // proc_isolated_test
                "ProcDefaults.PresenceOfSem",
                "ProcDefaults.PresenceOfShmMaxMniAll",
                "ProcDefaults.PresenceOfMsgMniMaxMnb",

                // proc_net_tcp_test
                "ProcNetTCP.Exists",
                "ProcNetTCP6.Exists",
                "ProcNetTCP6.State",
                "ProcNetTCP.State",
                "ProcNetTCP.EntryUID",
                "ProcNetTCP6.EntryUID",
                "ProcNetTCP.InodeReasonable",
                "ProcNetTCP6.BindAcceptConnect",
                "ProcNetTCP.BindAcceptConnect",
                "ProcNetTCP6.InodeReasonable",

                // proc_net_test
                "ProcNetSymlink.FileMode",
                "ProcNetIfInet6.Format",
                "ProcNetSymlinkTarget.FileMode",
                "ProcNetSymlink.Contents",
                "ProcSysNetIpv4Sack.Exists",
                "ProcNetDev.Format",
                "ProcNetSnmp.TcpReset",
                "ProcNetSnmp.TcpEstab",
                "ProcNetSnmp.UdpNoPorts",
                "ProcNetSnmp.UdpIn",
                "ProcNetSnmp.Stat",
                "ProcSysNetIpv4Recovery.Exists",
                "ProcSysNetIpv4IpForward.DefaultValueEqZero",
                "ProcSysNetPortRange.CanReadAndWrite",
                "ProcSysNetIpv4IpForward.CanReadAndWrite",
                "ProcSysNetIpv4Sack.CanReadAndWrite",
                "ProcSysNetIpv4Recovery.CanReadAndWrite",

                // proc_net_udp_test
                "ProcNetUDP.Exists",
                "ProcNetUDP.BoundSocketStateClosed",
                "ProcNetUDP.BoundEntry",
                "ProcNetUDP.FindMutualEntries",
                "ProcNetUDP.EntryUID",
                "ProcNetUDP.ConnectedSocketStateEstablished",
                "ProcNetUDP.EntriesRemovedOnClose",

                // proc_net_unix_test
                "ProcNetUnix.Exists",
                "ProcNetUnix.DgramSocketStateDisconnectingOnBind",
                "ProcNetUnix.AbstractBindAcceptConnect",
                "ProcNetUnix.SocketPair",
                "ProcNetUnix.StreamSocketStateStateConnectedOnAccept",
                "ProcNetUnix.StreamSocketStateUnconnectedOnBind",
                "ProcNetUnix.StreamSocketStateStateUnconnectedOnListen",
                "ProcNetUnix.FilesystemBindAcceptConnect",
                "ProcNetUnix.DgramSocketStateConnectingOnConnect",

                // proc_pid_smaps_test
                "ProcPidSmapsTest.GvisorFields",

                // proc_pid_uid_gid_map_test
                "All/ProcSelfUidGidMapTest.TrailingNewlineAndNULIgnored/UID",
                "All/ProcSelfUidGidMapTest.IsInitiallyEmpty/UID",
                "All/ProcSelfUidGidMapTest.MapOtherID/UID",
                "All/ProcPidUidGidMapTest.MapOtherIDPrivileged/GID",
                "All/ProcSelfUidGidMapTest.IsInitiallyEmpty/GID",
                "All/ProcSelfUidGidMapTest.NonIdentityMapOwnID/UID",
                "All/ProcSelfUidGidMapTest.TrailingNewlineAndNULIgnored/GID",
                "All/ProcSelfUidGidMapTest.NonIdentityMapOwnID/GID",
                "All/ProcSelfUidGidMapTest.IdentityMapOwnID/UID",
                "All/ProcSelfUidGidMapTest.MapOtherID/GID",
                "All/ProcPidUidGidMapTest.MapOtherIDPrivileged/UID",
                "All/ProcPidUidGidMapTest.MapAnyIDsPrivileged/GID",
                "All/ProcPidUidGidMapTest.MapAnyIDsPrivileged/UID",
                "All/ProcSelfUidGidMapTest.IdentityMapOwnID/GID",

                // ptrace tests
                "PtraceTest.ChangeRegSetInOptSyscall",
                "PtraceTest.Sysemu_PokeUser",

                // pty_test
                "PtyTest.CanonInputBackspaceMultibyteCharacterWithIUTF8",
                "PtyTest.CanonInputBackspaceMultibyteCharacterPartialWithIUTF8",
                "PtyTest.CanonInputWordErase",
                "JobControlTest.ControllingProcessPersistsAfterChildExists",

                // rlimits_test
                "RlimitTest.RlimitNProc",

                // rtsignal_test
                "RtSignalTest.InvalidCodes",
                "RtSignalTest.SignoMatch",

                // seccomp_test
                "SeccompTest.EmptyProgramIsRejected",

                // sigaltstack_test - https://fxbug.dev/42159586
                "SigaltstackTest.ResetByExecve",

                // socket_abstract_test - https://fxbug.dev/42159594
                "AbstractUnixSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/*",
                "AbstractUnixSockets/AllSocketPairTest.GetSocketOutOfBandInlineOption/*",
                "AbstractUnixSockets/AllSocketPairTest.GetSetSocketRcvlowatOption/*",
                "AbstractUnixSockets/UnixSocketPairCmsgTest.SendNullCredsBeforeSoPassCredRecvEndAfterSendEnd/*",
                "AbstractUnixSockets/UnixSocketPairCmsgTest.WriteBeforeSoPassCredRecvEndAfterSendEnd/*",

                // socket_bind_to_device_sequence_test
                "BindToDeviceTest/BindToDeviceSequenceTest.BindTwiceWithDeviceFails/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindWithDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindToDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.MixingReuseAndNotReuseByBindingToDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.CannotBindTo0AfterMixingReuseAndNotReuse/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindToDeviceAndThenWithoutDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindingWithReuseAndDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindWithoutDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindAndRelease/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindWithReuseAddr/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindTwiceWithReuseOnce/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindWithReuse/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.BindAndReleaseDifferentDevice/*",
                "BindToDeviceTest/BindToDeviceSequenceTest.CannotBindTo0AfterMixingReuseAddrAndNotReuseAddr/*",

                // socket_bind_to_device_test
                "BindToDeviceTest/BindToDeviceTest.GetsockoptDefault/*",
                "BindToDeviceTest/BindToDeviceTest.SetsockoptInvalidDeviceName/*",
                "BindToDeviceTest/BindToDeviceTest.SetsockoptValidDeviceNameWithoutNullTermination/*",
                "BindToDeviceTest/BindToDeviceTest.SetsockoptValidThenClear/*",
                "BindToDeviceTest/BindToDeviceTest.SetsockoptValidThenClearWithNull/*",
                "BindToDeviceTest/BindToDeviceTest.SetsockoptValidDeviceNameWithNullTermination/*",
                "BindToDeviceTest/BindToDeviceTest.GetsockoptDevice/*",
                "BindToDeviceTest/BindToDeviceTest.SetsockoptValidThenInvalid/*",

                // socket_capability_test
                "SocketTest.UnixConnectNeedsWritePerm",

                // socket_domain_test
                // TODO: same name of test in socket_ip_tcp_loopback_test that passes

                // socket_filesystem_test
                "FilesystemUnixSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/*",
                "FilesystemUnixSockets/AllSocketPairTest.GetSocketOutOfBandInlineOption/*",
                "FilesystemUnixSockets/AllSocketPairTest.GetSetSocketRcvlowatOption/*",
                "FilesystemUnixSockets/UnixSocketPairCmsgTest.SendNullCredsBeforeSoPassCredRecvEndAfterSendEnd/*",
                "FilesystemUnixSockets/UnixSocketPairCmsgTest.WriteBeforeSoPassCredRecvEndAfterSendEnd/*",

                // socket_inet_loopback_nogotsan_test
                "AllFamilies/SocketMultiProtocolInetLoopbackTest.UDPBindMayBindOtherBoundPortsReuseAddr/UDP",
                "AllFamilies/SocketMultiProtocolInetLoopbackTest.TCPBindAvoidsOtherBoundPortsReuseAddr/TCP",

                // socket_ip_tcp_loopback_test
                "AllUnixDomainSockets/AllSocketPairTest.SendmsgRecvmsgMsgCtruncNoop/*",
                "AllUnixDomainSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/*",
                "AllUnixDomainSockets/AllSocketPairTest.GetSetSocketRcvlowatOption/*",

                // socket_ip_udp_loopback_test
                "AllUDPSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/*",
                "AllUDPSockets/NonStreamSocketPairTest.RecvmsgMsghdrFlagMsgTrunc/*",
                "AllUDPSockets/UDPSocketPairTest.PayloadTooBig/*",

                // socket_ipv4_udp_unbound_loopback_test
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.SetAndReceiveIPReceiveOrigDstAddr/*",

                // socket_netdevice_test
                "NetdeviceTest.InterfaceName",
                "NetdeviceTest.InterfaceQLEN",
                "NetdeviceTest.Netmask",
                "NetdeviceTest.EthtoolGetTSInfo",

                // socket_netlink_route_test
                // TODO(https://issuetracker.google.com/290605547): support
                // replacing addresses.
                "NetlinkRouteTest.AddAndRemoveAddr",
                "NetlinkRouteTest.SpliceFromPipe",

                // socket_netlink_uevent
                "NetlinkUeventTest.AttachFilter",
                "NetlinkUeventTest.DetachNoFilter",

                // socket_stress_test
                "AllConnectedSockets/ConnectStressTest.TooManyOpen/*",
                "AllConnectedSockets/PersistentListenerConnectStressTest.Close/*",
                "AllConnectedSockets/ConnectStressTest.Reset/*",
                "AllConnectedSockets/PersistentListenerConnectStressTest.ShutdownCloseFirst/*",
                "AllConnectedSockets/PersistentListenerConnectStressTest.ShutdownCloseSecond/*",

                // socket_unix_pair_test - https://fxbug.dev/42159641
                "AllUnixDomainSockets/UnixSocketPairCmsgTest.SendNullCredsBeforeSoPassCredRecvEndAfterSendEnd/*",
                "AllUnixDomainSockets/UnixSocketPairCmsgTest.WriteBeforeSoPassCredRecvEndAfterSendEnd/*",

                // socket_unix_seqpacket_local_test
                "SeqpacketUnixSockets/SeqpacketUnixSocketPairTest.Sendto/*",

                // socket_unix_unbound_abstract_test
                "AllUnixDomainSockets/UnboundAbstractUnixSocketPairTest.AutoBindAddrInUse/*",
                "AllUnixDomainSockets/UnboundAbstractUnixSocketPairTest.AutoBindSuccess/*",
                "AllUnixDomainSockets/UnboundAbstractUnixSocketPairTest.GetSockNamePartialLength/*",

                // socket_unix_unbound_stream_test
                "AllUnixDomainSockets/UnixStreamSocketPairTest.FDPassPartialRead/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.CredPassPartialRead/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.SinglePeek/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.CredsNotCoalescedUp/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.CoalescedCredsNoPasscred/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.CoalescedCreds2/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.CoalescedDifferingCreds/*",

                // stat_test
                "StatTest.StatIgnoreNoAutomount",

                // statfs_test
                "FstatfsTest.BlocksFree",

                // tuntap_test
                "TuntapStaticTest.NetTunExists",
                "TuntapTest.CreateInterfaceNoCap",
                "TuntapTest.PingKernel",
                "TuntapTest.CreateFixedNameInterface",
                "TuntapTest.CreateInterface",
                "TuntapTest.LargeWritesFailWithEMSGSIZE",
                "TuntapTest.InvalidReadWrite",
                "TuntapTest.ZeroWrite",
                "TuntapTest.SendUdpTriggersArpResolution",
                "TuntapTest.TUNNoPacketInfo",
                "TuntapTest.WriteHangBug155928773",
                "TuntapTest.TCPNonBlockingConnectFailsArpResolution",
                "TuntapTest.TCPBlockingConnectFailsArpResolution",
                "TuntapTest.RawPacketSocket",

                // semaphore_test
                "SemaphoreTest.*",
                "SempahoreTest.*",

                // sync_file_range_test
                // We actually pass this test, but the test expects ENOSYS because gVisor doesn't support
                // one of the flags we do support.
                "SyncFileRangeTest.CannotSyncFileRangeWithWaitBefore",

                // sysret_test
                "SysretTest.BadRip",
                "SysretTest.BadRsp",

                // tcp_socket_test
                "AllInetTests/SimpleTcpSocketTest.SetSocketAttachDetachFilter/*",
                "AllInetTests/TcpSocketTest.Tiocinq/*",

                // socket_ip_tcp_loopback_test
                "AllTCPSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/0",
                "AllTCPSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/1",
                "AllTCPSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/2",
                "AllTCPSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/3",
                "AllTCPSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/4",
                "AllTCPSockets/AllSocketPairTest.SetSocketRecvBufForceAboveMax/5",

                // socket_ip_unbound_netlink_test
                "IPUnboundSockets/IPv6UnboundSocketTest.ConnectToBadLocalAddress/1",
                "IPUnboundSockets/IPv4UnboundSocketTest.ConnectToBadLocalAddress/0",

                // socket_ipv4_udp_unbound_loopback_test
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.ReuseAddrReusePortDistribution/0",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.BindReuseAddrReusePortConvertibleToReusePort/0",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.SetSocketRecvBufAboveMax/0",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.SetSocketRecvBufBelowMin/0",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.BindReuseAddrThenReusePort/0",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.BindDoubleReuseAddrReusePortThenReusePort/0",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.ReuseAddrReusePortDistribution/1",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.BindReusePortThenReuseAddr/0",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.BindDoubleReuseAddrReusePortThenReusePort/1",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.BindReuseAddrThenReusePort/1",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.SetSocketRecvBufBelowMin/1",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.BindReusePortThenReuseAddr/1",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.SetSocketRecvBufAboveMax/1",
                "IPv4UDPSockets/IPv4UDPUnboundSocketTest.BindReuseAddrReusePortConvertibleToReusePort/1",

                // socket_ipv6_unbound_test
                "IPv6UnboundSockets/IPv6UnboundSocketTest.ZeroHopLimit/0",
                "IPv6UnboundSockets/IPv6UnboundSocketTest.ZeroHopLimit/1",

                // timerfd_test - https://fxbug.dev/42159666
                "AllTimerTypes/TimerfdTest.BlockingPoll_SetTimeResetsExpirations/CLOCK_MONOTONIC",
                "AllTimerTypes/TimerfdTest.BlockingPoll_SetTimeResetsExpirations/CLOCK_BOOTTIME",

                // timers_test
                "IntervalTimerTest.RealTimeSignalsAreNotDuplicated",
                "TimerTest.ProcessKilledOnCPUHardLimit",
                "TimerTest.ProcessKilledOnCPUSoftLimit",
                "TimerTest.ProcessPingedRepeatedlyAfterCPUSoftLimit",

                // udp_socket_test
                "AllInetTests/UdpSocketTest.Disconnect/*",
                "AllInetTests/UdpSocketTest.DisconnectAfterBind/*",
                "AllInetTests/UdpSocketTest.DisconnectAfterBindToAny/*",
                "AllInetTests/UdpSocketTest.DisconnectAfterConnectAnyWithPort/*",
                "AllInetTests/UdpSocketTest.DisconnectAfterConnectWithoutBind/*",
                "AllInetTests/UdpSocketTest.ReceiveAfterDisconnect/*",
                "AllInetTests/UdpSocketTest.RecvErrorConnRefused/*",
                "AllInetTests/UdpSocketTest.RecvErrorConnRefusedOtherAFSockOpt/*",
                "AllInetTests/UdpSocketTest.SetSocketDetachFilter/*",

                // packet_socket_raw_test
                "AllInetTests/RawPacketTest.SetSocketRecvBuf/0",
                "AllInetTests/RawPacketTest.SetSocketRecvBuf/1",

                // utimes_test
                "FutimesatTest.OnNullPathWithOPath",

                // wait_test - https://fxbug.dev/42159689
                "Waiters/WaitAnyChildTest.IgnoredChildRusage/*",
                "Waiters/WaitSpecificChildTest.SiblingChildrenWNOTHREAD/0",

                // The test runs as follows:
                // 1. P0T0 forks itself creating P1T0.
                // 2. P0T0 waits for P1 to exit normally.
                // 3. P1T0 clones itself using CLONE_THREAD | CLONE_VFORK. This creates P1T1 and
                //    halts P1T0.
                // 4. P1T1 invokes execve and successfully changes the running program to /bin/true.
                //
                // At this point, because execve was successful, P1T0 is supposed to be destroyed.
                // However, this is not implemented currently. P1T0 is unblocked, but it segfaults
                // (most likely due to the change of running program), failing the test.
                "Waiters/WaitSpecificChildTest.AfterChildExecve/*",

                // write_test
                "WriteTest.WriteExceedsRLimit",

                // xattr_test
                "XattrTest.SecurityCapacityXattr",
            ],
        },
        {
            type: "skip",
            matchers: [
                // These tests hang.
                "Syscall32Bit.Sysenter",
                "Syscall32Bit.Int80",
                "Syscall32Bit.Syscall",
                "Call32Bit.Disallowed",
                "ChrootTest.ProcMemSelfMapsNoEscapeProcOpen",
                "ConcurrencyTest.MultiProcessConcurrency",
                "ElfTest.PIE",
                "ElfTest.PIENonZeroStart",
                "EpollTest.DoubleEpollOneShot",
                "EpollTest.UnblockWithSignal",
                "SharedPrivate/PrivateAndSharedFutexTest.Wake0/*",
                "SharedPrivate/PrivateAndSharedFutexTest.WakeOpCondSuccess/*",
                "SharedPrivate/PrivateAndSharedFutexTest.WakeOpCondFailure/*",
                "Inotify.EpollNoDeadlock",

                // These tests hang.
                "AllInetTests/UdpSocketTest.ReconnectDoesNotClearReadShutdown/*",
                "AllInetTests/UdpSocketTest.ReconnectDoesNotClearWriteShutdown/*",

                // This hangs on debug builds.
                //
                // See https://fxbug.dev/42084731.
                "MountTest.MaxMountsWithSlave",

                // This test hangs because Netlink sockets do not support the
                // "MSG_PEEK" flag on reads.
                "NetlinkRouteTest.RecvmsgTruncPeek",

                // This test hangs because Netlink sockets do not ignore control
                // messages, and instead discard them as malformed.
                "NetlinkRouteTest.ControlMessageIgnored",

                // This test hangs because "RTM_F_LOOKUP_TABLE" is not supported.
                "NetlinkRouteTest.GetRouteRequest",

                // This test hangs because sending a request of unsupported type
                // should result in receiving a Netlink error message. The
                // current implementation returns an error to the write without
                // putting an error in the socket's recv buffer.
                "NetlinkRouteTest.MsgHdrMsgUnsuppType",

                // These tests hang because "RTM_DELLINK" is not supported.
                "NetlinkRouteTest.RemoveLinkByNameNotFound",
                "NetlinkRouteTest.RemoveLoopbackByName",
                "NetlinkRouteTest.RemoveLoopbackByIndex",

                // These tests assume 2+ Inotify events are returned and crashes otherwise.
                "Inotify.GetdentsGeneratesAccessEvent",

                // Breaks tests that run after it.
                "MountTest.MaxMounts",
                "MountTest.MountFailsOnPseudoFilesystemMountpoint",

                // We actually pass this test. It just takes a long time because the test
                // is doing 10 million one-byte transfers. The test is designed to take a
                // long time and trigger a watchdog mechanism in gVisor.
                "SendFileTest.SendFileToSelf",

                // Times out.
                "ItimerTest.DeliversSIGPROFToThreadsRoughlyFairlyIdle",

                // https://fxbug.dev/42085936
                "AllSocketPairTest.RecvTimeoutRecvmsgOneSecondSucceeds/*",
                "FilesystemUnixSockets/AllSocketPairTest.RecvTimeoutUsecNeg/*",
                "AllSocketPairTest.SendTimeoutUsecTooLarge/*",
                "AllSocketPairTest.SetGetRecvTimeoutLargerArg/*",

                // Passes in debian image, remove.
                "PingSocket.ICMPPortExhaustion",
                "Pipes/PipeTest.ZeroSize/*",
                "PollTest.BlockingEventPOLLRDNORM",
                "PollTest.BlockingEventPOLLWRNORM",
                "ProcTask.TaskDirCannotBeDeleted",
                "SigaltstackTest.WalksOffBottom",
                "Signalfd/SignalfdTest.Blocking/*",
                "Signalfd/SignalfdTest.ThreadGroup/*",
                "AddressFamily/SendFileTest.SendMultiple/*",
                "AddressFamily/SendFileTest.Shutdown/*",
                "BindToDeviceTest/BindToDeviceDistributionTest.Tcp/*",
                "BindToDeviceTest/BindToDeviceDistributionTest.Udp/*",
                "AllConnectedSockets/DataTransferStressTest.BigDataTransfer/*",
                "AllUnixDomainSockets/UnboundDgramUnixSocketPairTest.ZeroWriteAllowed/*",
                "AllUnixDomainSockets/UnixStreamSocketPairTest.ZeroLengthMessageFDDiscarded/*",
                "TeeTest.BlockingWrite",
                "TeeTest.MultiPage",
                "TeeTest.Blocking",
                "TimerTest.ProcessKilledOnCPUHardLimit",
                "TimerTest.ProcessKilledOnCPUSoftLimit",
                "TimerTest.ProcessPingedRepeatedlyAfterCPUSoftLimit",
                "FlockTest.TestSharedLockFailExclusiveHolderBlocking",
                "FlockTest.TestExclusiveLockFailExclusiveHolderBlocking",

                // TODO(https://fxbug.dev/42056557): Re-enable once flake is resolved.
                "Waiters/WaitSpecificChildTest.MultipleForkOutOfOrder/*",

                // TODO(https://fxbug.dev/42071800): Re-enable once flake is resolved.
                "SharedPrivate/PrivateAndSharedFutexTest.Wait_BitsetTimeout/*",

                // TODO(https://fxbug.dev/42071802): Re-enable once flake is resolved.
                "FilesystemUnixSockets/AllSocketPairTest.RecvTimeoutUsecTooLarge/*",

                // These tests are flaky.
                "ExceptionTest.IOAccessFault",
                "FcntlTest.SetFdO_ASYNC",
                "MountTest.BindToSelf",
                "MountTest.BindToSelf",
                "PselectTest.SignalMaskBlocksSignal",
                "UnameTest.Sanity",

                // TODO: These tests have different outcomes in socket_domain_test and
                // socket_ip_tcp_loopback_test.
                "AllUnixDomainSockets/AllSocketPairTest.SendmsgRecvmsgMsgCtruncNoop/*",
                "AllUnixDomainSockets/AllSocketPairTest.SetAndGetBooleanSocketOptions/*",
                "AllUnixDomainSockets/AllSocketPairTest.GetSocketOutOfBandInlineOption/*",

                // socket_udp_test - hanging tests.
                "AllInetTests/UdpSocketTest.ReadShutdown/*",
                "AllInetTests/UdpSocketTest.ReadShutdownDifferentThread/*",
                "AllInetTests/UdpSocketTest.ErrorQueue/*",

                // TODO(https://fxbug.dev/42066087): Re-enable once CLONE_VM | CLONE_THREAD is implemented
                "Waiters/WaitAnyChildTest.CloneSIGCHLD/*",
                "Waiters/WaitAnyChildTest.ForkAndClone/*",
                "Waiters/WaitSpecificChildTest.CloneSIGCHLD/*",
                "Waiters/WaitSpecificChildTest.CloneNoSIGCHLD/*",
                "Waiters/WaitSpecificChildTest.CloneAfterExit/*",
                "Waiters/WaitSpecificChildTest.CloneWCLONE/*",
                "Waiters/WaitSpecificChildTest.WALL/*",

                // These tests cause fatal signals that crash the test suite.
                "Processes.ExecSwapThreadGroupLeader",
                "ExecveatTest.UnshareFiles",
                "FaultTest.InRange",
                "FPSigTest.Fork",
                "FPSigTest.ForkWithZeroMxcsr",
                "ProcPidSymlink.SubprocessExited",
                "ProcPidCmdline.SubprocessForkSameCmdline",
                "SigaltstackTest.SetCurrentStack",
                "Signalfd.KillStillKills",
                "TimeTest.VsyscallTime_InvalidAddressSIGSEGV",
                "TkillTest.ValidTIDAndRealSignal",
                "VsyscallTest.VsyscallAlwaysAvailableOnGvisor",

                // Causes some other wait tests to fail.
                "WaitTest.TraceeWALL",

                // Fails in updated image, but passes with current. Will be removed after rolling
                // new images.
                "RlimitTest.SetRlimitHigher",

                // Requires investigation into error `libgcc_s.so.1 must be
                // installed for pthread_exit to work`.  It is likely a problem
                // where we are statically linking libgcc_s and dynamically linking
                // libpthread.  See http://g/grte/c/AOZW4ySVadE/m/NhMQgRs-5r8J
                "RobustFutexTest.PthreadMutexAttr",

                // uidgid_test - https://fxbug.dev/42159674
                "UidGidRootTest.SetgidNotFromThreadGroupLeader",

                // socket_bind_to_device_test
                "BindToDeviceTest*",

                // partial_bad_buffer_test
                // Passes in debian image, remove.
                "PartialBadBufferTest*",

                // Requires more rlimit support. Hangs without.
                "SpliceTest.FromPipeMaxFileSize",

                // Requires alarms. Hangs without.
                "SpliceTest.ToPipeWithSmallCapacityDoesNotSpin",

                // pty_test
                //TODO(https://fxbug.dev/42077394): Re-enable once flake is resolved.
                "JobControlTest.ReleaseTTYSignals",
                "JobControlTest.ReleaseUnsetTTY",
                "JobControlTest.SetForegroundProcessGroupSIGTTOUBackground",
                "JobControlTest.SetForegroundProcessGroupDifferentSession",
                "JobControlTest.SetForegroundProcessGroupNegPgid",
                "JobControlTest.SetTTY",

                // sigstop_test

                // TODO(https://fxbug.dev/42079297): Investigate failure on arm.
                "SigstopTest.RestartSyscall",

                // exec_binary_test
                // Passes on x86 and fails on arm.
                "ElfTest.MissingText",

                // Panics in process_builder.
                "ElfTest.PIEOverflow",

                // pause_test
                // Passes on x86, fails on ARM. Note that pause() is a syscall
                // on x86, but not on ARM, where it seems to be implemented with
                // rt_sigsuspend.
                "PauseTest.OnlyReturnsWhenSignalHandled",

                // SignalMask[Blocks/Allows]Signal require timers to send signals.
                // Passes sometimes, so it has to be skipped.
                // TODO(b/297438987): Re-enable once timers are implemented.
                "PpollTest.SignalMaskBlocksSignal",

                // These tests hang / hard crash
                "PtraceTest.AttachingConvertsGroupStopToPtraceStop",

                // TODO(https://fxbug.dev/297434895): This test hangs if
                // multithreaded exec doesn't work.
                "TraceExec/PtraceExecveTest.Execve_GetRegs_PeekUser_SIGKILL_TraceClone_TraceExit/0",
                "TraceExec/PtraceExecveTest.Execve_GetRegs_PeekUser_SIGKILL_TraceClone_TraceExit/1",

                // TODO(https://fxbug.dev/42079561): Fix flake.
                "VforkTest.ExecedChildExitDoesntUnstopParent",
                "VforkTest.ParentStopsUntilChildExits",

                // TODO(b/302340440): Save XMM registers in signal handlers on x64.
                "FPSigTest.NestedSignals",

                // Skip for roll
                "PivotRootTest.UnreachableNewRootFails",

                // Skip for roll
                "RtSignalTest.ValueDelivered",

                // Depend on missing timer feature.
                "FifoTest.OpenBlockedAndInterrupted",
            ],
        },
    ],
}
