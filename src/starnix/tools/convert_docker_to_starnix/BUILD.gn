# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/host.gni")
import("//build/rust/rustc_binary.gni")

group("convert_docker_to_starnix") {
  deps = [ ":host" ]
}

install_host_tools("host") {
  deps = [ ":convert_docker_to_starnix_bin" ]
  outputs = [ "convert_docker_to_starnix" ]
}

if (is_host) {
  _default_init_arm64_target =
      "//src/starnix/containers/default_init(//build/toolchain:linux_arm64)"
  _default_init_arm64_path =
      get_label_info(_default_init_arm64_target, "root_out_dir") + "/" +
      get_label_info(_default_init_arm64_target, "name")

  _default_init_x64_target =
      "//src/starnix/containers/default_init(//build/toolchain:linux_x64)"
  _default_init_x64_path =
      get_label_info(_default_init_x64_target, "root_out_dir") + "/" +
      get_label_info(_default_init_x64_target, "name")

  rustc_binary("convert_docker_to_starnix_bin") {
    name = "convert_docker_to_starnix"
    edition = "2021"

    deps = [
      "//src/lib/fidl/rust/fidl",
      "//src/lib/fuchsia-async",
      "//src/starnix/tools/tar_to_pkg:tar_img_extract",
      "//src/sys/pkg/lib/fuchsia-pkg",
      "//third_party/rust_crates:anyhow",
      "//third_party/rust_crates:argh",
      "//third_party/rust_crates:serde_json",
      "//third_party/rust_crates:tempfile",
      "//tools/lib/cml",
      _default_init_arm64_target,
      _default_init_x64_target,
    ]

    sources = [
      "src/args.rs",
      "src/component_manifest.rs",
      "src/default_init.rs",
      "src/main.rs",
    ]

    inputs = [
      _default_init_arm64_path,
      _default_init_x64_path,
    ]

    # The code being compiled uses these paths to embed the corresponding generated files at compile
    # time, which makes the resulting files less reusable for caching because they depend on the
    # path of the output directory.
    configs += [ "//build/config/rust:output_dir_sensitive" ]
    rustenv = [
      "DEFAULT_INIT_ARM64_PATH=" + rebase_path(_default_init_arm64_path, "src"),
      "DEFAULT_INIT_X64_PATH=" + rebase_path(_default_init_x64_path, "src"),
    ]
  }

  group("tests") {
    testonly = true
    deps = [
      # NOTE: convert_docker_to_starnix does not have any test yet. By listing it here, we can at least
      # verify that it compiles in CQ.
      ":convert_docker_to_starnix_bin",
    ]
  }
}
