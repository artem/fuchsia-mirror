import("//build/components.gni")
import("//build/python/python_mobly_test.gni")
import("//build/test.gni")

group("squareload") {
  testonly = true
  public_deps = [
    ":power_squareload_test_fc($host_toolchain)",
    ":squareload_test",
  ]
}

executable("squareload_bin") {
  output_name = "squareload"
  testonly = true
  deps = [
    "//sdk/lib/syslog/cpp",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gtest",
  ]
  sources = [ "main.cc" ]
}

fuchsia_unittest_package("squareload_test") {
  deps = [ ":squareload_bin" ]
}

if (is_host) {
  _runtime_deps_dir = "${target_out_dir}/power_hybrid_test_fc"
  host_test_data("runtime_deps") {
    sources = [
      "${root_out_dir}/catapult_converter",
      "${root_out_dir}/trace2json",
    ]
    outputs = [ "${_runtime_deps_dir}/{{source_file_part}}" ]
    deps = [
      "//src/performance/trace2json:bin",
      "//src/testing/catapult_converter:converter_bin",
    ]
  }

  host_test_data("perf_publish_runtime_deps") {
    sources = [
      "${root_out_dir}/catapult_converter",
      "${root_out_dir}/trace2json",
      "//src/tests/end_to_end/perf/expected_metric_names/fuchsia.power.squareload_cpu.txt",
    ]
    outputs = [ "${target_out_dir}/runtime_deps/{{source_file_part}}" ]
    deps = [
      "//src/performance/trace2json:bin",
      "//src/testing/catapult_converter:converter_bin",
    ]
  }

  # This test measures DUT power consumed by the cpu square wave load test.
  python_mobly_test("power_squareload_test_fc") {
    main_source =
        "//src/testing/end_to_end/mobly_base_tests/fuchsia_power_base_test.py"
    libraries = [
      "//src/testing/end_to_end/mobly_base_tests:fuchsia_power_base_test",
      "//src/testing/end_to_end/honeydew",
    ]

    params_source = "squareload_test_params.yaml"
    transport = "fuchsia-controller"
    environments = [ vim3_env ]
    deps = [
      ":perf_publish_runtime_deps",
      ":runtime_deps",
    ]

    # Match the host test's infra timeout with the underlying hermetic test's.
    timeout_secs = 600
  }
}
