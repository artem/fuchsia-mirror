# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/python/python_mobly_test.gni")
import("//build/testing/host_test_data.gni")

# Define a new Python-driven benchmark test. This template ensures that all the libraries and
# required binaries are available for the test.
#
# Parameters
#   main_source (required)
#     The entrypoint that contains the __main__ to execute the test.
#     Type: path
#
#   expected_metric_filenames (required)
#     The file containing the expected metrics.
#     Type: list(string)
#
#   libraries (optional)
#     Additional libraries that the test depends on if any.
#     Type: list(string)
#     Default: empty list
#
#   environments (optional)
#     Additional environments in which the test can run.
#     Type: list(string)
#     Default: empty list, will use the default environments only (vim3, nuc)
template("python_perf_test") {
  assert(defined(invoker.main_source), "main_source is required")
  assert(defined(invoker.expected_metric_filenames),
         "expected_metric_filenames is required")
  assert(is_host)

  _runtime_deps_target = "${target_name}_runtime_deps"
  _runtime_deps_dir = "${target_out_dir}/${target_name}/runtime_deps"
  host_test_data(_runtime_deps_target) {
    sources = [
      "${root_out_dir}/catapult_converter",
      "${root_out_dir}/trace2json",
    ]
    foreach(filename, invoker.expected_metric_filenames) {
      sources +=
          [ "//src/tests/end_to_end/perf/expected_metric_names/${filename}" ]
    }
    outputs = [ "${_runtime_deps_dir}/{{source_file_part}}" ]
    deps = [
      "//src/performance/trace2json:bin",
      "//src/testing/catapult_converter:converter_bin",
    ]
  }

  python_mobly_test("${target_name}") {
    forward_variables_from(invoker, [ "main_source" ])

    libraries = [
      "//src/performance/lib/perf_publish",
      "//src/testing/end_to_end/honeydew",
      "//src/testing/end_to_end/mobly_base_tests:fuchsia_base_test",
    ]
    if (defined(invoker.libraries)) {
      libraries += invoker.libraries
    }

    deps = [ ":${_runtime_deps_target}" ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }

    environments = [
      nuc_env,
      vim3_env,
    ]
    if (defined(invoker.environments)) {
      environments += invoker.environments
    }
  }
}
