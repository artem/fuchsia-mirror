# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/testing/kernel_zbi_test.gni")
import("//build/testing/zbi_test_executable.gni")
import(
    "//src/tests/early-boot-coverage/host-test/coverage_verification_test.gni")

if (is_fuchsia) {
  config("coverage") {
    cflags = [
      "-fprofile-instr-generate",
      "-fcoverage-mapping",
    ]

    if (toolchain_variant.tags + [ "hwasan" ] - [ "hwasan" ] ==
        toolchain_variant.tags) {
      # TODO(fxbug.dev/107896): We run into a linker error where a tagged
      # definition of __llvm_profile_counter_bias is provided in this executable,
      # but the statically-linked profile runtime is not hwasan instrumented, so
      # any reference to the tagged __llvm_profile_counter_bias fails during an
      # overflow check in the R_AARCH64_ADR_PREL_PG_HI21 relocation since the tag
      # is outside the 32-bit range. For now, we can disable hwasan from
      # instrumenting globals generated by the profile runtime.
      cflags += [
        "-mllvm",
        "--hwasan-globals=0",
      ]
    }

    ldflags = cflags
  }

  # Represents a standalone elf that provides coverage data. This is a toy
  # example of what things like core-test would do.
  zbi_test_executable("standalone-main-bin") {
    #testonly = true
    sources = [ "standalone-main.cc" ]
    configs += [ ":coverage" ]

    # Coverage and profiling instrumentation are incompatible within the same
    # TU, so ensure we don't instrument this test incorrectly by mixing them.
    exclude_toolchain_tags = [ "profile" ]
    deps = [
      "//src/lib/llvm-profdata:coverage-example",
      "//src/zircon/testing/standalone-test",
    ]
  }

  # Generate a kernel_zbi test with the executable as a test.
  kernel_zbi_test("standalone-coverage-zbi") {
    deps = [ ":standalone-main-bin" ]

    # The empty device list prevents this image from being launched by infra
    # as an individual shard. The sole purpose of this image is to be launched
    # by the host interaction test.
    device_types = []
  }
}

if (current_toolchain == default_toolchain) {
  # Generate a cuckoo image that will proceed to boot to a fully working system
  # after running the test, and be ready to exfiltrate the data.
  cuckoo_kernel_zbi_test("cuckoo-standalone-coverage-test") {
    kernel_zbi = ":standalone-coverage-zbi"
    kernel_image_name = "standalone-coverage-zbi"

    # Prevents the collector test from being run as part of infra.
    environments = []
  }
}

if (is_host) {
  coverage_verification_test("standalone-coverage-verification-test") {
    instrumented_target = ":standalone-main-bin($target_toolchain)"
    assembled_system =
        ":cuckoo-standalone-coverage-test_zbi($default_toolchain)"
    test_uri = "fuchsia-pkg://fuchsia.com/cuckoo-standalone-coverage-test_test#meta/cuckoo-standalone-coverage-test_test.cm"
    expectations = [
      {
        source = "//src/lib/llvm-profdata/coverage-example.cc"
        functions = [
          {
            name = "LinkTimeDeadFunction()"
            count = 0
          },
          {
            name = "RunTimeDeadFunction()"
            count = 0
          },
          {
            name = "MaybeCallRunTimeDeadFunction(bool)"
            count = 1
          },
          {
            name = "RunTimeCoveredFunction()"
            count = 2
          },
        ]
      },
    ]
  }
}

group("standalone-test") {
  testonly = true
  deps = [ ":standalone-coverage-verification-test($host_toolchain)" ]
}
