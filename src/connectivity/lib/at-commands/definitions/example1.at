# Comments are ignored
# TODO(https://fxbug.dev/42139923) Move these to real tests

# Execute command with no arguments
command { ATTESTEX }

# Extension execute command with no arguments
command { AT+TESTEXEXT }

# Execute command with no arguments and custom name
command TestCommand { ATTESTNEX }

# Extension execute command with one argument, no trailing comma
command { AT+TESTEXEXTFI=field: Integer }

# Extension execute command with one argument, with trailing comma
command { AT+TESTEXEXTFIC=field: Integer, }

# Extension execute command with a nonstandard delimiter
command { AT+TESTNSD>field: Integer, }

# Extension execute command with a ; terminator
command { AT+TESTNST=field: Integer; }

# Extension execute command with a nonstandard delimiter and a ; delimiter
command { AT+TESTNSDNST>field: Integer,; }

# Extension execute command with no delimiter
command { AT+TESTNODfield: Integer, }

# Extension execute command with one argument, no trailing comma
command { AT+TESTEXEXTFS=field: String, }

# Extension execute command with multiple arguments, no trailing comma
command { AT+TESTEXEXTFSI=field1: String, field2: Integer }

# Extension execute command with multiple arguments, with trailing comma
command { AT+TESTEXEXTFSIC=field1: String, field2: Integer,}

# Option type argument
command { AT+TESTIO=field1: Integer, field2: Option<Integer>}

# List type argument
command { AT+TESTL=field: List<Integer>}

# List type argument with optional elements
command { AT+TESTOL=field: List<Option<Integer>>}

# Map  type arguments
command { AT+TESTM=field: Map<Integer, String> }

# Paren delimited argument list
command { AT+TESTP=(field: Integer) }

# Paren delimited multiple argment lists
command { AT+TESTPP=(field1: Integer)(field2: Integer, field3: String) }

# Paren delimited multiple argment lists with map and lists
command {
    AT+TESTPMPIL=
        (field1: Map<Integer, String>)
        (field2: Integer, field3: List<Integer>)
}

# Read command
command { ATTESTR? }

# Extension read command
command { AT+TESTREX? }

# Test command
command { ATTESTT=? }

# Extension test command
command { AT+TESTTEX=? }

# Response with no arguments
response { TEST: }

# Response with no arguments, no delimiter
response { TESTNOD }

# Response with no arguments and custom name
response TestResponse { TESTN: }

# Extension response command with no arguments
response { +TESTEXT: }

# Extension response command with no arguments, no delimiter
response { +TESTEXTNOD }

# Extension response with one argument, no trailing comma
response { +TESTI: field: Integer }

# Extension response with one argument, no trailing comma, no delimiter
response { +TESTINOD field: Integer }

# Extension response with one argument, with trailing comma
response { +TESTIC: field: Integer, }

# Extension response with one argument, no trailing comma
response { +TESTS: field: String }

# Extension response with multiple arguments, no trailing comma
response { +TESTSI: field1: String, field2: Integer }

# Extension response with multiple arguments, with trailing comma
response { +TESTSIC: field1: String, field2: Integer,}

# Option type arguments
response { +TESTIO: field1: Integer, field2: Option<Integer> }

# List type arguments
response { +TESTL: field: List<Integer> }

# List type arguments with optional elements
response { +TESTOL: field: List<Option<Integer>> }

# Map type arguments
response { +TESTM: field: Map<Integer, String> }

# Response with paren delimited argument list
response { +TESTP: (field: Integer) }

# Response with paren delimited multiple argment lists
response { +TESTPP: (field1: Integer)(field2: Integer, field3: String) }

# Paren delimited multiple argument lists with map and list
response {
    +TESTPMPIL:
        (field1: Map<Integer, String>)
        (field2: Integer, field3: List<Integer>)
}

# Two responses that differ only in their argument list delimiters.
response SameOne { SAME: field: Integer }
response SameTwo { SAME: (field: Integer) }

# Enum with one variant
enum TestOneVariant {
    Variant1 = 1
}

# Enum with one variant, trailing comma
enum TestOneVariantComma {
    Variant1 = 1,
}

# Enum with multiple variants
enum TestTwoVariants {
    Variant1 = 1,
    Variant2 = 2
}

# Enum with multiple variants, trailing comma
enum TestTwoVariantsComma {
    Variant1 = 1,
    Variant2 = 2,
}

# Command with an eum argument
command { ATTESTENUM=field: TestOneVariantComma }

# Command with a bool argument
command { ATTESTBOOL=field: BoolAsInt }
