# Copyright (c) 2018 The Fuchsia Authors.
#
# Permission to use, copy, modify, and/or distribute this software for any purpose with or without
# fee is hereby granted, provided that the above copyright notice and this permission notice appear
# in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
# SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
# AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.

import("//build/bind/bind.gni")
import("//build/components.gni")
import("//build/drivers.gni")
import("config.gni")

# By default, targets are only visible here and to subdirectories.
visibility = [ "./*" ]

# The brcmfmac driver can be built with support for different system buses (SDIO and
# simulated-firmware), and different configurations will require different support.
#
# * CONFIG_BRCMFMAC_SDIO
# * CONFIG_BRCMFMAC_SIM
#
# These #defines are applied as public_configs entries on the targets:
# respectively:
#
# * sdio/sdio
# * sim/sim
#

# Sources set for driver logging.
source_set("debug") {
  public = [ "debug.h" ]
  public_deps = [
    "//sdk/lib/driver/compat/cpp:logging",
    "//src/connectivity/wlan/drivers/lib/log/cpp:dfv2",
    "//zircon/system/public",
  ]
}

# Sources for utility classes.  Classes here should be small and self-contained, having no
# dependencies.
source_set("util") {
  public = [
    "intrusive_list.h",
    "task_queue.h",
  ]
}

# Sources for Linux porting compatibility.
source_set("linuxisms") {
  sources = [
    "linuxisms.cc",
    "workqueue.cc",
  ]
  public = [
    "linuxisms.h",
    "workqueue.h",
  ]
  deps = [
    ":debug",
    "//zircon/system/ulib/sync",
    "//zircon/system/ulib/zircon-internal",
  ]
  public_deps = [
    "//sdk/fidl/fuchsia.wlan.common:fuchsia.wlan.common_cpp",
    "//src/devices/lib/driver:driver_runtime",
    "//zircon/system/public",
    "//zircon/system/ulib/sync:sync-cpp",
  ]
}

# Sources for the BCDC firmware protocol.
source_set("bcdc") {
  sources = [ "bcdc.cc" ]
  public = [ "bcdc.h" ]
  deps = [
    ":core",
    ":debug",
    "//zircon/system/public",
  ]
  public_deps = [
    ":core",
    ":linuxisms",
    "//sdk/lib/stdcompat",
  ]

  # TODO(https://fxbug.dev/42136089): delete the below and fix compiler warnings
  configs += [ "//build/config:Wno-conversion" ]
}

# Sources for timer implementation.
source_set("timer") {
  sources = [ "timer.cc" ]
  public = [ "timer.h" ]
  public_deps = [
    "//zircon/system/ulib/async",
    "//zircon/system/ulib/sync",
  ]
}

# Sources for the driver core logic.
source_set("core") {
  sources = [
    "bits.h",
    "btcoex.cc",
    "btcoex.h",
    "cfg80211.cc",
    "chip.cc",
    "common.cc",
    "core.cc",
    "d11.cc",
    "device.cc",
    "feature.cc",
    "fweh.cc",
    "fwil.cc",
    "utils.cc",
    "wlan_interface.cc",
    "wlan_interface.h",
  ]
  public = [
    "bcdc.h",
    "bits.h",
    "brcm_hw_ids.h",
    "brcmu_d11.h",
    "brcmu_utils.h",
    "brcmu_wifi.h",
    "bus.h",
    "calls.h",
    "cfg80211.h",
    "chip.h",
    "chipcommon.h",
    "common.h",
    "core.h",
    "defs.h",
    "device.h",
    "feature.h",
    "fweh.h",
    "fwil.h",
    "fwil_types.h",
    "proto.h",
    "soc.h",
    "wlan_interface.h",
  ]
  deps = [
    ":timer",
    "//sdk/lib/driver/component/cpp:cpp",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac/inspect",
    "//src/connectivity/wlan/lib/common/cpp:common",
    "//third_party/bcmdhd/crossdriver:bcmdhd_crossdriver",
    "//zircon/system/ulib/async",
  ]
  public_deps = [
    ":debug",
    ":linuxisms",
    "//sdk/fidl/fuchsia.driver.compat:fuchsia.driver.compat_cpp",
    "//sdk/fidl/fuchsia.wlan.fullmac:fuchsia.wlan.fullmac_cpp",
    "//sdk/fidl/fuchsia.wlan.phyimpl:fuchsia.wlan.phyimpl_bindlib_cpp",
    "//sdk/fidl/fuchsia.wlan.phyimpl:fuchsia.wlan.phyimpl_cpp",
    "//sdk/lib/driver/compat/cpp:logging",
    "//sdk/lib/driver/component/cpp:cpp",
    "//sdk/lib/driver/runtime:driver_runtime",
    "//sdk/lib/stdcompat",
    "//src/connectivity/wlan/drivers/lib/components:cpp",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac/recovery",
    "//src/connectivity/wlan/lib/common/cpp:common",
    "//src/devices/lib/broadcom",
    "//third_party/bcmdhd/crossdriver:bcmdhd_crossdriver",
    "//zircon/system/public",
    "//zircon/system/ulib/sync",
    "//zircon/system/ulib/sync:sync-cpp",
  ]
  friend = [ "test/*" ]

  # Suppress warnings the brcmfmac code doesn't comply with.
  configs += [ "//build/config:Wno-unused-but-set-variable" ]

  # TODO(https://fxbug.dev/42136089): delete the below and fix compiler warnings
  configs += [ "//build/config:Wno-conversion" ]

  # TODO(https://fxbug.dev/42085293): delete the below and fix compiler warnings
  configs += [ "//build/config:Wno-vla-cxx-extension" ]
}

# Source set including the driver sources, and the bus definitions conditionally compiled in on each
# platform.
source_set("driver_sources") {
  deps = [
    ":core",
    ":debug",
    "//sdk/lib/driver/runtime:driver_runtime",
  ]

  # The bus target dependencies below are public_deps so that their configs propagate to users of
  # this target.
  public_deps = [
    ":brcmfmac_sdio_bind",
    "sdio",
  ]
}

bind_library("fuchsia.brcmfmac") {
  source = "fuchsia.brcmfmac.bind"
}

driver_bind_rules("brcmfmac_sdio_bind") {
  rules = "brcmfmac_sdio.bind"
  bind_output = "brcmfmac_sdio.bindbc"
  deps = [
    "//sdk/fidl/fuchsia.hardware.gpio:fuchsia.hardware.gpio_bindlib",
    "//sdk/fidl/fuchsia.hardware.sdio:fuchsia.hardware.sdio_bindlib",
    "//src/devices/bind/fuchsia.broadcom.platform",
    "//src/devices/bind/fuchsia.platform",
  ]
}

# Driver module for the brcmfmac driver.
fuchsia_driver("fuchsia_driver-driver") {
  output_name = "brcmfmac"
  sources = []
  deps = [
    ":core",
    ":driver_sources",
    "//src/connectivity/wlan/lib/common/cpp:common",
  ]

  # TODO(https://fxbug.dev/42136089): delete the below and fix compiler warnings
  configs += [ "//build/config:Wno-conversion" ]
}

fuchsia_driver_component("fuchsia_driver") {
  component_name = "brcmfmac"
  manifest = "meta/brcmfmac_sdio.cml"
  deps = [ ":fuchsia_driver-driver" ]
  visibility += [
    "//bundles/drivers/pci",
    "//src/connectivity/wlan:drivers",
  ]
  info = "fuchsia_driver-info.json"
}

# Driver module for the test version of the brcmfmac driver, which includes run_unit_tests() DDK
# tests.
fuchsia_driver("test_fuchsia_driver-driver") {
  output_name = "brcmfmac-test"

  sources = []
  deps = [
    ":core",
    ":driver_sources",
  ]

  # TODO(https://fxbug.dev/42136089): delete the below and fix compiler warnings
  configs += [ "//build/config:Wno-conversion" ]
}

fuchsia_driver_component("test_fuchsia_driver") {
  component_name = "brcmfmac-test"
  deps = [ ":test_fuchsia_driver-driver" ]
  visibility += [ "//src/connectivity/wlan:drivers" ]
  info = "test_fuchsia_driver-info.json"
  manifest = "meta/brcmfmac-test.cml"
}

brcmfmac_driver("brcmfmac-astro") {
  board = "astro"
  bus = "sdio"
  chip = "brcmfmac43455"
  clm_present = true
  diagnostic_deps = [ "//src/diagnostics/config/triage:brcmfmac-detect" ]
}

brcmfmac_driver("brcmfmac-astro-mfg") {
  board = "astro-mfg"
  bus = "sdio"
  chip = "brcmfmac43455"
  clm_present = true
  diagnostic_deps = [ "//src/diagnostics/config/triage:brcmfmac-detect" ]
}

brcmfmac_driver("brcmfmac-sherlock") {
  board = "sherlock"
  bus = "sdio"
  chip = "brcmfmac43455"
  clm_present = true
  diagnostic_deps = [ "//src/diagnostics/config/triage:brcmfmac-detect" ]
}

brcmfmac_driver("brcmfmac-sherlock-mfg") {
  board = "sherlock-mfg"
  bus = "sdio"
  chip = "brcmfmac43455"
  clm_present = true
  diagnostic_deps = [ "//src/diagnostics/config/triage:brcmfmac-detect" ]
}

brcmfmac_driver("brcmfmac-luis") {
  board = "luis"
  bus = "sdio"
  chip = "brcmfmac43455"
  clm_present = true
  diagnostic_deps = [ "//src/diagnostics/config/triage:brcmfmac-detect" ]
}

brcmfmac_driver("brcmfmac-luis-mfg") {
  board = "luis-mfg"
  bus = "sdio"
  chip = "brcmfmac43455"
  clm_present = true
  diagnostic_deps = [ "//src/diagnostics/config/triage:brcmfmac-detect" ]
}

brcmfmac_driver("brcmfmac-nelson") {
  board = "nelson"
  bus = "sdio"
  chip = "brcmfmac43455"
  clm_present = true
  diagnostic_deps = [ "//src/diagnostics/config/triage:brcmfmac-detect" ]
}

brcmfmac_driver("brcmfmac-nelson-mfg") {
  board = "nelson-mfg"
  bus = "sdio"
  chip = "brcmfmac43455"
  clm_present = true
  diagnostic_deps = [ "//src/diagnostics/config/triage:brcmfmac-detect" ]
}

brcmfmac_driver("brcmfmac-vim3") {
  board = "vim3"
  bus = "sdio"
  chip = "brcmfmac4359"
  clm_present = false
  diagnostic_deps = [ "//src/diagnostics/config/triage:brcmfmac-detect" ]
}

# The test package, including tests in subdirs.
group("brcmfmac_tests") {
  deps = [
    "recovery/test:brcmfmac_recovery_test",
    "sdio/test:brcmfmac_sdio_test",
    "sim/test:brcmfmac_sim_test",
    "test:brcmfmac_debug_test",
    "test:brcmfmac_device_inspect_test",
    "test:brcmfmac_test",
  ]
  testonly = true
  visibility += [ "*" ]
}

group("brcmfmac_host_tests") {
  deps = [ "test:brcmfmac_host_tests" ]
  testonly = true
  visibility += [ "*" ]
}
