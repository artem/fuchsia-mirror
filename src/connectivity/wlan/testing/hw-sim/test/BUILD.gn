# Copyright 2021 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//build/testing/environments.gni")

# Template to generate all the components and packages required for a hw-sim integration test.
# This outputs:
#   - A component named "${target_name}-test-root-component" which is the unique test root for this
#   test case.
#   - A package named "${target_name}-wlan-hw-sim-integration-test" that contains the full
#   integration test for the input test case, including the test root component and realm factory.
#
# Parameters
#   manifest (required)
#     The manifest for the test component.
#
#   deps (required)
#     The dependencies required for the test component.
#
#   test_specs (optional)
#     Test specifications to apply to the test. By default, this will ignore ERROR logs.
template("_hw_sim_integration_test") {
  assert(defined(invoker.manifest))
  assert(defined(invoker.deps))

  component_name = "${target_name}-component"
  test_suite_package_name = "${target_name}-wlan-hw-sim-test-suite"
  integration_test_package_name = "${target_name}-wlan-hw-sim-integration-test"

  # Component containing test suite and wlantap-driver, used only in this BUILD file.
  fuchsia_component(component_name) {
    testonly = true
    component_name = "test-suite"
    manifest = invoker.manifest
    visibility = [ ":*" ]
    deps = invoker.deps +
           [ "//src/connectivity/wlan/testing/wlantap-driver:wlantap_driver" ]
  }

  # Test suite package. Will be subpackaged by the integration test package.
  fuchsia_package(test_suite_package_name) {
    testonly = true
    package_name = "${test_suite_package_name}"
    deps = [ ":$component_name" ]
    visibility = [ ":*" ]
  }

  # Generates component manifest for the test root component.
  test_root_name = "${target_name}-test-root"
  test_root_manifest_target = "${test_root_name}-manifest"
  test_root_manifest = "${target_gen_dir}/${test_root_name}.cml"
  generated_file(test_root_manifest_target) {
    testonly = true
    contents = {
      include = [
        "//src/connectivity/wlan/testing/hw-sim/test/meta/test-root.shard.cml",
      ]
      children = [
        {
          name = "test_suite"
          url = "${test_suite_package_name}#meta/test-suite.cm"
        },
      ]
    }
    outputs = [ test_root_manifest ]
    output_conversion = "json"
    visibility = [ ":*" ]
  }

  # Create test-root using generated component manifest.
  test_root_component = "${test_root_name}-component"
  fuchsia_component(test_root_component) {
    testonly = true
    manifest = test_root_manifest
    deps = [
      ":${test_root_manifest_target}",
      "//src/storage/memfs:memfs_component",
    ]
  }

  # Package containing full integration test.
  fuchsia_test_package(integration_test_package_name) {
    if (defined(invoker.test_specs)) {
      test_specs = invoker.test_specs
    } else {
      test_specs = {
        log_settings = {
          max_severity = "ERROR"
        }
      }
    }
    test_components = [ ":${test_root_component}" ]
    subpackages = [
      "../testing/realm-factory",
      "//src/lib/fuchsia-component-test/realm_builder_server:pkg",
      ":${test_suite_package_name}",
    ]
    visibility = [ ":*" ]
  }
}

_hw_sim_integration_test("scan-contemporary-privacy") {
  manifest = "meta/scan_contemporary_privacy.cml"
  deps = [ "scan_contemporary_privacy" ]
}

_hw_sim_integration_test("scan-legacy-privacy") {
  manifest = "meta/scan_legacy_privacy.cml"
  deps = [ "scan_legacy_privacy" ]
}

_hw_sim_integration_test("connect-to-all-modern-bss-protections") {
  manifest = "meta/connect_to_all_modern_bss_protections.cml"
  deps = [ "connect_to_all_modern_bss_protections" ]
}

_hw_sim_integration_test("connect-to-open-network") {
  manifest = "meta/connect_to_open_network.cml"
  deps = [ "connect_to_open_network" ]
}

_hw_sim_integration_test("connect-to-wpa1-network") {
  manifest = "meta/connect_to_wpa1_network.cml"
  deps = [ "connect_to_wpa1_network" ]
}

_hw_sim_integration_test("connect-with-bad-password") {
  manifest = "meta/connect_with_bad_password.cml"
  deps = [ "connect_with_bad_password" ]
}

_hw_sim_integration_test("connect-with-failed-association") {
  manifest = "meta/connect_with_failed_association.cml"
  deps = [ "connect_with_failed_association" ]
}

_hw_sim_integration_test("connect-with-wrong-credential-type") {
  manifest = "meta/connect_with_wrong_credential_type.cml"
  deps = [ "connect_with_wrong_credential_type" ]
}

_hw_sim_integration_test("ethernet-tx-rx") {
  manifest = "meta/ethernet_tx_rx.cml"
  deps = [ "ethernet_tx_rx" ]
}

_hw_sim_integration_test("handle-tx-event-hooks") {
  manifest = "meta/handle-tx-event-hooks.cml"
  deps = [ "handle_tx_event_hooks" ]
}

_hw_sim_integration_test("multiple-clients-ap") {
  manifest = "meta/multiple_clients_ap.cml"
  deps = [ "multiple_clients_ap" ]
}

_hw_sim_integration_test("open-ap-connect") {
  manifest = "meta/open_ap_connect.cml"
  deps = [ "open_ap_connect" ]
}

_hw_sim_integration_test("reconnect-to-wpa2-network") {
  manifest = "meta/reconnect_to_wpa2_network.cml"
  deps = [ "reconnect_to_wpa2_network" ]
}

_hw_sim_integration_test("set-country") {
  manifest = "meta/set_country.cml"
  deps = [ "set_country" ]
}

_hw_sim_integration_test("sim-client-vs-sim-ap") {
  manifest = "meta/sim_client_vs_sim_ap.cml"
  deps = [ "sim_client_vs_sim_ap" ]
}

_hw_sim_integration_test("simulate-scan") {
  manifest = "meta/simulate_scan.cml"
  deps = [ "simulate_scan" ]
}

_hw_sim_integration_test("verify-ethernet") {
  manifest = "meta/verify_ethernet.cml"
  deps = [ "verify_ethernet" ]
}

_hw_sim_integration_test("verify-wlan-inspect") {
  manifest = "meta/verify_wlan_inspect.cml"
  deps = [ "verify_wlan_inspect" ]
}

_hw_sim_integration_test("run-without-regulatory-manager") {
  manifest = "meta/run_without_regulatory_manager.cml"
  deps = [ "run_without_regulatory_manager" ]
}

_hw_sim_integration_test("autoconnect-idle-iface") {
  manifest = "meta/autoconnect_idle_iface.cml"
  deps = [ "autoconnect_idle_iface" ]
}

_hw_sim_integration_test("rate-selection") {
  test_specs = {
    environments = [ nuc_env ]
    log_settings = {
      max_severity = "ERROR"
    }
  }
  manifest = "meta/rate_selection.cml"
  deps = [ "rate_selection" ]
}

group("wlan-hw-sim-component-tests") {
  testonly = true
  deps = [
    ":autoconnect-idle-iface-wlan-hw-sim-integration-test",
    ":connect-to-all-modern-bss-protections-wlan-hw-sim-integration-test",
    ":connect-to-open-network-wlan-hw-sim-integration-test",
    ":connect-to-wpa1-network-wlan-hw-sim-integration-test",
    ":connect-with-bad-password-wlan-hw-sim-integration-test",
    ":connect-with-failed-association-wlan-hw-sim-integration-test",
    ":connect-with-wrong-credential-type-wlan-hw-sim-integration-test",
    ":ethernet-tx-rx-wlan-hw-sim-integration-test",
    ":handle-tx-event-hooks-wlan-hw-sim-integration-test",
    ":multiple-clients-ap-wlan-hw-sim-integration-test",
    ":open-ap-connect-wlan-hw-sim-integration-test",
    ":rate-selection-wlan-hw-sim-integration-test",
    ":reconnect-to-wpa2-network-wlan-hw-sim-integration-test",
    ":run-without-regulatory-manager-wlan-hw-sim-integration-test",
    ":scan-contemporary-privacy-wlan-hw-sim-integration-test",
    ":scan-legacy-privacy-wlan-hw-sim-integration-test",
    ":set-country-wlan-hw-sim-integration-test",
    ":sim-client-vs-sim-ap-wlan-hw-sim-integration-test",
    ":simulate-scan-wlan-hw-sim-integration-test",
    ":verify-ethernet-wlan-hw-sim-integration-test",
    ":verify-wlan-inspect-wlan-hw-sim-integration-test",
  ]
}
