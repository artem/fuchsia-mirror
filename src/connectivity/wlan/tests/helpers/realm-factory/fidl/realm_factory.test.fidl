// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// TODO(b/317255344): Remove the deprecated types/fields in this file once no
// CTF tests depend on the deprecated API.
// TODO(b/317219542): Rename to start with "fuchsia." and use versioning.
library test.wlan.realm;

using fuchsia.component.sandbox;
using fuchsia.testing.harness;
using fuchsia.io;
using fuchsia.driver.test;

/// Defines the configuration of the WLAN components under test.
@deprecated
type WlanConfig = resource table {
    /// If true, WEP and WPA1 are supported.
    /// If not present, defaults to false.
    1: use_legacy_privacy bool;

    /// If true, the regulatory region component is used.
    /// If not present, defaults to true.
    2: with_regulatory_region bool;

    /// The name of the created realm.
    /// Note that this must be unique among all realms that may exist at one
    /// time.
    /// If not present, the name will be autogenerated.
    3: name string;
};

/// Options for configuring the Driver Test Realm in the constructed test realm.
type DriverConfig = resource table {
    /// These will be opened in the test realm's devfs. The test suite holds the client end that
    /// can be used to connect to FIDL protocols exposed by drivers over dev_topological or dev_class.
    1: dev_topological server_end:fuchsia.io.Directory;
    2: dev_class server_end:fuchsia.io.Directory;

    /// Any topology that requires drivers will want the Driver Test Realm to be started.
    /// For convenience, the realm factory starts the Driver Test Realm with these args.
    3: driver_test_realm_start_args fuchsia.driver.test.RealmArgs;
};

/// Each variant specifies which WLAN components are included in the constructed
/// test realm, what protocols are exposed to the test suite, and how mock
/// protocols are injected by the test suite into the test realm.
type Topology = resource union {
    /// Only the Driver Test Realm is included in this configuration.
    /// No protocols are exposed through the test realm proxy.
    /// Instead, the user should connect to the test driver directly through
    /// |driver_config.dev_topological| or |driver_config.dev_class|.
    1: drivers_only resource table {
        1: driver_config DriverConfig;
    };
};

/// RealmOptions tells the RealmFactory protocol how to create the test realm.
type RealmOptions = resource table {
    @deprecated
    1: devfs_server_end server_end:fuchsia.io.Directory;

    @deprecated
    2: wlan_config WlanConfig;

    /// Specifies the components included in the test realm, the client
    /// protocols exposed to the test suite, and the mock protocols that the
    /// test suite needs to inject into the test realm. See the |Topology| type
    /// for more details.
    3: topology Topology;
};

@discoverable
open protocol RealmFactory {
    /// Creates the realm using the given options.
    flexible CreateRealm(resource struct {
        options RealmOptions;
        realm_server server_end:fuchsia.testing.harness.RealmProxy;
    }) -> () error fuchsia.testing.harness.OperationError;

    /// Creates a new realm and returns a dictionary containing its exposed capabilities.
    flexible CreateRealm2(resource struct {
        options RealmOptions;
        dictionary server_end:fuchsia.component.sandbox.Dictionary;
    }) -> () error fuchsia.testing.harness.OperationError;
};
