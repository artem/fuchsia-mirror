// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

use {
    netlink_packet_utils::DecodeError, num::FromPrimitive, num_derive::FromPrimitive,
    std::convert::TryFrom,
};

use crate::nl80211::constants::*;

#[repr(u8)]
#[derive(Clone, Copy, Eq, PartialEq, Debug, FromPrimitive)]
pub enum Nl80211Cmd {
    Unspecified = NL80211_CMD_UNSPEC,
    GetWiphy = NL80211_CMD_GET_WIPHY,
    SetWiphy = NL80211_CMD_SET_WIPHY,
    NewWiphy = NL80211_CMD_NEW_WIPHY,
    DelWiphy = NL80211_CMD_DEL_WIPHY,
    GetInterface = NL80211_CMD_GET_INTERFACE,
    SetInterface = NL80211_CMD_SET_INTERFACE,
    NewInterface = NL80211_CMD_NEW_INTERFACE,
    DelInterface = NL80211_CMD_DEL_INTERFACE,
    GetKey = NL80211_CMD_GET_KEY,
    SetKey = NL80211_CMD_SET_KEY,
    NewKey = NL80211_CMD_NEW_KEY,
    DelKey = NL80211_CMD_DEL_KEY,
    GetBeacon = NL80211_CMD_GET_BEACON,
    SetBeacon = NL80211_CMD_SET_BEACON,
    StartApOrBeacon = NL80211_CMD_START_AP,
    StopApOrBeacon = NL80211_CMD_STOP_AP,
    GetStation = NL80211_CMD_GET_STATION,
    SetStation = NL80211_CMD_SET_STATION,
    NewStation = NL80211_CMD_NEW_STATION,
    DelStation = NL80211_CMD_DEL_STATION,
    GetMpath = NL80211_CMD_GET_MPATH,
    SetMpath = NL80211_CMD_SET_MPATH,
    NewMpath = NL80211_CMD_NEW_MPATH,
    DelMpath = NL80211_CMD_DEL_MPATH,
    SetBss = NL80211_CMD_SET_BSS,
    SetReg = NL80211_CMD_SET_REG,
    ReqSetReg = NL80211_CMD_REQ_SET_REG,
    GetMeshConfig = NL80211_CMD_GET_MESH_CONFIG,
    SetMeshConfig = NL80211_CMD_SET_MESH_CONFIG,
    SetMgmtExtraIe = NL80211_CMD_SET_MGMT_EXTRA_IE,
    GetReg = NL80211_CMD_GET_REG,
    GetScan = NL80211_CMD_GET_SCAN,
    TriggerScan = NL80211_CMD_TRIGGER_SCAN,
    NewScanResults = NL80211_CMD_NEW_SCAN_RESULTS,
    ScanAborted = NL80211_CMD_SCAN_ABORTED,
    RegChange = NL80211_CMD_REG_CHANGE,
    Authenticate = NL80211_CMD_AUTHENTICATE,
    Associate = NL80211_CMD_ASSOCIATE,
    Deauthenticate = NL80211_CMD_DEAUTHENTICATE,
    Disassociate = NL80211_CMD_DISASSOCIATE,
    MichaelMicFailure = NL80211_CMD_MICHAEL_MIC_FAILURE,
    RegBeaconHint = NL80211_CMD_REG_BEACON_HINT,
    JoinIbss = NL80211_CMD_JOIN_IBSS,
    LeaveIbss = NL80211_CMD_LEAVE_IBSS,
    Testmode = NL80211_CMD_TESTMODE,
    Connect = NL80211_CMD_CONNECT,
    Roam = NL80211_CMD_ROAM,
    Disconnect = NL80211_CMD_DISCONNECT,
    SetWiphyNetns = NL80211_CMD_SET_WIPHY_NETNS,
    GetSurvey = NL80211_CMD_GET_SURVEY,
    NewSurveyResults = NL80211_CMD_NEW_SURVEY_RESULTS,
    SetPmksa = NL80211_CMD_SET_PMKSA,
    DelPmksa = NL80211_CMD_DEL_PMKSA,
    FlushPmksa = NL80211_CMD_FLUSH_PMKSA,
    RemainOnChannel = NL80211_CMD_REMAIN_ON_CHANNEL,
    CancelRemainOnChannel = NL80211_CMD_CANCEL_REMAIN_ON_CHANNEL,
    SetTxBitrateMask = NL80211_CMD_SET_TX_BITRATE_MASK,
    RegisterFrameOrAction = NL80211_CMD_REGISTER_FRAME,
    FrameOrAction = NL80211_CMD_FRAME,
    FrameOrActionTxStats = NL80211_CMD_FRAME_TX_STATUS,
    SetPowerSave = NL80211_CMD_SET_POWER_SAVE,
    GetPowerSave = NL80211_CMD_GET_POWER_SAVE,
    SetCqm = NL80211_CMD_SET_CQM,
    NotifyCqm = NL80211_CMD_NOTIFY_CQM,
    SetChannel = NL80211_CMD_SET_CHANNEL,
    SetWdsPeer = NL80211_CMD_SET_WDS_PEER,
    FrameWaitCancel = NL80211_CMD_FRAME_WAIT_CANCEL,
    JoinMesh = NL80211_CMD_JOIN_MESH,
    LeaveMesh = NL80211_CMD_LEAVE_MESH,
    UnprotDeauthenticate = NL80211_CMD_UNPROT_DEAUTHENTICATE,
    UnprotDisassociate = NL80211_CMD_UNPROT_DISASSOCIATE,
    NewPeerCandidate = NL80211_CMD_NEW_PEER_CANDIDATE,
    GetWowlan = NL80211_CMD_GET_WOWLAN,
    SetWowlan = NL80211_CMD_SET_WOWLAN,
    StartSchedScan = NL80211_CMD_START_SCHED_SCAN,
    StopSchedScan = NL80211_CMD_STOP_SCHED_SCAN,
    SchedScanResults = NL80211_CMD_SCHED_SCAN_RESULTS,
    SchedScanStopped = NL80211_CMD_SCHED_SCAN_STOPPED,
    SetRekeyOffload = NL80211_CMD_SET_REKEY_OFFLOAD,
    PmksaCandidate = NL80211_CMD_PMKSA_CANDIDATE,
    TdlsOper = NL80211_CMD_TDLS_OPER,
    TdlsMgmt = NL80211_CMD_TDLS_MGMT,
    UnexpectedFrame = NL80211_CMD_UNEXPECTED_FRAME,
    ProbeClient = NL80211_CMD_PROBE_CLIENT,
    RegisterBeacons = NL80211_CMD_REGISTER_BEACONS,
    Unexpected4AddrFrame = NL80211_CMD_UNEXPECTED_4ADDR_FRAME,
    SetNoackMap = NL80211_CMD_SET_NOACK_MAP,
    ChSwitchNotify = NL80211_CMD_CH_SWITCH_NOTIFY,
    StartP2pDevice = NL80211_CMD_START_P2P_DEVICE,
    StopP2pDevice = NL80211_CMD_STOP_P2P_DEVICE,
    ConnFailed = NL80211_CMD_CONN_FAILED,
    SetMcastRate = NL80211_CMD_SET_MCAST_RATE,
    SetMacAcl = NL80211_CMD_SET_MAC_ACL,
    RadarDetect = NL80211_CMD_RADAR_DETECT,
    GetProtocolFeatures = NL80211_CMD_GET_PROTOCOL_FEATURES,
    UpdateFtIes = NL80211_CMD_UPDATE_FT_IES,
    FtEvent = NL80211_CMD_FT_EVENT,
    CritProtocolStart = NL80211_CMD_CRIT_PROTOCOL_START,
    CritProtocolStop = NL80211_CMD_CRIT_PROTOCOL_STOP,
    GetCoalesce = NL80211_CMD_GET_COALESCE,
    SetCoalesce = NL80211_CMD_SET_COALESCE,
    ChannelSwitch = NL80211_CMD_CHANNEL_SWITCH,
    Vendor = NL80211_CMD_VENDOR,
    SetQosMap = NL80211_CMD_SET_QOS_MAP,
    AddTxTs = NL80211_CMD_ADD_TX_TS,
    DelTxTs = NL80211_CMD_DEL_TX_TS,
    GetMpp = NL80211_CMD_GET_MPP,
    JoinOcb = NL80211_CMD_JOIN_OCB,
    LeaveOcb = NL80211_CMD_LEAVE_OCB,
    ChSwitchStartedNotify = NL80211_CMD_CH_SWITCH_STARTED_NOTIFY,
    TdlsChannelSwitch = NL80211_CMD_TDLS_CHANNEL_SWITCH,
    TdlsCancelChannelSwitch = NL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH,
    WiphyReqChange = NL80211_CMD_WIPHY_REG_CHANGE,
    AbortScan = NL80211_CMD_ABORT_SCAN,
    StartNan = NL80211_CMD_START_NAN,
    StopNan = NL80211_CMD_STOP_NAN,
    AddNanFunction = NL80211_CMD_ADD_NAN_FUNCTION,
    DelNanFunction = NL80211_CMD_DEL_NAN_FUNCTION,
    ChangeNanConfig = NL80211_CMD_CHANGE_NAN_CONFIG,
    NanMatch = NL80211_CMD_NAN_MATCH,
    SetMulticastToUnicast = NL80211_CMD_SET_MULTICAST_TO_UNICAST,
    UpdateConnectParams = NL80211_CMD_UPDATE_CONNECT_PARAMS,
    SetPmk = NL80211_CMD_SET_PMK,
    DelPmk = NL80211_CMD_DEL_PMK,
    PortAuthorized = NL80211_CMD_PORT_AUTHORIZED,
    ReloadRegdb = NL80211_CMD_RELOAD_REGDB,
    ExternalAuth = NL80211_CMD_EXTERNAL_AUTH,
    StaOpmodeChanged = NL80211_CMD_STA_OPMODE_CHANGED,
    ControlPortFrame = NL80211_CMD_CONTROL_PORT_FRAME,
    GetFtmResponderStats = NL80211_CMD_GET_FTM_RESPONDER_STATS,
    PeerMeasurementStart = NL80211_CMD_PEER_MEASUREMENT_START,
    PeerMeasurementResult = NL80211_CMD_PEER_MEASUREMENT_RESULT,
    PeerMeasurementComplete = NL80211_CMD_PEER_MEASUREMENT_COMPLETE,
    NotifyRadar = NL80211_CMD_NOTIFY_RADAR,
    UpdateOweInfo = NL80211_CMD_UPDATE_OWE_INFO,
    ProbeMeshLink = NL80211_CMD_PROBE_MESH_LINK,
    SetTidConfig = NL80211_CMD_SET_TID_CONFIG,
    UnprotBeacon = NL80211_CMD_UNPROT_BEACON,
    ControlPortFrameTxStatus = NL80211_CMD_CONTROL_PORT_FRAME_TX_STATUS,
    SetSarSpecs = NL80211_CMD_SET_SAR_SPECS,
    ColorCollision = NL80211_CMD_OBSS_COLOR_COLLISION,
    ColorChangeRequest = NL80211_CMD_COLOR_CHANGE_REQUEST,
    ColorChangeStarted = NL80211_CMD_COLOR_CHANGE_STARTED,
    ColorChangeAborted = NL80211_CMD_COLOR_CHANGE_ABORTED,
    ColorChangeCompleted = NL80211_CMD_COLOR_CHANGE_COMPLETED,
    SetFilsAad = NL80211_CMD_SET_FILS_AAD,
    AssocComeback = NL80211_CMD_ASSOC_COMEBACK,
    AddLink = NL80211_CMD_ADD_LINK,
    RemoveLink = NL80211_CMD_REMOVE_LINK,
    AddLinkSta = NL80211_CMD_ADD_LINK_STA,
    ModifyLinkSta = NL80211_CMD_MODIFY_LINK_STA,
    RemoveLinkSta = NL80211_CMD_REMOVE_LINK_STA,
}

impl TryFrom<u8> for Nl80211Cmd {
    type Error = DecodeError;

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match Self::from_u8(value) {
            Some(val) => Ok(val),
            None => Err(DecodeError::from(format!("Invalid NL80211 command: {}", value))),
        }
    }
}
