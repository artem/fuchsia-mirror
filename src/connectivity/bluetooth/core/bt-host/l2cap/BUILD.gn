# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/fuzz.gni")
import("//build_overrides/pigweed.gni")
import("$dir_pw_fuzzer/fuzzer.gni")
import("$dir_pw_unit_test/test.gni")

# Basic target with protocol definitions and no logic, suitable for test
# emulation.
pw_source_set("definitions") {
  sources = [
    "frame_headers.h",
    "l2cap_defs.h",
  ]

  public_deps = [
    "//src/connectivity/bluetooth/core/bt-host/hci-spec",
    "//src/connectivity/bluetooth/core/bt-host/sm:definitions",
  ]
}

pw_source_set("l2cap") {
  sources = [
    "a2dp_offload_manager.cc",
    "a2dp_offload_manager.h",
    "basic_mode_rx_engine.cc",
    "basic_mode_rx_engine.h",
    "basic_mode_tx_engine.cc",
    "basic_mode_tx_engine.h",
    "bredr_command_handler.cc",
    "bredr_command_handler.h",
    "bredr_dynamic_channel.cc",
    "bredr_dynamic_channel.h",
    "bredr_signaling_channel.cc",
    "bredr_signaling_channel.h",
    "channel.cc",
    "channel.h",
    "channel_configuration.cc",
    "channel_configuration.h",
    "channel_manager.cc",
    "channel_manager.h",
    "command_handler.cc",
    "command_handler.h",
    "dynamic_channel.cc",
    "dynamic_channel.h",
    "dynamic_channel_registry.cc",
    "dynamic_channel_registry.h",
    "enhanced_retransmission_mode_engines.cc",
    "enhanced_retransmission_mode_engines.h",
    "enhanced_retransmission_mode_rx_engine.cc",
    "enhanced_retransmission_mode_rx_engine.h",
    "enhanced_retransmission_mode_tx_engine.cc",
    "enhanced_retransmission_mode_tx_engine.h",
    "fcs.cc",
    "fcs.h",
    "fragmenter.cc",
    "fragmenter.h",
    "le_signaling_channel.cc",
    "le_signaling_channel.h",
    "logical_link.cc",
    "logical_link.h",
    "low_energy_command_handler.cc",
    "low_energy_command_handler.h",
    "pdu.cc",
    "pdu.h",
    "recombiner.cc",
    "recombiner.h",
    "rx_engine.h",
    "scoped_channel.cc",
    "scoped_channel.h",
    "signaling_channel.cc",
    "signaling_channel.h",
    "tx_engine.h",
    "types.cc",
    "types.h",
  ]

  public_deps = [
    ":definitions",
    "$dir_pw_third_party/fuchsia:fit",
    "//src/connectivity/bluetooth/core/bt-host/hci",
    "//src/connectivity/bluetooth/core/bt-host/transport",
    "//third_party/pigweed/src/pw_string",
  ]
}

# Separate from :testing to avoid a dependency cycle.
pw_source_set("channel_manager_mock_controller_test_fixture") {
  testonly = true

  sources = [ "channel_manager_mock_controller_test_fixture.h" ]

  public_deps = [
    ":l2cap",
    ":testing",
    "//src/connectivity/bluetooth/core/bt-host/hci",
    "//src/connectivity/bluetooth/core/bt-host/testing",
  ]
}

pw_source_set("testing") {
  testonly = true

  sources = [
    "fake_channel.cc",
    "fake_channel.h",
    "fake_channel_test.cc",
    "fake_channel_test.h",
    "fake_l2cap.cc",
    "fake_l2cap.h",
    "fake_signaling_channel.cc",
    "fake_signaling_channel.h",
    "mock_channel_test.cc",
    "mock_channel_test.h",
    "test_packets.cc",
    "test_packets.h",
  ]

  public_deps = [
    ":l2cap",
    "$dir_pw_bluetooth",
    "$dir_pw_unit_test",
    "//src/connectivity/bluetooth/core/bt-host/common",
    "//src/connectivity/bluetooth/core/bt-host/hci",
    "//src/connectivity/bluetooth/core/bt-host/testing:test_helpers",
    "//third_party/pigweed:pw_async_heap_dispatcher",
    "//third_party/pigweed/backends/pw_async_fuchsia:fake_dispatcher_fixture",
  ]
}

pw_test("tests") {
  sources = [
    "a2dp_offload_manager_unittest.cc",
    "basic_mode_rx_engine_unittest.cc",
    "basic_mode_tx_engine_unittest.cc",
    "bredr_command_handler_unittest.cc",
    "bredr_dynamic_channel_unittest.cc",
    "bredr_signaling_channel_unittest.cc",
    "channel_configuration_unittest.cc",
    "channel_manager_unittest.cc",
    "channel_unittest.cc",
    "command_handler_unittest.cc",
    "dynamic_channel_registry_unittest.cc",
    "enhanced_retransmission_mode_engines_unittest.cc",
    "enhanced_retransmission_mode_rx_engine_unittest.cc",
    "enhanced_retransmission_mode_tx_engine_unittest.cc",
    "fcs_unittest.cc",
    "fragmenter_unittest.cc",
    "frame_headers_unittest.cc",
    "le_signaling_channel_unittest.cc",
    "logical_link_unittest.cc",
    "low_energy_command_handler_unittest.cc",
    "pdu_unittest.cc",
    "recombiner_unittest.cc",
    "scoped_channel_unittest.cc",
    "signaling_channel_unittest.cc",
    "types_unittest.cc",
  ]

  deps = [
    ":channel_manager_mock_controller_test_fixture",
    ":l2cap",
    ":testing",
    "//src/connectivity/bluetooth/core/bt-host/hci",
    "//src/connectivity/bluetooth/core/bt-host/hci:testing",
    "//src/connectivity/bluetooth/core/bt-host/testing",
    "//src/connectivity/bluetooth/core/bt-host/transport:testing",
    "//third_party/pigweed/backends/pw_async_fuchsia:fake_dispatcher_fixture",
  ]
}

fuchsia_library_fuzzer("basic_mode_rx_engine_fuzzer") {
  sources = [ "basic_mode_rx_engine_fuzztest.cc" ]
  deps = [
    ":l2cap",
    ":testing",
    "//src/connectivity/bluetooth/core/bt-host/testing:fuzztest_driver",
  ]
}

pw_fuzzer("pw_basic_mode_rx_engine_fuzzer") {
  sources = [ "basic_mode_rx_engine_fuzztest.cc" ]
  deps = [
    ":l2cap",
    ":testing",
  ]
}

fuchsia_library_fuzzer("enhanced_retransmission_mode_engines_fuzzer") {
  sources = [ "enhanced_retransmission_mode_engines_fuzztest.cc" ]
  deps = [
    ":l2cap",
    ":testing",
    "//src/connectivity/bluetooth/core/bt-host/testing:fuzztest_driver",
  ]
}

pw_fuzzer("pw_enhanced_retransmission_mode_engines_fuzzer") {
  sources = [ "enhanced_retransmission_mode_engines_fuzztest.cc" ]
  deps = [
    ":l2cap",
    ":testing",
  ]
}

fuchsia_library_fuzzer("bredr_dynamic_channel_registry_fuzzer") {
  sources = [ "bredr_dynamic_channel_registry_fuzztest.cc" ]
  deps = [
    ":l2cap",
    ":testing",
    "$dir_pw_random:fuzzer_generator",
    "//src/connectivity/bluetooth/core/bt-host/testing:fuzztest_driver",
  ]
}

pw_fuzzer("pw_bredr_dynamic_channel_registry_fuzzer") {
  sources = [ "bredr_dynamic_channel_registry_fuzztest.cc" ]
  deps = [
    ":l2cap",
    ":testing",
    "$dir_pw_random:fuzzer_generator",
  ]
}

fuchsia_library_fuzzer("channel_configuration_fuzzer") {
  sources = [ "channel_configuration_fuzztest.cc" ]
  deps = [
    ":l2cap",
    ":testing",
    "//src/connectivity/bluetooth/core/bt-host/testing:fuzztest_driver",
  ]
}

pw_fuzzer("pw_channel_configuration_fuzzer") {
  sources = [ "channel_configuration_fuzztest.cc" ]
  deps = [
    ":l2cap",
    ":testing",
  ]
}

fuchsia_library_fuzzer("common_handler_fuzzer") {
  sources = [ "common_handler_fuzztest.cc" ]
  deps = [
    ":l2cap",
    ":testing",
    "//src/connectivity/bluetooth/core/bt-host/testing:fuzztest_driver",
  ]
}

pw_fuzzer("pw_common_handler_fuzzer") {
  sources = [ "common_handler_fuzztest.cc" ]
  deps = [
    ":l2cap",
    ":testing",
  ]
}

fuchsia_library_fuzzer("l2cap_fuzzer") {
  sources = [ "l2cap_fuzztest.cc" ]
  deps = [
    ":l2cap",
    "$dir_pw_random:fuzzer_generator",
    "//src/connectivity/bluetooth/core/bt-host/testing",
    "//src/connectivity/bluetooth/core/bt-host/testing:controller_test_double_base",
    "//src/connectivity/bluetooth/core/bt-host/testing:fuzztest_driver",
  ]
}

pw_fuzzer("pw_l2cap_fuzzer") {
  sources = [ "l2cap_fuzztest.cc" ]
  deps = [
    ":l2cap",
    "$dir_pw_random:fuzzer_generator",
    "//src/connectivity/bluetooth/core/bt-host/testing",
    "//src/connectivity/bluetooth/core/bt-host/testing:controller_test_double_base",
  ]
}
