## require optimize=none
[zxdb] b $main
Created Breakpoint 1 @ $main
Pending: No current matches for location. It will be matched against new
         processes and shared libraries.

[zxdb] run-component fuchsia-pkg://fuchsia.com/zxdb_e2e_inferiors#meta/rust_functions.cm
run-component won't work for many v2 components. See "help run-component".
Launched Process 1 state=Running koid=?? name=rust_functions.cm component=rust_functions.cm
Breakpoint 1 now matching 1 addrs for $main
ðŸ›‘ on bp 1 rust_functions::main() â€¢ rust_functions.rs:??

# Rust functions need to be prepended with the module name. This will re-hit the
# user installed breakpoint.
[zxdb] p rust_functions::print_hello()
ðŸ›‘ on bp 1 rust_functions::main() â€¢ rust_functions.rs:??
void

[zxdb] n
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??

# Now it should stop at a generic breakpoint.
[zxdb] p rust_functions::nested_no_args()
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??
void

# The global variable should be updated.
[zxdb] p SOME_GLOBAL
5

# Make sure the return value is captured.
[zxdb] p rust_functions::return_global_plus_one()
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??
6

# And we should be at the same location as before.
[zxdb] f
â–¶ 0 rust_functions::main() â€¢ rust_functions.rs:??
  1 core::ops::function::FnOnce::call_once<â€¦>(â€¦) ??
  2â€¦?? Â«Rust startupÂ» (-r expands)

# Chaining return values and expressions should also work.
[zxdb] p rust_functions::return_global_plus_one() - 1
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??
5

# TODO(https://fxbug.dev/129958): this should also work as
# rust_functions::return_global_plus_one() - 1 == SOME_GLOBAL
[zxdb] p SOME_GLOBAL == rust_functions::return_global_plus_one() - 1
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??
true

# Pointers should work too.
[zxdb] p rust_functions::return_i32_box()
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??
(*)0x?? âž” 5

[zxdb] p *rust_functions::return_i32_box() + 1
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??
6

# Other built-in types should also work
[zxdb] p rust_functions::return_float()
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??
3.14159

[zxdb] p rust_functions::add_two_ints(1, 3)
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??
4

[zxdb] until 86
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??

[zxdb] p rust_functions::add_int_refs(&lhs, &rhs)
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??
15

[zxdb] until 90
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??

[zxdb] locals
lhs = 7
rhs = 8

[zxdb] p rust_functions::swap_i32_refs(&lhs, &rhs)
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??

[zxdb] locals
lhs = 8
rhs = 7

[zxdb] until 94
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??

[zxdb] p s
SomeStruct{one: 1, two: 2, nums: vec![3, 4, 5, 6]}

[zxdb] p rust_functions::do_some_stuff(&s)
ðŸ›‘ rust_functions::main() â€¢ rust_functions.rs:??
void

[zxdb] p s
SomeStruct{one: 2, two: 4, nums: vec![3, 4, 5]}

[zxdb] c
Process 1 exited with code 0.
