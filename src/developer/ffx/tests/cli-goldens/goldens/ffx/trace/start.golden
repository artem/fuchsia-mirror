{
  "name": "start",
  "description": "Record a trace.",
  "examples": [
    "\n[Quick Start]:\n\n    $ ffx trace start [--duration <SECONDS> ]\n\nThis will record a trace using the default categories, which are suitable for getting a high\nlevel overview.\n\nThis will produce a file `trace.fxt` which can be uploaded to ui.perfetto.dev to be viewed.\n\n[Trace Various Categories]:\n\n    $ ffx trace start --categories '#default,flatland:*,temp'\n\nThis will record a trace with all the default categories enabled, 'temp' events enabled, and any\nevent that starts with 'flatland:'\n\n\n[Capturing a Sporadic Occurrence]\n\n    $ ffx trace start --buffer-size 64 --buffering-mode circular\n\nThis will run the trace with the largest available buffer size, overwriting the old events with new\nones. When the event occurs press <enter> to stop the trace.\n\n\n[Automatically Capturing a Sporadic Occurrence with a Trigger]\n\nThis approach allows you to automatically stop the trace when the event happens, but the traced\ncode must already be set up to write a trigger event.\n\n    $ ffx trace start --buffer-size 64 --buffering-mode circular --trigger '<alert_name>:terminate'\n"
  ],
  "flags": [
    {
      "kind": "Switch",
      "optionality": "optional",
      "long": "--help",
      "short": null,
      "description": "display usage information",
      "hidden": false
    },
    {
      "kind": {
        "Option": {
          "arg_name": "buffering-mode"
        }
      },
      "optionality": "optional",
      "long": "--buffering-mode",
      "short": null,
      "description": "the buffering scheme to trace with. Defaults to \"oneshot\" oneshot:   Writes to the tracing buffer until it is full, then ignores all additional trace events. circular:  Writes to the tracing buffer until its is full, then new events will replace old events. streaming: Forwards tracing events to the trace manager as they arrive. Provides additional            buffer space with the trade off of some overhead due to occasional ipcs to send the            events to the trace manager during the trace.",
      "hidden": false
    },
    {
      "kind": {
        "Option": {
          "arg_name": "buffer-size"
        }
      },
      "optionality": "optional",
      "long": "--buffer-size",
      "short": null,
      "description": "size of per-provider trace buffer in MB.  Defaults to 4.",
      "hidden": false
    },
    {
      "kind": {
        "Option": {
          "arg_name": "categories"
        }
      },
      "optionality": "optional",
      "long": "--categories",
      "short": null,
      "description": "comma-separated list of categories to enable.  Defaults to \"#default\". Run `ffx config get trace.category_groups.default` to see what categories are included in #default. A trailing \"*\" may be used to indicate a prefix match. For example, \"kernel*\" includes any category that starts with kernel. A name prefixed with # indicates a category group that will be expanded from ffx config within the plugin *before* being sent to trace manager. A category group can either be added to global config by editing data/config.json in the ffx trace plugin, or by using ffx config set to add/edit a user configured category group. Available category groups can be discovered by running `ffx config get -s all trace.category_groups` A category may be limited to a specific trace provider using a '/'. For example --categories \"scenic.cm/FrameDropped\" will only enable the \"FrameDropped\" category for the scenic.cm trace provider and no other providers. Categories and category groups may be mixed, for example,     ffx trace start --categories #default,my_category Enables all the default categories as well as \"my_category\".",
      "hidden": false
    },
    {
      "kind": {
        "Option": {
          "arg_name": "duration"
        }
      },
      "optionality": "optional",
      "long": "--duration",
      "short": null,
      "description": "duration of trace capture in seconds.",
      "hidden": false
    },
    {
      "kind": {
        "Option": {
          "arg_name": "output"
        }
      },
      "optionality": "optional",
      "long": "--output",
      "short": null,
      "description": "name of output trace file.  Defaults to trace.fxt.",
      "hidden": false
    },
    {
      "kind": "Switch",
      "optionality": "optional",
      "long": "--background",
      "short": null,
      "description": "whether to run the trace in the background. Defaults to false, which means the trace will run in \"interactive\" mode.",
      "hidden": false
    },
    {
      "kind": "Switch",
      "optionality": "optional",
      "long": "--verbose",
      "short": "v",
      "description": "increase verbosity of output on trace stop. Defaults to false. This is ignored if duration is not set. Enabling this prints stats from trace providers including the number of records dropped, wrapped buffers count, % of durable buffer used and non durable bytes written.",
      "hidden": false
    },
    {
      "kind": {
        "Option": {
          "arg_name": "trigger"
        }
      },
      "optionality": "repeating",
      "long": "--trigger",
      "short": null,
      "description": "a trigger consists of an alert leading to an action. An alert is written into the code being traced, and an action here is what to do when the alert has happened. The list of supported actions are: 'terminate'. The expected format is \"<alert>:<action>\" ex:   -trigger \"my_alert:terminate\" This can be used with a duration, but keep in mind that this introduces a race between whether the alert leads to an action, and when the trace stops from the duration being reached. Triggers can only be used in the background outside of interactive mode.",
      "hidden": false
    }
  ],
  "notes": [
    "For a full tutorial, visit https://fuchsia.dev/fuchsia-src/development/sdk/ffx/record-traces"
  ],
  "commands": [],
  "positionals": [],
  "error_codes": []
}