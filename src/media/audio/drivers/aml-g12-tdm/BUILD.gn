# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bazel/drivers/bazel_driver_package.gni")
import("//build/bazel/wrappers.gni")
import("//build/bind/bind.gni")
import("//build/drivers.gni")
import("//build/toolchain/variant_tags.gni")

# TDM driver.
driver_bind_rules("aml-g12-tdm-bind") {
  rules = "aml_tdm.bind"
  bind_output = "aml-g12-tdm.bindbc"
  tests = "tests-stream.json"
  deps = [
    "//sdk/fidl/fuchsia.hardware.audio:fuchsia.hardware.audio_bindlib",
    "//sdk/fidl/fuchsia.hardware.clock:fuchsia.hardware.clock_bindlib",
    "//sdk/fidl/fuchsia.hardware.gpio:fuchsia.hardware.gpio_bindlib",
    "//src/devices/bind/fuchsia.amlogic.platform",
    "//src/devices/bind/fuchsia.amlogic.platform.meson",
    "//src/devices/bind/fuchsia.clock",
    "//src/devices/bind/fuchsia.gpio",
    "//src/devices/bind/fuchsia.platform",
  ]
}

fuchsia_driver("aml-g12-tdm-driver") {
  output_name = "aml-g12-tdm"
  configs += [
    "//build/config:all_source",
    "//build/config/fuchsia:enable_zircon_asserts",
  ]
  sources = [
    "aml-tdm-config-device.cc",
    "aml-tdm-config-device.h",
    "audio-stream.cc",
  ]

  deps = [
    ":aml-g12-tdm-bind",
    "//sdk/fidl/fuchsia.hardware.clock:fuchsia.hardware.clock_cpp",
    "//sdk/fidl/fuchsia.hardware.gpio:fuchsia.hardware.gpio_cpp",
    "//src/devices/bus/lib/device-protocol-pdev",
    "//src/devices/lib/amlogic",
    "//src/devices/lib/driver",
    "//src/devices/lib/mmio",
    "//src/lib/ddk",
    "//src/lib/ddktl",
    "//src/media/audio/drivers/lib/audio-driver-proto",
    "//src/media/audio/drivers/lib/audio-proto-utils",
    "//src/media/audio/lib/simple-audio-stream",
    "//src/media/audio/lib/simple-codec",
    "//zircon/system/ulib/fbl",
    "//zircon/system/ulib/fzl",
    "//zircon/system/ulib/pretty",
    "//zircon/system/ulib/sync",
    "//zircon/system/ulib/zx",
  ]

  # TODO(https://fxbug.dev/42176699): This target uses mutable tables which are deprecated,
  # rather than builders.
  configs += [ "//build/cpp:fidl-wire-deprecated-mutable-tables" ]
}

fuchsia_driver_component("aml-g12-tdm") {
  component_name = "aml-g12-tdm"
  deps = [ ":aml-g12-tdm-driver" ]
  info = "aml-g12-tdm-info.json"
  manifest = "meta/aml-g12-tdm.cml"
}

fuchsia_driver_package("aml-g12-tdm-package") {
  package_name = "aml-g12-tdm"
  driver_components = [ ":aml-g12-tdm" ]
}

# DAI driver.
driver_bind_rules("aml-g12-tdm-dai-bind") {
  rules = "aml_tdm_dai.bind"
  bind_output = "aml-g12-tdm-dai.bindbc"
  tests = "tests-dai.json"
  deps = [
    "//src/devices/bind/fuchsia.amlogic.platform",
    "//src/devices/bind/fuchsia.clock",
    "//src/devices/bind/fuchsia.gpio",
    "//src/devices/bind/fuchsia.platform",
  ]
}

fuchsia_driver("aml-g12-tdm-dai-driver") {
  output_name = "aml-g12-tdm-dai"
  configs += [
    "//build/config:all_source",
    "//build/config/fuchsia:enable_zircon_asserts",
  ]
  sources = [
    "aml-tdm-config-device.cc",
    "aml-tdm-config-device.h",
    "dai.cc",
  ]

  deps = [
    ":aml-g12-tdm-dai-bind",
    "//sdk/banjo/fuchsia.hardware.audio:fuchsia.hardware.audio_banjo_cpp",
    "//sdk/fidl/fuchsia.hardware.audio:fuchsia.hardware.audio_cpp",
    "//sdk/fidl/fuchsia.hardware.audio:fuchsia.hardware.audio_hlcpp",
    "//sdk/lib/fit-promise",
    "//src/devices/bus/lib/device-protocol-pdev",
    "//src/devices/lib/amlogic",
    "//src/devices/lib/driver",
    "//src/devices/lib/mmio",
    "//src/lib/ddk",
    "//src/lib/ddktl",
    "//zircon/system/ulib/async:async-cpp",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/fbl",
    "//zircon/system/ulib/fzl",
    "//zircon/system/ulib/zx",

    # TODO(andresoportus): Remove depedency on TLS (maybe done by C++ bindings unification).
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
}

fuchsia_driver_component("aml-g12-tdm-dai") {
  component_name = "aml-g12-tdm-dai"
  deps = [ ":aml-g12-tdm-dai-driver" ]
  info = "aml-g12-tdm-dai-info.json"
  manifest = "meta/aml-g12-tdm-dai.cml"
}

fuchsia_driver_package("aml-g12-tdm-dai-package") {
  package_name = "aml-g12-tdm-dai"
  driver_components = [ ":aml-g12-tdm-dai" ]
}

# Composite driver (DFv2).
bazel_driver_package("aml-g12-composite-bazel-package") {
  bazel_target = "//src/media/audio/drivers/aml-g12-tdm:aml-g12-composite"
  package_name = "aml-g12-composite"
  inputs = [
    "aml-tdm-config-device.cc",
    "aml-tdm-config-device.h",
    "composite.cc",
    "composite.h",
    "composite-server.cc",
    "composite-server.h",
  ]
}

driver_bind_rules("aml-g12-composite-bind") {
  rules = "aml_composite.bind"
  bind_output = "aml-g12-composite.bindbc"
  tests = "tests-composite.json"
  deps = [
    "//sdk/fidl/fuchsia.hardware.clock:fuchsia.hardware.clock_bindlib",
    "//src/devices/bind/fuchsia.amlogic.platform",
    "//src/devices/bind/fuchsia.amlogic.platform.a311d",
    "//src/devices/bind/fuchsia.clock",
    "//src/devices/bind/fuchsia.devicetree",
    "//src/devices/bind/fuchsia.gpio",
    "//src/devices/bind/fuchsia.platform",
  ]
}

bazel_fuchsia_test_package("aml-g12-composite-test-package") {
  test_package_name = "aml-g12-composite-test"
  inputs = [
    "aml-tdm-config-device.cc",
    "aml-tdm-config-device.h",
    "composite.cc",
    "composite.h",
    "composite-server.cc",
    "composite-server.h",
    "test/composite-test.cc",
  ]
  test_component_names = [ "aml-g12-composite-test-bin" ]
  test_specs = {
    environments = basic_envs
    log_settings = {
      max_severity = "ERROR"
    }
  }
}

# Tests.

group("tests") {
  testonly = true
  deps = [
    ":aml-g12-composite-bind_test",
    ":aml-g12-composite-test-package",
    ":aml-g12-tdm-bind_test",
    ":aml-g12-tdm-dai-bind_test",
    "test:dai-test-package",
    "test:stream-test-package",
  ]
}
