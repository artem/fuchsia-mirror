// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.archivist.test;

alias LogMessage = string:MAX;


/// Puppet is testing component that interacts with Archivist.
///
/// For full documentation see //src/diagnostics/testing/realm-factory/README.md.
@discoverable
open protocol Puppet {
    compose InspectPuppet;
    compose LogPuppet;

    /// Returns a LazyInspectPuppet client for recording lazy values.
    flexible RecordLazyValues(struct {
        key string:MAX;
    }) -> (resource struct {
        client client_end:LazyInspectPuppet;
    });
};

/// LoggerPuppet emits log messages when requested.
open protocol LogPuppet {
    /// Prints a message to stdout and appends a newline.
    flexible Println(struct {
        message LogMessage;
    });

    /// Prints a message stderr and appends a newline.
    flexible Eprintln(struct {
        message LogMessage;
    });
};

/// InspectPuppet emits inspect data when requested.
///
/// Values are always reported on the root inspect node.
open protocol InspectPuppet {
    /// Emits a health inspect node with OK status.
    flexible SetHealthOk() -> ();

    /// Records a string inspect property.
    flexible RecordString(struct {
        key string:MAX;
        value string:MAX;
    });

    /// Records an integer inspect property.
    flexible RecordInt(struct {
        key string:MAX;
        // Inspect properties don't distinguish between int8, int16, etc...
        // so we accept the maximum width for convenience.
        value int64;
    });

    /// Emits a collection of example of inspect data.
    ///
    /// TODO(issuetracker.google.com/302716196): Tests should emit this data themselves.
    flexible EmitExampleInspectData(struct {
        rows int64;
        columns int64;
    });
};

/// Records values on a lazy inspect node.
///
/// If this connection is dropped before [`CommitLazyValues`] is called, no
/// values are recorded.
///
/// Values are always reported on the root inspect node.
open protocol LazyInspectPuppet {
    compose InspectPuppet;

    /// Reports all recorded values on the root node.
    ///
    /// The server will close the connection after this method is called.
    flexible Commit(struct {
        options CommitOptions;
    });
};

type CommitOptions = table {
    /// Whether to hang when reporting values.
    1: hang bool;
};