// Copyright 2024 The Fuchsia Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SRC_TEE_TEE_INTERNAL_API_INCLUDE_LIB_TEE_INTERNAL_API_TEE_INTERNAL_API_TYPES_H_
#define SRC_TEE_TEE_INTERNAL_API_INCLUDE_LIB_TEE_INTERNAL_API_TEE_INTERNAL_API_TYPES_H_

// Type definitions for the Fuchsia definition of the TEE Core Internal API v1.2.1
//
// https://globalplatform.org/specs-library/tee-internal-core-api-specification/

// 3.2 Data Types

// Fuchsia uses the standard C headers for integer types.

#include <stddef.h>
#include <stdint.h>

#if defined(__STDC_VERSION__) && __STDC_VERSION__ < 202311
#include <stdbool.h>
#endif  // __STDC_VERSION__

// This function must compile as C so we have to disable clang-tidy's C++ specific
// modernize-use-using lint.

// NOLINTBEGIN(modernize-use-using)

typedef uint32_t TEE_Result;
typedef TEE_Result TEEC_Result;

typedef struct {
  uint32_t timeLow;
  uint16_t timeMid;
  uint16_t timeHiAndVersion;
  uint8_t clockSeqAndNode[8];
} TEE_UUID;

typedef TEE_UUID TEEC_UUID;

// 3.3 Constants

#define TEE_SUCCESS 0x00000000
#define TEEC_SUCCESS 0x00000000
#define TEE_ERROR_CORRUPT_OBJECT 0xF0100001
#define TEE_ERROR_CORRUPT_OBJECT_2 0xF0100002
#define TEE_ERROR_STORAGE_NOT_AVAILABLE 0xF0100003
#define TEE_ERROR_STORAGE_NOT_AVAILABLE_2 0xF0100004
#define TEE_ERROR_OLD_VERSION 0xF0100005
#define TEE_ERROR_CIPHERTEXT_INVALID 0xF0100006
#define TEE_ERROR_GENERIC TEEC_ERROR_GENERIC0xFFFF0000
#define TEEC_ERROR_GENERIC 0xFFFF0000
#define TEE_ERROR_ACCESS_DENIED 0xFFFF0001
#define TEEC_ERROR_ACCESS_DENIED 0xFFFF0001
#define TEE_ERROR_CANCEL 0xFFFF0002
#define TEEC_ERROR_CANCEL 0xFFFF0002
#define TEE_ERROR_ACCESS_CONFLICT 0xFFFF0003
#define TEEC_ERROR_ACCESS_CONFLICT 0xFFFF0003
#define TEE_ERROR_EXCESS_DATA 0xFFFF0004
#define TEEC_ERROR_EXCESS_DATA 0xFFFF0004
#define TEE_ERROR_BAD_FORMAT 0xFFFF0005
#define TEEC_ERROR_BAD_FORMAT 0xFFFF0005
#define TEE_ERROR_BAD_PARAMETERS 0xFFFF0006
#define TEEC_ERROR_BAD_PARAMETERS 0xFFFF0006
#define TEE_ERROR_BAD_STATE 0xFFFF0007
#define TEEC_ERROR_BAD_STATE 0xFFFF0007
#define TEE_ERROR_ITEM_NOT_FOUND 0xFFFF0008
#define TEEC_ERROR_ITEM_NOT_FOUND 0xFFFF0008
#define TEE_ERROR_NOT_IMPLEMENTED 0xFFFF0009
#define TEEC_ERROR_NOT_IMPLEMENTED 0xFFFF0009
#define TEE_ERROR_NOT_SUPPORTED 0xFFFF000A
#define TEEC_ERROR_NOT_SUPPORTED 0xFFFF000A
#define TEE_ERROR_NO_DATA 0xFFFF000B
#define TEEC_ERROR_NO_DATA 0xFFFF000B
#define TEE_ERROR_OUT_OF_MEMORY 0xFFFF000C
#define TEEC_ERROR_OUT_OF_MEMORY 0xFFFF000C
#define TEE_ERROR_BUSY 0xFFFF000D
#define TEEC_ERROR_BUSY 0xFFFF000D
#define TEE_ERROR_COMMUNICATION 0xFFFF000E
#define TEEC_ERROR_COMMUNICATION 0xFFFF000E
#define TEE_ERROR_SECURITY 0xFFFF000F
#define TEEC_ERROR_SECURITY 0xFFFF000F
#define TEE_ERROR_SHORT_BUFFER 0xFFFF0010
#define TEEC_ERROR_SHORT_BUFFER 0xFFFF0010
#define TEE_ERROR_EXTERNAL_CANCEL 0xFFFF0011
#define TEEC_ERROR_EXTERNAL_CANCEL 0xFFFF0011
#define TEE_ERROR_TIMEOUT 0xFFFF3001
#define TEE_ERROR_OVERFLOW 0xFFFF300F
#define TEE_ERROR_TARGET_DEAD 0xFFFF3024
#define TEEC_ERROR_TARGET_DEAD 0xFFFF3024
#define TEE_ERROR_STORAGE_NO_SPACE 0xFFFF3041
#define TEE_ERROR_MAC_INVALID 0xFFFF3071
#define TEE_ERROR_SIGNATURE_INVALID 0xFFFF3072
#define TEE_ERROR_TIME_NOT_SET 0xFFFF5000
#define TEE_ERROR_TIME_NEEDS_RESET 0xFFFF5001

// 4.1 Data Types

typedef struct {
  uint32_t login;
  TEE_UUID uuid;
} TEE_Identity;

typedef union {
  struct {
    void* buffer;
    size_t size;
  } memref;
  struct {
    uint32_t a;
    uint32_t b;
  } value;
} TEE_Param;

typedef struct __TEE_TASessionHandle* TEE_TASessionHandle;  // NOLINT(bugprone-reserved-identifier)

typedef struct __TEE_PropSetHandle* TEE_PropSetHandle;  // NOLINT(bugprone-reserved-identifier)

// 4.2.1 Parameter Types

#define TEE_PARAM_TYPE_NONE 0
#define TEE_PARAM_TYPE_VALUE_INPUT 1
#define TEE_PARAM_TYPE_VALUE_OUTPUT 2
#define TEE_PARAM_TYPE_VALUE_INOUT 3
#define TEE_PARAM_TYPE_MEMREF_INPUT 5
#define TEE_PARAM_TYPE_MEMREF_OUTPUT 6
#define TEE_PARAM_TYPE_MEMREF_INOUT 7

// 4.2.2 Login Types

#define TEE_LOGIN_PUBLIC 0x00000000
#define TEE_LOGIN_USER 0x00000001
#define TEE_LOGIN_GROUP 0x00000002
#define TEE_LOGIN_APPLICATION 0x00000004
#define TEE_LOGIN_APPLICATION_USER 0x00000005
#define TEE_LOGIN_APPLICATION_GROUP 0x00000006
#define TEE_LOGIN_TRUSTED_APP 0xF0000000

// 4.2.3 Origin Codes

#define TEE_ORIGIN_API 0x00000001
#define TEE_ORIGIN_COMMS 0x00000002
#define TEE_ORIGIN_TEE 0x00000003
#define TEE_ORIGIN_TRUSTED_APP 0x00000004

// 4.2.4 Property Set Pseudo-Handles

#define TEE_PROPSET_TEE_IMPLEMENTATION 0xFFFFFFFD
#define TEE_PROPSET_CURRENT_CLIENT 0xFFFFFFFE
#define TEE_PROPSET_CURRENT_TA 0xFFFFFFFF

// 4.2.5 Memory Access Rights

#define TEE_MEMORY_ACCESS_READ 0x00000001
#define TEE_MEMORY_ACCESS_WRITE 0x00000002
#define TEE_MEMORY_ACCESS_ANY_OWNER 0x00000004

// 4.3.6.1 Content of paramTypes Argument

#define TEE_PARAM_TYPES(t0, t1, t2, t3) ((t0) | ((t1) << 4) | ((t2) << 8) | ((t3) << 12))
#define TEE_PARAM_TYPE_GET(t, i) (((t) >> ((i) * 4)) & 0xF)

// 5.3.1 TEE_Attribute
typedef struct {
  uint32_t attributeID;
  union {
    struct {
      /* inbuf */ void* buffer;
      size_t length;
    } ref;
    struct {
      uint32_t a;
      uint32_t b;
    } value;
  } content;
} TEE_Attribute;

// 5.3.2 TEE_ObjectInfo
typedef struct {
  uint32_t objectType;
  uint32_t objectSize;
  uint32_t maxObjectSize;
  uint32_t objectUsage;
  size_t dataSize;
  size_t dataPosition;
  uint32_t handleFlags;
} TEE_ObjectInfo;

// 5.3.3 TEE_Whence
typedef uint32_t TEE_Whence;

#define TEE_DATA_SEEK_SET 0x00000000
#define TEE_DATA_SEEK_CUR 0x00000001
#define TEE_DATA_SEEK_END 0x00000002
#define TEE_WHENCE_ILLEGAL_VALUE 0x7FFFFFFF

// 5.3.4 TEE_ObjectHandle
typedef struct __TEE_ObjectHandle* TEE_ObjectHandle;  // NOLINT(bugprone-reserved-identifier)

// 5.3.5 TEE_ObjectEnumHandle
// NOLINTNEXTLINE(bugprone-reserved-identifier)
typedef struct __TEE_ObjectEnumHandle* TEE_ObjectEnumHandle;

// 5.4.1 Constants Used in Trusted Storage API for Data and Keys

// Table 5-2: Object Storage Constants
#define TEE_STORAGE_PRIVATE 0x00000001
#define TEE_STORAGE_ILLEGAL_VALUE 0x7FFFFFFF

// Table 5-3: Data Flag Constants
#define TEE_DATA_FLAG_ACCESS_READ 0x00000001
#define TEE_DATA_FLAG_ACCESS_WRITE 0x00000002
#define TEE_DATA_FLAG_ACCESS_WRITE_META 0x00000004
#define TEE_DATA_FLAG_SHARE_READ 0x00000010
#define TEE_DATA_FLAG_SHARE_WRITE 0x00000020
#define TEE_DATA_FLAG_OVERWRITE 0x00000400
#define TEE_DATA_FLAG_EXCLUSIVE 0x00000400

// Table 5-4: Usage Constants
#define TEE_USAGE_EXTRACTABLE 0x00000001
#define TEE_USAGE_ENCRYPT 0x00000002
#define TEE_USAGE_DECRYPT 0x00000004
#define TEE_USAGE_MAC 0x00000008
#define TEE_USAGE_SIGN 0x00000010
#define TEE_USAGE_VERIFY 0x00000020
#define TEE_USAGE_DERIVE 0x00000040

// Table 5-4b: Miscellaneous Constants [formerly Table 5-8]
#define TEE_DATA_MAX_POSITION 0xFFFFFFFF
#define TEE_OBJECT_ID_MAX_LEN 64

// 5.4.2 Constants Used in Cryptographic Operations API

// Table 5-5: Handle Flag Constants
#define TEE_HANDLE_FLAG_PERSISTENT 0x00010000
#define TEE_HANDLE_FLAG_INITIALIZED 0x00020000
#define TEE_HANDLE_FLAG_KEY_SET 0x00040000
#define TEE_HANDLE_FLAG_EXPECT_TWO_KEYS 0x00080000

// Table 5-6: Operation Constants
#define TEE_OPERATION_CIPHER 1
#define TEE_OPERATION_MAC 3
#define TEE_OPERATION_AE 4
#define TEE_OPERATION_DIGEST 5
#define TEE_OPERATION_ASYMMETRIC_CIPHER 6
#define TEE_OPERATION_ASYMMETRIC_SIGNATURE 7
#define TEE_OPERATION_KEY_DERIVATION 8

// Table 5-7: Operation States
#define TEE_OPERATION_STATE_INITIAL 0x00000000
#define TEE_OPERATION_STATE_ACTIVE 0x00000001

// 6.1.1 TEE_OperationMode
typedef uint32_t TEE_OperationMode;

// Table 6-3: Possible TEE_OperationMode Values
#define TEE_MODE_ENCRYPT 0x00000000
#define TEE_MODE_DECRYPT 0x00000001
#define TEE_MODE_SIGN 0x00000002
#define TEE_MODE_VERIFY 0x00000003
#define TEE_MODE_MAC 0x00000004
#define TEE_MODE_DIGEST 0x00000005
#define TEE_MODE_DERIVE 0x00000006
#define TEE_MODE_ILLEGAL_VALUE 0x7FFFFFFF

// 6.1.2 TEE_OperationInfo
typedef struct {
  uint32_t algorithm;
  uint32_t operationClass;
  uint32_t mode;
  uint32_t digestLength;
  uint32_t maxKeySize;
  uint32_t keySize;
  uint32_t requiredKeyUsage;
  uint32_t handleState;
} TEE_OperationInfo;

// 6.1.3 TEE_OperationInfoMultiple
typedef struct {
  uint32_t keySize;
  uint32_t requiredKeyUsage;
} TEE_OperationInfoKey;
typedef struct {
  uint32_t algorithm;
  uint32_t operationClass;
  uint32_t mode;
  uint32_t digestLength;
  uint32_t maxKeySize;
  uint32_t handleState;
  uint32_t operationState;
  uint32_t numberOfKeys;
  TEE_OperationInfoKey keyInformation[];
} TEE_OperationInfoMultiple;

// 6.1.4 TEE_OperationHandle
typedef struct __TEE_OperationHandle* TEE_OperationHandle;  // NOLINT(bugprone-reserved-identifier)

// Table 6-11: List of Algorithm Identifiers
#define TEE_ALG_AES_ECB_NOPAD 0x10000010
#define TEE_ALG_AES_CBC_NOPAD 0x10000110
#define TEE_ALG_AES_CTR 0x10000210
#define TEE_ALG_AES_CTS 0x10000310
#define TEE_ALG_AES_XTS 0x10000410
#define TEE_ALG_AES_CBC_MAC_NOPAD 0x30000110
#define TEE_ALG_AES_CBC_MAC_PKCS5 0x30000510
#define TEE_ALG_AES_CMAC 0x30000610
#define TEE_ALG_AES_CCM 0x40000710
#define TEE_ALG_AES_GCM 0x40000810
#define TEE_ALG_DES_ECB_NOPAD 0x10000011
#define TEE_ALG_DES_CBC_NOPAD 0x10000111
#define TEE_ALG_DES_CBC_MAC_NOPAD 0x30000111
#define TEE_ALG_DES_CBC_MAC_PKCS5 0x30000511
#define TEE_ALG_DES3_ECB_NOPAD 0x10000013
#define TEE_ALG_DES3_CBC_NOPAD 0x10000113
#define TEE_ALG_DES3_CBC_MAC_NOPAD 0x30000113
#define TEE_ALG_DES3_CBC_MAC_PKCS5 0x30000513
#define TEE_ALG_RSASSA_PKCS1_V1_5_MD5 0x70001830
#define TEE_ALG_RSASSA_PKCS1_V1_5_SHA1 0x70002830
#define TEE_ALG_RSASSA_PKCS1_V1_5_SHA224 0x70003830
#define TEE_ALG_RSASSA_PKCS1_V1_5_SHA256 0x70004830
#define TEE_ALG_RSASSA_PKCS1_V1_5_SHA384 0x70005830
#define TEE_ALG_RSASSA_PKCS1_V1_5_SHA512 0x70006830
#define TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA1 0x70212930
#define TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA224 0x70313930
#define TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA256 0x70414930
#define TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA384 0x70515930
#define TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA512 0x70616930
#define TEE_ALG_RSAES_PKCS1_V1_5 0x60000130
#define TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA1 0x60210230
#define TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA224 0x60310230
#define TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA256 0x60410230
#define TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA384 0x60510230
#define TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA512 0x60610230
#define TEE_ALG_RSA_NOPAD 0x60000030
#define TEE_ALG_DSA_SHA1 0x70002131
#define TEE_ALG_DSA_SHA224 0x70003131
#define TEE_ALG_DSA_SHA256 0x70004131
#define TEE_ALG_DH_DERIVE_SHARED_SECRET 0x80000032
#define TEE_ALG_MD5 0x50000001
#define TEE_ALG_SHA1 0x50000002
#define TEE_ALG_SHA224 0x50000003
#define TEE_ALG_SHA256 0x50000004
#define TEE_ALG_SHA384 0x50000005
#define TEE_ALG_SHA512 0x50000006
#define TEE_ALG_HMAC_MD5 0x30000001
#define TEE_ALG_HMAC_SHA1 0x30000002
#define TEE_ALG_HMAC_SHA224 0x30000003
#define TEE_ALG_HMAC_SHA256 0x30000004
#define TEE_ALG_HMAC_SHA384 0x30000005
#define TEE_ALG_HMAC_SHA512 0x30000006
// The following constants are supposed to be defined if the corresponding algorithm is supported.
// Since we don't support any encryption algorithms yet, none are defined.
// We should define these as we add support.
// #define TEE_ALG_HMAC_SM3 0x30000007)                   // If supported
// #define TEE_ALG_ECDSA_SHA1 0x70001042)                 // If supported
// #define TEE_ALG_ECDSA_SHA224 0x70002042)               // If supported
// #define TEE_ALG_ECDSA_SHA256 0x70003042)               // If supported
// #define TEE_ALG_ECDSA_SHA384 0x70004042)               // If supported
// #define TEE_ALG_ECDSA_SHA512 0x70005042)               // If supported
// #define TEE_ALG_ED25519 0x70006043)                    // If supported
// #define TEE_ALG_ECDH_DERIVE_SHARED_SECRET 0x80000042)  // If supported
// #define TEE_ALG_X25519 0x80000044)                     // If supported
// #define TEE_ALG_SM2_DSA_SM3 0x70006045)                // If supported
// #define TEE_ALG_SM2_KEP 0x60000045)                    // If supported
// #define TEE_ALG_SM2_PKE 0x80000045)                    // If supported
// #define TEE_ALG_SM3 0x50000007)                        // If supported
// #define TEE_ALG_SM4_ECB_NOPAD 0x10000014)              // If supported
// #define TEE_ALG_SM4_CBC_NOPAD 0x10000114)              // If supported
// #define TEE_ALG_SM4_CTR 0x10000214)                    // If supported
#define TEE_ALG_ILLEGAL_VALUE 0xEFFFFFFF

// Table 6-13: List of Object Types
#define TEE_TYPE_AES 0xA0000010
#define TEE_TYPE_DES 0xA0000011
#define TEE_TYPE_DES3 0xA0000013
#define TEE_TYPE_HMAC_MD5 0xA0000001
#define TEE_TYPE_HMAC_SHA1 0xA0000002
#define TEE_TYPE_HMAC_SHA224 0xA0000003
#define TEE_TYPE_HMAC_SHA256 0xA0000004
#define TEE_TYPE_HMAC_SHA384 0xA0000005
#define TEE_TYPE_HMAC_SHA512 0xA0000006
#define TEE_TYPE_HMAC_SM3 0xA0000007
#define TEE_TYPE_RSA_PUBLIC_KEY 0xA0000030
#define TEE_TYPE_RSA_KEYPAIR 0xA1000030
#define TEE_TYPE_DSA_PUBLIC_KEY 0xA0000031
#define TEE_TYPE_DSA_KEYPAIR 0xA1000031
#define TEE_TYPE_DH_KEYPAIR 0xA1000032
#define TEE_TYPE_ECDSA_PUBLIC_KEY 0xA0000041
#define TEE_TYPE_ECDSA_KEYPAIR 0xA1000041
#define TEE_TYPE_ECDH_PUBLIC_KEY 0xA0000042
#define TEE_TYPE_ECDH_KEYPAIR 0xA1000042
#define TEE_TYPE_ED25519_PUBLIC_KEY 0xA0000043
#define TEE_TYPE_ED25519_KEYPAIR 0xA1000043
#define TEE_TYPE_X25519_PUBLIC_KEY 0xA0000044
#define TEE_TYPE_X25519_KEYPAIR 0xA1000044
#define TEE_TYPE_SM2_DSA_PUBLIC_KEY 0xA0000045
#define TEE_TYPE_SM2_DSA_KEYPAIR 0xA1000045
#define TEE_TYPE_SM2_KEP_PUBLIC_KEY 0xA0000046
#define TEE_TYPE_SM2_KEP_KEYPAIR 0xA1000046
#define TEE_TYPE_SM2_PKE_PUBLIC_KEY 0xA0000047
#define TEE_TYPE_SM2_PKE_KEYPAIR 0xA1000047
#define TEE_TYPE_SM4 0xA0000014
#define TEE_TYPE_GENERIC_SECRET 0xA0000000
#define TEE_TYPE_CORRUPTED_OBJECT 0xA00000BE
#define TEE_TYPE_DATA 0xA00000BF
#define TEE_TYPE_ILLEGAL_VALUE 0xEFFFFFFF

// 6.10.3 Optional Cryptographic Elements
#define TEE_CRYPTO_ELEMENT_NONE 0x00000000
#define TEE_ECC_CURVE_NIST_P192 0x00000001
#define TEE_ECC_CURVE_NIST_P224 0x00000002
#define TEE_ECC_CURVE_NIST_P256 0x00000003
#define TEE_ECC_CURVE_NIST_P384 0x00000004
#define TEE_ECC_CURVE_NIST_P521 0x00000005
#define TEE_ECC_CURVE_BSI_P160r1 0x00000101
#define TEE_ECC_CURVE_BSI_P192r1 0x00000102
#define TEE_ECC_CURVE_BSI_P224r1 0x00000103
#define TEE_ECC_CURVE_BSI_P256r1 0x00000104
#define TEE_ECC_CURVE_BSI_P320r1 0x00000105
#define TEE_ECC_CURVE_BSI_P384r1 0x00000106
#define TEE_ECC_CURVE_BSI_P512r1 0x00000107
#define TEE_ECC_CURVE_BSI_P160t1 0x00000201
#define TEE_ECC_CURVE_BSI_P192t1 0x00000202
#define TEE_ECC_CURVE_BSI_P224t1 0x00000203
#define TEE_ECC_CURVE_BSI_P256t1 0x00000204
#define TEE_ECC_CURVE_BSI_P320t1 0x00000205
#define TEE_ECC_CURVE_BSI_P384t1 0x00000206
#define TEE_ECC_CURVE_BSI_P512t1 0x00000207
#define TEE_ECC_CURVE_25519 0x00000300
#define TEE_ECC_CURVE_SM2 0x00000300

// 6.11 Object or Operation Attributes
#define TEE_ATTR_SECRET_VALUE 0xC0000000
#define TEE_ATTR_RSA_MODULUS 0xD0000130
#define TEE_ATTR_RSA_PUBLIC_EXPONENT 0xD0000230
#define TEE_ATTR_RSA_PRIVATE_EXPONENT 0xC0000330
#define TEE_ATTR_RSA_PRIME1 0xC0000430
#define TEE_ATTR_RSA_PRIME2 0xC0000530
#define TEE_ATTR_RSA_EXPONENT1 0xC0000630
#define TEE_ATTR_RSA_EXPONENT2 0xC0000730
#define TEE_ATTR_RSA_COEFFICIENT 0xC0000830
#define TEE_ATTR_DSA_PRIME 0xD0001031
#define TEE_ATTR_DSA_SUBPRIME 0xD0001131
#define TEE_ATTR_DSA_BASE 0xD0001231
#define TEE_ATTR_DSA_PUBLIC_VALUE 0xD0000131
#define TEE_ATTR_DSA_PRIVATE_VALUE 0xC0000231
#define TEE_ATTR_DH_PRIME 0xD0001032
#define TEE_ATTR_DH_SUBPRIME 0xD0001132
#define TEE_ATTR_DH_BASE 0xD0001232
#define TEE_ATTR_DH_X_BITS 0xF0001332
#define TEE_ATTR_DH_PUBLIC_VALUE 0xD0000132
#define TEE_ATTR_DH_PRIVATE_VALUE 0xC0000232
#define TEE_ATTR_RSA_OAEP_LABEL 0xD0000930
#define TEE_ATTR_RSA_PSS_SALT_LENGTH 0xF0000A30
#define TEE_ATTR_ECC_PUBLIC_VALUE_X 0xD0000141
#define TEE_ATTR_ECC_PUBLIC_VALUE_Y 0xD0000241
#define TEE_ATTR_ECC_PRIVATE_VALUE 0xC0000341
#define TEE_ATTR_ECC_CURVE 0xF0000441
#define TEE_ATTR_ED25519_CTX 0xD0000643
#define TEE_ATTR_ED25519_PUBLIC_VALUE 0xD0000743
#define TEE_ATTR_ED25519_PRIVATE_VALUE 0xC0000843
#define TEE_ATTR_ED25519_PH 0xF0000543
#define TEE_ATTR_X25519_PUBLIC_VALUE 0xD0000944
#define TEE_ATTR_X25519_PRIVATE_VALUE 0xC0000A44
// The next three values have two conflicting definitions in the specification.
// #define TEE_ATTR_ECC_PUBLIC_VALUE_X 0xD0000146
// #define TEE_ATTR_ECC_PUBLIC_VALUE_Y 0xD0000246
// #define TEE_ATTR_ECC_PRIVATE_VALUE 0xD0000346
#define TEE_ATTR_SM2_ID_INITIATOR 0xD0000446
#define TEE_ATTR_SM2_ID_RESPONDER 0xD0000546
#define TEE_ATTR_SM2_KEP_USER 0xF0000646
#define TEE_ATTR_SM2_KEP_CONFIRMATION_IN 0xD0000746
#define TEE_ATTR_SM2_KEP_CONFIRMATION_OUT 0xD0000846

// Table 6-18: Attribute Identifier Flags
#define TEE_ATTR_FLAG_VALUE 0x20000000
#define TEE_ATTR_FLAG_PUBLIC 0x10000000

// 7.1.1 TEE_Time
typedef struct {
  uint32_t seconds;
  uint32_t millis;
} TEE_Time;

// 8.3.1 TEE_BigInt
typedef uint32_t TEE_BigInt;

// 8.3.2 TEE_BigIntFMMContext
typedef uint32_t TEE_BigIntFMMContext;

// 8.3.3 TEE_BigIntFMM
typedef uint32_t TEE_BigIntFMM;

// 8.4.1 TEE_BigIntSizeInU32
#define TEE_BigIntSizeInU32(n) ((((n) + 31) / 32) + 2)

// NOLINTEND(modernize-use-using)

#endif  // SRC_TEE_TEE_INTERNAL_API_INCLUDE_LIB_TEE_INTERNAL_API_TEE_INTERNAL_API_TYPES_H_
