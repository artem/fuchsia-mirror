// Copyright 2021 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Expected event output when running the tests in sample_tests.cc with the default options.
// This file should be imported using `include!("<path to file>")`.
{
    use {
        fidl_fuchsia_test_manager::{SuiteStatus, CaseStatus},
        test_manager_test_lib::RunEvent,
    };

    vec![
        RunEvent::suite_started(),
        RunEvent::case_found("SampleTest1.SimpleFail"),
        RunEvent::case_started("SampleTest1.SimpleFail"),
        RunEvent::case_stdout(
            "SampleTest1.SimpleFail",
            "../../src/sys/test_runners/gtest/test_data/sample_tests.cc:9: Failure",
        ),
        RunEvent::case_stdout("SampleTest1.SimpleFail", "Value of: true"),
        RunEvent::case_stdout("SampleTest1.SimpleFail", "  Actual: true"),
        RunEvent::case_stdout("SampleTest1.SimpleFail", "Expected: false"),
        RunEvent::case_stdout("SampleTest1.SimpleFail", ""),
        RunEvent::case_stopped("SampleTest1.SimpleFail", CaseStatus::Failed),
        RunEvent::case_finished("SampleTest1.SimpleFail"),

        RunEvent::case_found("SampleTest1.Crashing"),
        RunEvent::case_started("SampleTest1.Crashing"),
        RunEvent::case_stderr("SampleTest1.Crashing", "Test exited abnormally"),
        RunEvent::case_stopped("SampleTest1.Crashing", CaseStatus::Failed),
        RunEvent::case_finished("SampleTest1.Crashing"),

        RunEvent::case_found("SampleTest2.SimplePass"),
        RunEvent::case_started("SampleTest2.SimplePass"),
        RunEvent::case_stopped("SampleTest2.SimplePass", CaseStatus::Passed),
        RunEvent::case_finished("SampleTest2.SimplePass"),

        RunEvent::case_found("SampleFixture.Test1"),
        RunEvent::case_started("SampleFixture.Test1"),
        RunEvent::case_stopped("SampleFixture.Test1", CaseStatus::Passed),
        RunEvent::case_finished("SampleFixture.Test1"),

        RunEvent::case_found("SampleFixture.Test2"),
        RunEvent::case_started("SampleFixture.Test2"),
        RunEvent::case_stopped("SampleFixture.Test2", CaseStatus::Passed),
        RunEvent::case_finished("SampleFixture.Test2"),

        RunEvent::case_found("SampleDisabled.DISABLED_TestPass"),
        RunEvent::case_started("SampleDisabled.DISABLED_TestPass"),
        RunEvent::case_stopped("SampleDisabled.DISABLED_TestPass", CaseStatus::Skipped),
        RunEvent::case_finished("SampleDisabled.DISABLED_TestPass"),

        RunEvent::case_found("SampleDisabled.DISABLED_TestFail"),
        RunEvent::case_started("SampleDisabled.DISABLED_TestFail"),
        RunEvent::case_stopped("SampleDisabled.DISABLED_TestFail", CaseStatus::Skipped),
        RunEvent::case_finished("SampleDisabled.DISABLED_TestFail"),

        RunEvent::case_found("SampleDisabled.DynamicSkip"),
        RunEvent::case_started("SampleDisabled.DynamicSkip"),
        RunEvent::case_stdout(
            "SampleDisabled.DynamicSkip",
            "../../src/sys/test_runners/gtest/test_data/sample_tests.cc:25: Skipped",
        ),
        RunEvent::case_stdout("SampleDisabled.DynamicSkip", ""),
        RunEvent::case_stdout("SampleDisabled.DynamicSkip", ""),
        RunEvent::case_stopped("SampleDisabled.DynamicSkip", CaseStatus::Skipped),
        RunEvent::case_finished("SampleDisabled.DynamicSkip"),

        RunEvent::case_found("Tests/SampleParameterizedTestFixture.Test/0"),
        RunEvent::case_started("Tests/SampleParameterizedTestFixture.Test/0"),
        RunEvent::case_stopped("Tests/SampleParameterizedTestFixture.Test/0", CaseStatus::Passed),
        RunEvent::case_finished("Tests/SampleParameterizedTestFixture.Test/0"),

        RunEvent::case_found("Tests/SampleParameterizedTestFixture.Test/1"),
        RunEvent::case_started("Tests/SampleParameterizedTestFixture.Test/1"),
        RunEvent::case_stopped("Tests/SampleParameterizedTestFixture.Test/1", CaseStatus::Passed),
        RunEvent::case_finished("Tests/SampleParameterizedTestFixture.Test/1"),

        RunEvent::case_found("Tests/SampleParameterizedTestFixture.Test/2"),
        RunEvent::case_started("Tests/SampleParameterizedTestFixture.Test/2"),
        RunEvent::case_stopped("Tests/SampleParameterizedTestFixture.Test/2", CaseStatus::Passed),
        RunEvent::case_finished("Tests/SampleParameterizedTestFixture.Test/2"),

        RunEvent::case_found("Tests/SampleParameterizedTestFixture.Test/3"),
        RunEvent::case_started("Tests/SampleParameterizedTestFixture.Test/3"),
        RunEvent::case_stopped("Tests/SampleParameterizedTestFixture.Test/3", CaseStatus::Passed),
        RunEvent::case_finished("Tests/SampleParameterizedTestFixture.Test/3"),

        RunEvent::case_found("WriteToStd.TestPass"),
        RunEvent::case_started("WriteToStd.TestPass"),
        RunEvent::case_stdout("WriteToStd.TestPass", "first msg"),
        RunEvent::case_stderr("WriteToStd.TestPass", "second msg"),
        RunEvent::case_stderr("WriteToStd.TestPass", ""),
        RunEvent::case_stderr("WriteToStd.TestPass", ""),
        RunEvent::case_stdout("WriteToStd.TestPass", "third msg"),
        RunEvent::case_stdout("WriteToStd.TestPass", ""),
        RunEvent::case_stderr("WriteToStd.TestPass", "fourth msg"),
        RunEvent::case_stderr("WriteToStd.TestPass", ""),
        RunEvent::case_stopped("WriteToStd.TestPass", CaseStatus::Passed),
        RunEvent::case_finished("WriteToStd.TestPass"),

        RunEvent::case_found("WriteToStd.TestFail"),
        RunEvent::case_started("WriteToStd.TestFail"),
        RunEvent::case_stdout("WriteToStd.TestFail", "first msg"),
        RunEvent::case_stderr("WriteToStd.TestFail", "second msg"),
        RunEvent::case_stdout(
            "WriteToStd.TestFail",
            "../../src/sys/test_runners/gtest/test_data/sample_tests.cc:44: Failure",
        ),
        RunEvent::case_stdout("WriteToStd.TestFail", "Value of: true"),
        RunEvent::case_stdout("WriteToStd.TestFail", "  Actual: true"),
        RunEvent::case_stdout("WriteToStd.TestFail", "Expected: false"),
        RunEvent::case_stdout("WriteToStd.TestFail", ""),
        RunEvent::case_stdout("WriteToStd.TestFail", "third msg"),
        RunEvent::case_stderr("WriteToStd.TestFail", "fourth msg"),
        RunEvent::case_stopped("WriteToStd.TestFail", CaseStatus::Failed),
        RunEvent::case_finished("WriteToStd.TestFail"),

        RunEvent::suite_stopped(SuiteStatus::Failed),
    ]
}
