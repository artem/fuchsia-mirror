// Copyright 2024 The Fuchsia Authors.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library test.time.realm;

using fuchsia.time.external;

/// Used to manipulate the internal push source for testing.
open protocol PushSourcePuppet {
    /// Sets the next sample to be reported by the push source.
    flexible SetSample(@generated_name("SetSampleArgs") struct {
        sample fuchsia.time.external.TimeSample;
    }) -> ();

    /// Sets the next status to be reported by the push source.
    flexible SetStatus(@generated_name("SetStatusArgs") struct {
        status fuchsia.time.external.Status;
    }) -> ();

    /// Deliberately crash the time source.
    flexible Crash() -> ();

    /// Returns the number of cumulative connections served during the lifetime of
    /// the PushSourcePuppet. This allows asserting behavior, such as when
    /// Timekeeper has restarted a connection. Timekeeper's lifetime is independent
    /// of that of PushSourcePuppet.
    flexible GetLifetimeServedConnections() -> (@generated_name("ConnectionsResponse") struct {
        num_lifetime_connections uint32;
    });
};

