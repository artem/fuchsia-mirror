# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/bind/bind.gni")
import("//build/components.gni")
import("//build/drivers.gni")

source_set("lib") {
  sources = [
    "control.cc",
    "temperature_driver.cc",
  ]

  public_deps = [
    "../fuchsia.powermanager.driver.fidl:fuchsia.powermanager.driver.temperaturecontrol_cpp",
    "//sdk/fidl/fuchsia.hardware.temperature:fuchsia.hardware.temperature_cpp",
    "//sdk/lib/driver/component/cpp:cpp",
    "//sdk/lib/driver/devfs/cpp",
  ]
}

driver_bind_rules("power-manager-fake-bind") {
  rules = "power-manager-fake-bind.bind"
  bind_output = "power-manager-fake-bind.bindbc"
  deps = [ "../fuchsia.powermanager.driver.bind:powermanager_bindlib" ]
}

fuchsia_driver("fake-temperature") {
  output_name = "fake-temperature"
  sources = [ "driver.cc" ]

  deps = [
    ":lib",
    ":power-manager-fake-bind",
    "//src/devices/lib/driver:driver_runtime",
  ]
}

fuchsia_driver_component("component") {
  component_name = "fake-temperature"
  manifest = "meta/power-manager-fake-driver.cml"
  deps = [ ":fake-temperature" ]
  info = "power-manager-fake-driver.json"
}

driver_bind_rules("power-manager-nelson-fake-bind") {
  rules = "power-manager-nelson-fake-bind.bind"
  bind_output = "power-manager-nelson-fake-bind.bindbc"
  deps = [ "../fuchsia.powermanager.driver.bind:powermanager_bindlib" ]
}

fuchsia_driver("power-manager-nelson-fake-driver") {
  output_name = "power-manager-nelson-fake-driver"
  sources = [ "nelson_driver.cc" ]

  deps = [
    ":lib",
    ":power-manager-nelson-fake-bind",
    "//src/devices/lib/driver:driver_runtime",
  ]
}

fuchsia_driver_component("nelson-component") {
  component_name = "power-manager-nelson-fake-driver"
  manifest = "meta/power-manager-nelson-fake-driver.cml"
  deps = [ ":power-manager-nelson-fake-driver" ]
  info = "power-manager-fake-driver.json"
}
