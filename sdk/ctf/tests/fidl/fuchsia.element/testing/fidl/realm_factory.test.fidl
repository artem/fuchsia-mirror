// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.element.test;

using fuchsia.component.sandbox;
using fuchsia.testing.harness;

/// RealmOptions tells the RealmFactory protocol how to create the test realm.
type RealmOptions = table {};

/// The test realm factory protocol for archivist integration tests.
///
/// This protocol allows clients to build an archivist component in a hermetic
/// test realm that also includes several "puppet" components.
///
/// For full documentation see //src/diagnostics/testing/realm-factory/README.md.
@discoverable
open protocol RealmFactory {
    /// Specifies the options to use when creating the realm.
    ///
    /// Returns OperationError.INVALID if called more than once.
    flexible CreateRealm(resource struct {
        options RealmOptions;
        realm_server server_end:fuchsia.testing.harness.RealmProxy;
    }) -> () error fuchsia.testing.harness.OperationError;

    /// Creates a new realm and returns a dictionary containing its exposed capabilities.
    flexible CreateRealm2(resource struct {
        options RealmOptions;
        dictionary server_end:fuchsia.component.sandbox.Dictionary;
    }) -> () error fuchsia.testing.harness.OperationError;
};
