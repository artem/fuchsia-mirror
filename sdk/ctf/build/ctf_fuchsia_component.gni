# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/components.gni")
import("//sdk/ctf/build/internal/ctf_element.gni")
import("//sdk/ctf/build/internal/ctf_version.gni")
import("//sdk/ctf/build/internal/write_ctf_file.gni")

# A Fuchsia component that can be used in CTF.
#
# An equivalent to fuchsia_component, but ensures dependencies are allowed in CTF.
#
# Example:
# ```
# ctf_fuchsia_component("my-component") {
#   deps = [ ":my-bin" ]
#   manifest = "meta/my-component.cml"
#   testonly = true
# }
# ```
#
# Parameters
#   prebuilt_only (optional)
#     Indicates whether a test is an ABI only test. When true, the template does
#     not create an _sdk target.
#     Type: bool
template("ctf_fuchsia_component") {
  assert(
      defined(invoker.manifest),
      "`manifest` must be specified when calling ctf_fuchsia_component($target_name)")

  assert(get_path_info(invoker.manifest, "extension") == "cml",
         "CTF component manifests must be CFv2.")

  if (!defined(invoker.deps)) {
    invoker.deps = []
  }

  if (invoker.deps != [] && cts_version == "") {
    verify_target = target_name + "_verify_deps"
  }
  write_file_target = target_name + "_ctf_file"

  if (defined(verify_target)) {
    ctf_element(verify_target) {
      deps_to_verify = invoker.deps
      invoker_label =
          get_label_info(":${invoker.target_name}", "label_no_toolchain")
    }
  }

  write_ctf_file(write_file_target) {
  }

  fuchsia_component(target_name) {
    forward_variables_from(invoker, "*", [ "prebuilt_only" ])

    if (defined(verify_target)) {
      deps += [ ":$verify_target" ]
    }
    deps += [ ":$write_file_target" ]
  }
}
