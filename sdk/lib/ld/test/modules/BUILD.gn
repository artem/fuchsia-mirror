# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/testing/host_test_data.gni")
import("//build/toolchain/toolchain_environment.gni")

# This only gets instantiated in the environment where the test modules are
# meant to be built.

executables = [
  ":ret17",
  ":ret17.in-process",
  ":relative-reloc",
  ":relative-reloc.in-process",
  ":symbolic-reloc",
  ":symbolic-reloc.in-process",
]
libs = []
modules = []

if (is_fuchsia) {
  assert(toolchain_environment == "user.basic",
         "$current_toolchain is $toolchain_environment")

  group("modules") {
    testonly = true

    deps = executables + libs + modules
  }
} else {
  if (is_linux) {
    assert(toolchain_environment == "linux",
           "$current_toolchain is $toolchain_environment")
  }

  host_test_data("modules") {
    deps = []
    sources = []
    outputs = [ "$host_out_dir/test_data/elfldltl/{{source_file_part}}" ]

    foreach(label, executables) {
      name = get_label_info(label, "name")

      deps += [ label ]
      sources += [ "$root_out_dir/$name" ]
    }

    # shlib_out_dir = get_label_info(".($shlib_toolchain)", "root_out_dir")

    foreach(label, libs) {
      name = get_label_info(label, "name")

      deps += [ "$label($shlib_toolchain)" ]
      sources += [ "$shlib_out_dir/lib$file.so" ]
    }

    foreach(label, modules) {
      name = get_label_info(label, "name")

      deps += [ "$label($shlib_toolchain)" ]
      sources += [ "$shlib_out_dir/$file.so" ]
    }
  }
}

config("semantic-interposition") {
  visibility = [ ":*" ]

  # TODO(fxbug.dev/117866): clang will still perform interprocedural
  # optimization in a PIC, this flag disallows that and requires the PLT call
  # always be made so we can properly test applying plt relocations.
  if (!is_gcc) {
    cflags = [ "-fsemantic-interposition" ]
  }
}

template("test_executable") {
  suffices = [ "" ]
  if (defined(invoker.can_be_in_process) && invoker.can_be_in_process) {
    suffices += [ ".in-process" ]
  }
  foreach(suffix, suffices) {
    executable(target_name + suffix) {
      testonly = true

      deps = []
      forward_variables_from(invoker,
                             "*",
                             [
                               "configs",
                               "testonly",
                             ])
      deps += [ ":test-executable$suffix" ]
      if (defined(invoker.configs)) {
        configs += invoker.configs
      }

      # This is needed in the non-Zircon (host/Linux) toolchains to avoid
      # having any implicit deps injected.
      disable_syslog_backend = true

      exclude_toolchain_tags = [ "instrumentation-runtime" ]
    }
  }
}

# The test executables declare an `extern "C" ... TestStart(...)` entry point.
#
# When built for in-process tests, the ELF entry point will be called directly
# by the test code.  For Fuchsia, link the test executables with -e TestStart.
# For POSIX, link with an assembly implementation of _start that tail-calls
# TestStart.
#
# When built for separate-process tests, the ELF entry point cannot return.
# Instead, it's defined to call TestStart and exit with its value.
foreach(in_process,
        [
          "",
          ".in-process",
        ]) {
  source_set("test-executable$in_process") {
    visibility = [ ":*" ]
    testonly = true

    if (in_process != "") {
      defines = [ "IN_PROCESS_TEST" ]
    }

    public_deps = [ "//sdk/lib/ld:standalone" ]
    public_configs = [
      "//sdk/lib/ld:abi-interp",
      ":semantic-interposition",
    ]
    if (is_fuchsia) {
      if (in_process == "") {
        sources = [ "zircon-test-start.cc" ]
        deps = [
          "//src/zircon/lib/zircon",
          "//zircon/system/public",
        ]
      } else {
        public_configs += [ ":test-executable.in-process.config" ]
      }
    } else {
      sources = [ "posix-test-start.S" ]
      deps = [ "//zircon/kernel/lib/arch" ]
    }

    # This dependency is evaluated in the toolchain where the test_executable()
    # is built, after variant selection.  So it gets the right version of
    # ld-startup installed where the test needs to find it.
    data_deps = [ "..:ld-startup.test-data($shlib_toolchain)" ]
  }
}

config("test-executable.in-process.config") {
  visibility = [ ":*" ]
  ldflags = [ "-Wl,-e,TestStart" ]
}

test_executable("ret17") {
  can_be_in_process = true
  sources = [ "ret17.cc" ]
}

test_executable("relative-reloc") {
  can_be_in_process = true
  sources = [ "relative-reloc.cc" ]
}

config("temporarily-build-as-shared") {
  visibility = [ ":*" ]

  cflags = [
    "-fPIC",
    "-Wno-unused-command-line-argument",
    "-Wno-option-ignored",
  ]
  ldflags = cflags
  ldflags += [ "-shared" ]
}

test_executable("symbolic-reloc") {
  can_be_in_process = true
  sources = [
    "interp.S",
    "symbolic-reloc.cc",
  ]
  defines = [ "DYNAMIC_LINKER_PATH=\"${toolchain_variant.libprefix}ld.so.1\"" ]
  deps = [ "//zircon/system/public" ]
  configs = [ ":temporarily-build-as-shared" ]
}
