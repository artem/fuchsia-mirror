// Copyright 2024 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.input.interaction.observation;

using zx;

type HandoffWakeError = enum {
    /// The power framework is unavailable
    POWER_NOT_AVAILABLE = 1;
};

/// The Aggregator protocol collects evidence of user activity and uses this
/// evidence to set the system's activity state.
@discoverable
closed protocol Aggregator {
    /// Reports a discrete activity such as a keystroke.
    strict ReportDiscreteActivity(struct {
        event_time zx.Time;
    }) -> ();

    /// Asks the server to create a wake lease and returns when a wake lease
    /// has been created, signaling to the caller that it can cede system
    /// wakefulness if it wants. The caller is responsible for ensuring the
    /// CPUs remain awake until this call completes.
    strict HandoffWake() -> () error HandoffWakeError;
};
