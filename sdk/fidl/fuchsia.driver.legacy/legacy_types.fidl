// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.driver.legacy;

/// Maximum number of bytes in a path
// The simple name PATH_MAX collides with a musl #define on c++ bindings.
const DEVICE_PATH_MAX uint32 = 1024;

// Maximum number of instructions in a driver bind program
const BIND_RULES_INSTRUCTIONS_MAX uint32 = 256;

/// Maximum number of properties that can be attached to a device
const PROPERTIES_MAX uint32 = 256;

/// Maximum number of string properties that can be attached to a device
const STR_PROPERTIES_MAX uint32 = 256;

/// Maximum length of a string property key and value.
const STR_LENGTH_MAX uint32 = 255;

type BindInstruction = struct {
    /// bitfield that encodes the operation and execution conditions
    op uint32;
    /// bitfield that encodes the arguments
    arg uint32;
    /// bitfield that encodes debugging information
    debug uint32;
};

/// This has the same structure as zx_device_prop_t.
type DeviceProperty = struct {
    id uint16;
    reserved uint16;
    value uint32;
};

type PropertyValue = strict union {
    1: int_value uint32;
    2: str_value string:STR_LENGTH_MAX;
    3: bool_value bool;
    4: enum_value string:STR_LENGTH_MAX;
};

type DeviceStrProperty = struct {
    key string:STR_LENGTH_MAX;
    value PropertyValue;
};

type DevicePropertyList = struct {
    props vector<DeviceProperty>:PROPERTIES_MAX;
    str_props vector<DeviceStrProperty>:STR_PROPERTIES_MAX;
};
