// Copyright 2023 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
library fuchsia.hardware.display.types;

/// Type of the internal value in [`fuchsia.hardware.display.types/ImageId`].
alias ImageIdValue = uint64;

/// Unique identifier for an image registered with the display coordinator.
///
/// [`fuchsia.hardware.display/INVALID_DISP_ID`] represents an invalid value.
///
/// Valid values uniquely identify "live" images within a Display Coordinator
/// connection. The identifier of an image destroyed via
/// [`fuchsia.hardware.display/Coordinator.ReleaseImage`] can be reused in a
/// subsequent [`fuchsia.hardware.display/Coordinator.ImportImage`] call.
///
/// An image is a memory buffer whose bytes have a fixed interpretation as an
/// array of pixels. Memory buffers are managed by sysmem, and are accessed by
/// the display stack using a [`fuchsia.sysmem/BufferCollection`]. The buffer's
/// interpretation is described by an [`ImageConfig`].
type ImageId = struct {
    value ImageIdValue;
};

/// Information about the usage and storage format of an image buffer.
///
/// Values other than [`fuchsia.hardware.display.types/TYPE_SIMPLE`] and
/// [`fuchsia.hardware.display.types/TYPE_CAPTURE`] are an escape hatch. The driver
/// and image producer are responsible for agreeing on the meaning of the value,
/// through some mechanism outside the scope of this API.
alias ImageTypeValue = uint32;

/// Default for [`fuchsia.hardware.display.types/ImageTypeValue`].
const TYPE_SIMPLE ImageTypeValue = 0;

// The gap between TYPE_SIMPLE and TYPE_CAPTURE can be used for
// platform-specific / driver-specific formats. Eventually, this magic will be
// replaced by better primitives for discovering and negotiating image
// contracts.

/// The image buffer is used by the display engine to store displayed contents.
const TYPE_CAPTURE ImageTypeValue = 10;

/// Defines how data in an image buffer is interpreted.
type ImageConfig = struct {
    /// Image width, in pixels.
    width uint32;

    /// Image height, in pixels.
    height uint32;

    @allow_deprecated_struct_defaults
    type ImageTypeValue = TYPE_SIMPLE;
};

/// A structure containing information about an image.
type Image = struct {
    /// The width and height of the image in pixels.
    width uint32;
    height uint32;

    /// The type conveys information about what is providing the pixel data. If
    /// this is not [`fuchsia.hardware.display.types/TYPE_SIMPLE`], it is up to
    /// the driver and buffer producer to agree on the meaning of the value
    /// through some mechanism outside the scope of this API.
    type uint32;

    /// A driver-defined ImageId. Each id must be unique.
    id ImageId;
};
