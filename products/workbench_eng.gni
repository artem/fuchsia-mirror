# Copyright 2023 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#  ________  _________  ________  ________
# |\   ____\|\___   ___\\   __  \|\   __  \
# \ \  \___|\|___ \  \_\ \  \|\  \ \  \|\  \
#  \ \_____  \   \ \  \ \ \  \\\  \ \   ____\
#   \|____|\  \   \ \  \ \ \  \\\  \ \  \___|
#     ____\_\  \   \ \__\ \ \_______\ \__\
#    |\_________\   \|__|  \|_______|\|__|
#    \|_________|
#
# This gni import only exists because we need to build the GN platform artifacts
# before passing them to Bazel. Workbench still has some artifacts which need to
# come from a legacy bundle. It uses the legacy bundle defined for the minimal
# image to minimize the number of legacy bundles we need to maintain. We will
# eventually delete the minimal legacy bundle altogether.
#
# Every new addition to this gni file is an instance of tech-debt that must be
# cleaned up to have a proper platform+product interface. If you need to add a
# specific artifact to the workbench product, please either add it to the bazel
# rules: //products/workbench/BUILD.bazel
#
# or to the platform AIBs: //build/assembly/BUILD.gn
#
# If the artifact is incapable of being put inside either of these locations,
# reach out to the assembly team for guidance: //src/lib/assembly/OWNERS. The
# assembly team may allow an exception so that artifacts can be added directly
# to this file, but each entry needs a ticket assigned to the assembly team with
# an agreed upon solution for how to address the tech-debt.

# We use the minimal legacy AIB for workbench.
import("//products/common/minimal.gni")

# Use Bazel-built images
use_bazel_images_only = true
bazel_product_bundle_prefix = "//products/workbench:workbench_eng"

# TODO(issuetracker.google.com/290788730): Remove the need to specify this
# config as well as bazel_product_bundle_prefix
fuchsia_product_assembly_config_label = "//products/minimal"
fuchsia_filesystem_config = "//boards/images:default"

# Kernel command line arguments.
product_bootfs_labels += [
  "//products/kernel_cmdline:oom.reboot-timeout--low",
  "//bundles/drivers:usb-peripheral-stack",
  "//src/sys/component_manager:component_manager_bootfs_config",
]

legacy_base_package_labels += [
  # TODO(http://fxb/103965): remove once we have config_data support in assembly_input_bundle()
  "//src/connectivity/network/netcfg:config-default",
]

fuchsia_structured_config_policy =
    "//products/minimal/minimal_user_structured_config_policy.json5"

extra_bazel_assembly_targets =
    [ "//build/bazel/assembly/assembly_outputs:verifications" ]

extra_gn_labels_for_bazel_inputs =
    [ "//src/ui/bin/tiles-session:tiles_session_bazel_inputs" ]

# We need to skip the fshost configuration in Assembly for workbench until
# minimal.gni supports configuring fshost via Assembly
# TODO(fxbug.dev/121405): Remove once fshost is no longer configured via GN
assembly_fshost = true

# BEGIN: Baseline eng support
#
# Support for `ffx`, `fx log`, and `fx shell`, and devhost registration.
#
# TODO(fxbug.dev/121402): Delete this section and do the equivalent via
# assembly.
legacy_base_package_labels += [
  "//src/connectivity:tools",
  "//src/diagnostics/log_listener:log_listener_shell",
]

# Debugging support
discoverable_package_labels += [ "//src/developer/debug/debug_agent" ]
# END: Baseline eng support
